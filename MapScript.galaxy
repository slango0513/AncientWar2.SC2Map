//==================================================================================================
// 
// Generated Map Script
// 
// Name:   ?????????
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "LibGAw3"
include "LibGAwX"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libGAw3_InitLib();
    libGAwX_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const string gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE58D95E4BD8D = "\xE5\x8D\x95\xE4\xBD\x8D\xEF\xBC\x9A";
const string gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE782B9 = "\xE7\x82\xB9\xEF\xBC\x9A";
const fixed gv_minimumPeriod = 0.0625;
const int gv_customValuePhalanx = 1;
const string gv_unitTypeUserType = "ArmyTypeData";
const string gv_phalanxUserType = "PhalanxData";
const string gv_portalUserType = "PortalData";
const string gv_phalanxBuffUserType = "PhalanxBuffData";
const string gv_creepUnitTypeUserType = "CreepUnitTypeData";
const int gv_unitMaximumCountPerPhalanx = 72;
const int gv_portalMaximumCount = 2;
const int gv_phalanxMaximumCount = 3;
const int gv_venueMaximumCount = 8;
const int gv_roundMaximumCount = 10;
const int gv_teamRoundMaximumCount = 7;
const int gv_teamMemberMaximumCount = 2;
const int gv_teamMaximumCount = 8;
const int gv_playerCount = 8;
const int gv_playerMaximumIndex = 15;
const int gv_venueGroupMaximumCount = (gv_teamMaximumCount/2);

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
string[6] gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE5898DE7BC80;
fixed gv_adefDamageTaken;
fixed gv_adefDeflectChance;
unitgroup gv_adefGroup;
int[gv_playerCount + 1] gv_userPlayer;
int[gv_playerCount + 1] gv_mirrorPlayer;
int gv_teamCount;
int gv_teamMemberCount;
int gv_teamRoundCount;
int gv_roundCount;
playergroup[gv_teamMaximumCount + 1] gv_teamGroup;
playergroup[gv_teamMaximumCount + 1] gv_mirrorTeamGroup;
region[gv_venueMaximumCount + 1] gv_venue;
fixed[gv_venueMaximumCount + 1] gv_venueFacing;
revealer[gv_venueMaximumCount + 1][gv_playerMaximumIndex + 1] gv_venueRevealer;
region[gv_venueMaximumCount + 1] gv_bonusVenue;
fixed[gv_venueMaximumCount + 1] gv_bonusVenueFacing;
revealer[gv_venueMaximumCount + 1][gv_playerMaximumIndex + 1] gv_bonusVenueRevealer;
region[gv_venueMaximumCount + 1] gv_venueInitial;
fixed[gv_venueMaximumCount + 1] gv_venueInitialFacing;
revealer[gv_venueMaximumCount + 1][gv_playerMaximumIndex + 1] gv_venueInitialRevealer;
region[gv_playerCount + 1][gv_phalanxMaximumCount + 1] gv_buildingRegion;
revealer[gv_playerMaximumIndex + 1][gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1] gv_buildingRegionRevealer;
revealer[gv_playerMaximumIndex + 1][gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1] gv_previewRegionRevealer;
int[gv_venueMaximumCount + 1][gv_teamRoundMaximumCount + 1] gv_teamAtVenue;
int[gv_venueMaximumCount + 1][gv_roundMaximumCount + 1] gv_playerAtVenue;
int[gv_venueMaximumCount + 1][gv_roundMaximumCount + 1] gv_creepPlayerAtVenue;
int[gv_playerCount + 1] gv_playerAtBuildingRegion;
string[gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1][gv_unitMaximumCountPerPhalanx + 1] gv_unitType;
int[gv_playerMaximumIndex + 1] gv_phalanxIndex;
actor[gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1][gv_unitMaximumCountPerPhalanx + 1] gv_previewModel;
unit[gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1] gv_previewer;
region[gv_playerCount + 1][gv_phalanxMaximumCount + 1] gv_previewRegion;
revealer[gv_playerMaximumIndex + 1] gv_battlefieldRevealer;
region gv_battlefield;
timer gv_timer;
int gv_timerWindow;
int[gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1] gv_reserveUnitIndex;
int[gv_playerMaximumIndex + 1] gv_killScore;
int[gv_playerMaximumIndex + 1] gv_buildingScore;
int gv_scoreBoard;
int[gv_roundMaximumCount + 1] gv_roundGold;
bool[gv_roundMaximumCount + 1] gv_bonusRoundIsOn;
int[gv_teamRoundMaximumCount + 1] gv_teamRoundRandomized;
int[gv_venueGroupMaximumCount + 1][gv_teamRoundMaximumCount + 1] gv_venueGroupRandomized;
point[gv_venueMaximumCount + 1] gv_creepPoint;
string[gv_venueMaximumCount + 1][gv_roundMaximumCount + 1] gv_creepUnitType;
playergroup gv_aIGroup;
int[gv_teamMaximumCount + 1] gv_teamAlive;
int[gv_roundMaximumCount + 1] gv_teamCountAlive;
int[gv_venueMaximumCount + 1][gv_roundMaximumCount + 1] gv_playerAtFinalVenue;
int gv_round;
int gv_finalRoundCount;
bool gv_testPassed;
fixed gv_searchRadiusInFinalRound;
unit[gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1] gv_phalanx;
string[gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1] gv_phalanxBuff;
playergroup gv_uIPlayergroup;
unitfilter gv_workerFilter;
unitfilter gv_phalanxFilter;
unitfilter gv_portalFilter;
unitfilter gv_buildingFilter;
unitfilter gv_creepFilter;
unitfilter gv_unitFilter;
unitfilter gv_unitAndCreepFilter;
unitfilter gv_pathBlockerFilter;

void InitGlobals () {
    int init_i;

    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE5898DE7BC80[init_i] = "";
    }
    gv_adefDamageTaken = 0.5;
    gv_adefDeflectChance = 0.3;
    gv_adefGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= gv_teamMaximumCount; init_i += 1) {
        gv_teamGroup[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= gv_teamMaximumCount; init_i += 1) {
        gv_mirrorTeamGroup[init_i] = PlayerGroupEmpty();
    }
    gv_timer = TimerCreate();
    gv_timerWindow = c_timerWindowNone;
    gv_scoreBoard = c_boardNone;
    gv_aIGroup = PlayerGroupEmpty();
    for (init_i = 0; init_i <= gv_roundMaximumCount; init_i += 1) {
        gv_teamCountAlive[init_i] = 1;
    }
    gv_testPassed = true;
    gv_uIPlayergroup = PlayerGroupActive();
    gv_workerFilter = UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    gv_phalanxFilter = UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    gv_portalFilter = UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    gv_buildingFilter = UnitFilter(0, (1 << (c_targetFilterRadar - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    gv_creepFilter = UnitFilter(0, (1 << (c_targetFilterMapBoss - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    gv_unitFilter = UnitFilter(0, 0, (1 << c_targetFilterHover) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32)));
    gv_unitAndCreepFilter = UnitFilter(0, 0, (1 << c_targetFilterHover) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    gv_pathBlockerFilter = UnitFilter((1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
text gf_E69588E69E9CE58AA9E6898BE5B8AEE58AA9E69687E69CACE6A087E9A298 (text lp_e58E9FE6A087E9A298);
text gf_E69588E69E9CE58AA9E6898BE79BB8E585B3E58D95E4BD8DE782B9E4BFA1E681AF (unit lp_e58D95E4BD8D, point lp_e782B9, int lp_e698BEE7A4BAE69687E69CAC);
void gf_E69588E69E9CE58AA9E6898BE6B3A8E5868CE4BA8BE4BBB6 (int lp_player, string lp_effectLink);
int gf_PlayerGetTeam (int lp_player);
void gf_ModInizialization (bool lp_debug);
void gf_RoundStartLoop (bool lp_debug);
void gf_RoundStart (int lp_round, bool lp_bonusRound, bool lp_debug);
void gf_TeamMemberSetAndTeamMemberCountSet ();
void gf_TeamRoundRandomize ();
void gf_VenueGroupRandomize ();
void gf_TeamAtVenueSet (bool lp_debug);
void gf_PlayerAtVenueSet (bool lp_debug);
void gf_PlayerCountTest ();
void gf_GameOverTestNotPassed ();
void gf_DebugEnable (bool lp_option);
void gf_KillScoreAndKillGoldAdd (int lp_player, string lp_unitType);
void gf_KillScoreUpdate ();
void gf_ScoreBoardRowColorUpdate (int lp_round);
void gf_ScoreBoardSetName (int lp_round, bool lp_bonusRound);
void gf_BuildingScoreUpdate ();
void gf_StartLocationCameraPan ();
void gf_VenueCameraPan (int lp_round);
bool gf_PlayerIsAlive (int lp_player, int lp_round);
void gf_CountUnitEnable (bool lp_option);
void gf_CountUnit (int lp_team, bool lp_wait);
void gf_GameOver (int lp_team);
void gf_DisplayMessageAll (int lp_round);
void gf_PlayerAtFinalVenueSet (int lp_round);
void gf_ReserveUnitIndexResetAll ();
void gf_ReserveUnitCreationEnable (bool lp_option);
void gf_ReserveUnitCreation (unit lp_unit, int lp_player, int lp_phalanx);
void gf_SearchRadiusInFinalRoundSet (fixed lp_radius);
void gf_TimerSet (fixed lp_duration, bool lp_debug);
void gf_AIPhalanxAndPortalPositionAll (int lp_round);
void gf_AIPhalanxBuffSetAll (int lp_round);
void gf_AIPhalanxAndPortalPosition (int lp_player, region lp_region, string lp_unitType, string lp_userType, unitfilter lp_unitFilter, int lp_count);
void gf_AIBuildingPosition ();
void gf_UnitPositionAll ();
void gf_UnitOrPreviewModelPosition (unit lp_unit, bool lp_preview);
void gf_CreepPosition (int lp_round);
void gf_UnitCreate (int lp_player, point lp_point, string lp_unitType, unit lp_unit);
bool gf_BehaviorIsPhalanxBuff (string lp_behavior);
void gf_PhalanxCounterEnable (bool lp_reset, bool lp_option);
void gf_PhalanxBuffSet (unit lp_unit, bool lp_preview);
void gf_PreviewUpdateAll ();
void gf_PreviewUpdate (int lp_player, int lp_phalanx);
void gf_PreviewerRegionSet (region lp_region, int lp_index, int lp_phalanx);
void gf_PreviewerRemoveAll ();
void gf_PreviewerAtBuildingRegionPositionAll ();
void gf_PreviewEnable (bool lp_option);
void gf_PreviewModelCreate (int lp_player, point lp_point, string lp_unitType, unit lp_unit);
void gf_UnitTypeSetAll ();
void gf_UnitTypeReset (int lp_player, int lp_phalanx);
void gf_UnitTypeSet (int lp_buildingRegion, int lp_phalanx);
void gf_CreepUnitTypeSetAll ();
int gf_PointInBuildingRegionGetBuildingRegion (point lp_point);
int gf_PointInBuildingRegionGetPhalanx (point lp_point);
void gf_PhalanxPlaceholderPositionAll ();
void gf_BuildingRegionSet (region lp_region, int lp_index, int lp_phalanx);
void gf_PlayerAtBuildingRegionSet ();
void gf_BuildingRegionRevealerEnable (bool lp_option, bool lp_debug);
bool gf_RegionContainsPointWithOffset (point lp_point, region lp_region, int lp_x, int lp_y);
void gf_CreepPointSet (point lp_point, int lp_index);
void gf_VenueInitialSet (region lp_region, int lp_index, fixed lp_facing);
void gf_BonusVenueSet (region lp_region, int lp_index, fixed lp_facing);
void gf_VenueRevealerEnable (int lp_round, bool lp_option);
void gf_BonusVenueReplace ();
void gf_VenueInitialReplace ();
void gf_PathingBlockerRemove (region lp_region);
void gf_ValidRegionFillHidden ();
void gf_BattlefieldSetAll (region lp_region);
void gf_BattlefieldRevealerEnable (bool lp_option);
void gf_BattlefieldReset ();
bool gf_IsFinalRound (int lp_round);
void gf_RoundGoldSet (int lp_round, int lp_value);
void gf_BonusRoundSet (bool lp_on, int lp_round);
void gf_GoldAdd (int lp_round);
void gf_UserPlayerSet (int lp_index, int lp_player);
void gf_TeamAlianceSet (int lp_option);
void gf_MirrorPlayerSet (int lp_index, int lp_player);
int gf_UnitTypeGetKillGold (string lp_unitType);
fixed gf_PointGetVenueFacing (point lp_point);
int gf_UnitTypeGetPhalanxCapacity (string lp_unitType);
string gf_RaceGetPhalanxType (string lp_race);
int gf_MirrorPlayerGetUserPlayer (int lp_player);
int gf_UserPlayerGetMirrorPlayer (int lp_player);
int gf_IndexGetUserPlayer (int lp_index);
region gf_IndexGetVenue (int lp_index);
string gf_AttributeGetRace (string lp_attribute);
void gf_ReserveUnitCreation2 (int lp_player, int lp_phalanx);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_MapInizialization;
trigger gt_PlayerInizialization;
trigger gt_VenueInizialization;
trigger gt_BuidingRegionInizialization;
trigger gt_PreviewerPointInizialization;
trigger gt_RoundInitialization;
trigger gt_E69588E69E9CE58AA9E6898BE8A7A6E58F91E599A8E58AA8E4BD9C;
trigger gt_E69588E69E9CE58AA9E6898BE5889DE5A78BE58C96;
trigger gt_Pillage;
trigger gt_AdefDefendInitRegister;
trigger gt_AdefDefendDamaged;
trigger gt_GameAttributeInizialization;
trigger gt_AllianceInizialization;
trigger gt_ScoreBoardInizialization;
trigger gt_TimerInizialization;
trigger gt_PlayerInizialization2;
trigger gt_DebugControlPressed;
trigger gt_DebugKeyPressed;
trigger gt_DebugUnitRemove;
trigger gt_UnitDied;
trigger gt_CountUnit;
trigger gt_CountUnitControl;
trigger gt_CreateReserveUnit;
trigger gt_IssueOrderPeriodic;
trigger gt_PhalanxCreated;
trigger gt_PortalCreated;
trigger gt_PhalanxBuffChange;
trigger gt_BuildingCreated;
trigger gt_UnitAbilityMorph;
trigger gt_PlayerLeft;
trigger gt_UnitChangeOwner2;
trigger gt_UnitDied2;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
text gf_E69588E69E9CE58AA9E6898BE5B8AEE58AA9E69687E69CACE6A087E9A298 (text lp_e58E9FE6A087E9A298) {
    // Variable Declarations
    text lv_e6A087E9A298E5898DE7BC80;
    text lv_e6A087E9A298E5908EE7BC80;

    // Variable Initialization
    lv_e6A087E9A298E5898DE7BC80 = StringToText("<c val=\"FF7F00\">\xE8\xA7\xA6\xE5\x8F\x91\xE6\x95\x88\xE6\x9E\x9C\xEF\xBC\x9A</c>");
    lv_e6A087E9A298E5908EE7BC80 = StringToText(("  <c val=\"7F00FF\">\xE8\xA7\xA6\xE5\x8F\x91\xE6\x97\xB6\xE9\x97\xB4\xEF\xBC\x9A" + FixedToString(GameGetMissionTime(), 4) + "</c>"));

    // Implementation
    return (lv_e6A087E9A298E5898DE7BC80 + lp_e58E9FE6A087E9A298 + lv_e6A087E9A298E5908EE7BC80);
}

text gf_E69588E69E9CE58AA9E6898BE79BB8E585B3E58D95E4BD8DE782B9E4BFA1E681AF (unit lp_e58D95E4BD8D, point lp_e782B9, int lp_e698BEE7A4BAE69687E69CAC) {
    // Variable Declarations
    string lv_e58D95E4BD8DE7B1BBE59E8B;
    string lv_e59BBEE78987E8B7AFE5BE84;
    string lv_e5AD97E7ACA6E4B8B2E782B9;
    string lv_e58685E5AEB9;

    // Variable Initialization
    lv_e59BBEE78987E8B7AFE5BE84 = "";
    lv_e5AD97E7ACA6E4B8B2E782B9 = "";
    lv_e58685E5AEB9 = "";

    // Implementation
    if ((lp_e58D95E4BD8D != null)) {
        lv_e58D95E4BD8DE7B1BBE59E8B = UnitGetType(lp_e58D95E4BD8D);
        lv_e59BBEE78987E8B7AFE5BE84 = CatalogFieldValueGet(c_gameCatalogActor, (lv_e58D95E4BD8DE7B1BBE59E8B), "UnitIcon", 0);
    }
    else {
        lv_e58D95E4BD8DE7B1BBE59E8B = "\xE6\x97\xA0";
        lv_e59BBEE78987E8B7AFE5BE84 = "Assets\\Textures\\btn-border-transportslot-filled.dds";
    }
    lv_e5AD97E7ACA6E4B8B2E782B9 = ("( " + FixedToString(PointGetX(lp_e782B9),6) + " , " + FixedToString(PointGetY(lp_e782B9),6) + " )");;
    lv_e58685E5AEB9 = ("<IMG path=\"" + lv_e59BBEE78987E8B7AFE5BE84 + "\" height=\"28\" width=\"28\"/>");
    lv_e58685E5AEB9 = (lv_e58685E5AEB9 + "  <c val=\"FF0000\">" + gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE5898DE7BC80[(lp_e698BEE7A4BAE69687E69CAC)] + gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE58D95E4BD8D + "</c>" + (lv_e58D95E4BD8DE7B1BBE59E8B) + "     ");
    lv_e58685E5AEB9 = (lv_e58685E5AEB9 + "<c val=\"FF0000\">" + gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE5898DE7BC80[(lp_e698BEE7A4BAE69687E69CAC)] + gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE782B9 + "</c>" + lv_e5AD97E7ACA6E4B8B2E782B9);
    return StringToText(lv_e58685E5AEB9);
}

void gf_E69588E69E9CE58AA9E6898BE6B3A8E5868CE4BA8BE4BBB6 (int lp_player, string lp_effectLink) {
    // Implementation
    TriggerAddEventPlayerEffectUsed(gt_E69588E69E9CE58AA9E6898BE8A7A6E58F91E599A8E58AA8E4BD9C,lp_player,lp_effectLink);
}

int gf_PlayerGetTeam (int lp_player) {
    int autoD5856304_ae;
    int autoD5856304_ai;

    // Variable Declarations
    int lv_team;
    int lv_teamReturn;

    // Variable Initialization

    // Implementation
    autoD5856304_ae = gv_teamCount;
    autoD5856304_ai = 1;
    lv_team = 1;
    for ( ; ( (autoD5856304_ai >= 0 && lv_team <= autoD5856304_ae) || (autoD5856304_ai <= 0 && lv_team >= autoD5856304_ae) ) ; lv_team += autoD5856304_ai ) {
        if ((PlayerGroupHasPlayer(gv_teamGroup[lv_team], lp_player) == true)) {
            lv_teamReturn = lv_team;
            break;
        }

    }
    return lv_teamReturn;
}

void gf_ModInizialization (bool lp_debug) {
    bool auto279315C0_val;

    // Implementation
    TriggerEnable(libGAw3_gt_ChangeOwerFromCreep, false);
    TriggerEnable(libGAw3_gt_ChangeOwerToCreep, false);
    TriggerEnable(libGAwX_gt_AdefDefendInitRegister, false);
    UISetResourceTradingAllowed(c_resourceTypeMinerals, false);
    UISetResourceTradingAllowed(c_resourceTypeVespene, false);
    UISetResourceTradingAllowed(c_resourceTypeTerrazine, false);
    UISetResourceTradingAllowed(c_resourceTypeCustom, false);
    TriggerExecute(gt_GameAttributeInizialization, true, false);
    if ((lp_debug == true)) {
        gf_DebugEnable(true);
    }
    else {
        gf_DebugEnable(false);
    }
    gf_TeamMemberSetAndTeamMemberCountSet();
    gf_PlayerCountTest();
    auto279315C0_val = gv_testPassed;
    if (auto279315C0_val == false) {
        gf_GameOverTestNotPassed();
    }
    else if (auto279315C0_val == true) {
        TriggerExecute(gt_AllianceInizialization, true, false);
        gf_PlayerAtVenueSet(lp_debug);
        TriggerExecute(gt_ScoreBoardInizialization, true, false);
        TriggerExecute(gt_TimerInizialization, true, false);
        TriggerExecute(gt_PlayerInizialization2, true, false);
        gf_PlayerAtBuildingRegionSet();
        gf_PhalanxPlaceholderPositionAll();
        gf_CreepUnitTypeSetAll();
        gf_ValidRegionFillHidden();
    }
    else {
    }
}

void gf_RoundStartLoop (bool lp_debug) {
    int auto32EFCEF4_ae;
    int auto32EFCEF4_ai;

    // Variable Declarations
    int lv_round;

    // Variable Initialization

    // Implementation
    if ((gv_testPassed == true)) {
        auto32EFCEF4_ae = gv_roundCount;
        auto32EFCEF4_ai = 1;
        lv_round = 1;
        for ( ; ( (auto32EFCEF4_ai >= 0 && lv_round <= auto32EFCEF4_ae) || (auto32EFCEF4_ai <= 0 && lv_round >= auto32EFCEF4_ae) ) ; lv_round += auto32EFCEF4_ai ) {
            if ((lp_debug == true)) {
                lv_round = 1;
            }

            gf_VenueInitialReplace();
            gf_RoundStart(lv_round, false, lp_debug);
            if ((gv_bonusRoundIsOn[lv_round] == true)) {
                gf_BonusVenueReplace();
                gf_RoundStart(lv_round, true, lp_debug);
            }

        }
    }

}

void gf_RoundStart (int lp_round, bool lp_bonusRound, bool lp_debug) {
    // Implementation
    gv_round = lp_round;
    gf_BattlefieldReset();
    gf_BattlefieldRevealerEnable(false);
    gf_ScoreBoardSetName(lp_round, lp_bonusRound);
    if ((lp_round > (gv_roundCount-gv_finalRoundCount+1))) {
        gf_PlayerAtFinalVenueSet(lp_round);
    }
    else {
        gf_GoldAdd(lp_round);
        gf_BuildingRegionRevealerEnable(true, lp_debug);
        gf_PreviewEnable(true);
        gf_StartLocationCameraPan();
        gf_TimerSet((30.0+lp_round*5), lp_debug);
        gf_AIBuildingPosition();
        gf_BuildingRegionRevealerEnable(false, lp_debug);
        gf_PreviewEnable(false);
        gf_UnitTypeSetAll();
    }
    gf_VenueRevealerEnable(lp_round, true);
    gf_PhalanxCounterEnable(true, true);
    gf_VenueCameraPan(lp_round);
    gf_TimerSet((30.0), lp_debug);
    gf_AIPhalanxAndPortalPositionAll(lp_round);
    gf_PhalanxCounterEnable(false, false);
    gf_AIPhalanxBuffSetAll(lp_round);
    gf_VenueRevealerEnable(lp_round, false);
    gf_UnitPositionAll();
    if ((lp_bonusRound == true)) {
        gf_CreepPosition(lp_round);
    }

    gf_BattlefieldRevealerEnable(true);
    gf_PreviewerAtBuildingRegionPositionAll();
    gf_PreviewUpdateAll();
    gf_ReserveUnitCreationEnable(true);
    gf_CountUnitEnable(true);
    TriggerWaitForTrigger(gt_CountUnitControl, false);
    gf_ReserveUnitCreationEnable(false);
    Wait(2.0, c_timeGame);
}

void gf_TeamMemberSetAndTeamMemberCountSet () {
    int auto2AAAA1C8_ae;
    int auto2AAAA1C8_ai;
    int auto9346543B_ae;
    int auto9346543B_ai;
    int autoE856A992_ae;
    int autoE856A992_ai;
    int auto97362155_ae;
    int auto97362155_ai;
    int autoB585401E_ae;
    int autoB585401E_ai;
    int auto64218DD1_ae;
    int auto64218DD1_ai;

    // Variable Declarations
    int lv_player;
    int lv_team;
    int lv_teamMember;
    bool lv_virtualTeam;

    // Variable Initialization

    // Implementation
    auto2AAAA1C8_ae = gv_teamCount;
    auto2AAAA1C8_ai = 1;
    lv_team = 1;
    for ( ; ( (auto2AAAA1C8_ai >= 0 && lv_team <= auto2AAAA1C8_ae) || (auto2AAAA1C8_ai <= 0 && lv_team >= auto2AAAA1C8_ae) ) ; lv_team += auto2AAAA1C8_ai ) {
        auto9346543B_ae = gv_teamMemberCount;
        auto9346543B_ai = 1;
        lv_teamMember = 1;
        for ( ; ( (auto9346543B_ai >= 0 && lv_teamMember <= auto9346543B_ae) || (auto9346543B_ai <= 0 && lv_teamMember >= auto9346543B_ae) ) ; lv_teamMember += auto9346543B_ai ) {
            if ((PlayerGroupPlayer(GameAttributePlayersForTeam(lv_team), lv_teamMember) == -1)) {
                lv_virtualTeam = true;
            }

        }
    }
    lv_team = 0;
    lv_teamMember = 0;
    if ((lv_virtualTeam == false)) {
        autoE856A992_ae = gv_teamCount;
        autoE856A992_ai = 1;
        lv_team = 1;
        for ( ; ( (autoE856A992_ai >= 0 && lv_team <= autoE856A992_ae) || (autoE856A992_ai <= 0 && lv_team >= autoE856A992_ae) ) ; lv_team += autoE856A992_ai ) {
            auto97362155_ae = gv_teamMemberCount;
            auto97362155_ai = 1;
            lv_teamMember = 1;
            for ( ; ( (auto97362155_ai >= 0 && lv_teamMember <= auto97362155_ae) || (auto97362155_ai <= 0 && lv_teamMember >= auto97362155_ae) ) ; lv_teamMember += auto97362155_ai ) {
                if ((PlayerGroupCount(GameAttributePlayersForTeam(lv_team)) == gv_teamMemberCount)) {
                    PlayerGroupAdd(gv_teamGroup[lv_team], PlayerGroupPlayer(GameAttributePlayersForTeam(lv_team), lv_teamMember));
                    PlayerGroupAdd(gv_mirrorTeamGroup[lv_team], gf_UserPlayerGetMirrorPlayer(PlayerGroupPlayer(GameAttributePlayersForTeam(lv_team), lv_teamMember)));
                }
                else {
                    gv_testPassed = false;
                }
            }
        }
    }
    else {
        autoB585401E_ae = gv_teamCount;
        autoB585401E_ai = 1;
        lv_team = 1;
        for ( ; ( (autoB585401E_ai >= 0 && lv_team <= autoB585401E_ae) || (autoB585401E_ai <= 0 && lv_team >= autoB585401E_ae) ) ; lv_team += autoB585401E_ai ) {
            auto64218DD1_ae = gv_teamMemberCount;
            auto64218DD1_ai = 1;
            lv_teamMember = 1;
            for ( ; ( (auto64218DD1_ai >= 0 && lv_teamMember <= auto64218DD1_ae) || (auto64218DD1_ai <= 0 && lv_teamMember >= auto64218DD1_ae) ) ; lv_teamMember += auto64218DD1_ai ) {
                lv_player += 1;
                PlayerGroupAdd(gv_teamGroup[lv_team], gf_IndexGetUserPlayer(lv_player));
                PlayerGroupAdd(gv_mirrorTeamGroup[lv_team], gf_UserPlayerGetMirrorPlayer(gf_IndexGetUserPlayer(lv_player)));
            }
        }
    }
}

void gf_TeamRoundRandomize () {
    int auto84978057_ae;
    int auto84978057_ai;
    int auto2ADAE77A_ae;
    int auto2ADAE77A_ai;
    int auto0CBF9E3E_ae;
    int auto0CBF9E3E_ai;

    // Variable Declarations
    int lv_r1;
    int lv_r2;
    bool lv_repeated;
    int[gv_teamRoundMaximumCount + 1] lv_roundRandomized;

    // Variable Initialization

    // Implementation
    auto84978057_ae = gv_teamRoundCount;
    auto84978057_ai = 1;
    lv_r1 = 1;
    for ( ; ( (auto84978057_ai >= 0 && lv_r1 <= auto84978057_ae) || (auto84978057_ai <= 0 && lv_r1 >= auto84978057_ae) ) ; lv_r1 += auto84978057_ai ) {
        gv_teamRoundRandomized[lv_r1] = 0;
    }
    auto2ADAE77A_ae = gv_teamRoundCount;
    auto2ADAE77A_ai = 1;
    lv_r1 = 1;
    for ( ; ( (auto2ADAE77A_ai >= 0 && lv_r1 <= auto2ADAE77A_ae) || (auto2ADAE77A_ai <= 0 && lv_r1 >= auto2ADAE77A_ae) ) ; lv_r1 += auto2ADAE77A_ai ) {
        while (true) {
            lv_roundRandomized[lv_r1] = RandomInt(1, gv_teamRoundCount);
            lv_repeated = false;
            auto0CBF9E3E_ae = gv_teamRoundCount;
            auto0CBF9E3E_ai = 1;
            lv_r2 = 1;
            for ( ; ( (auto0CBF9E3E_ai >= 0 && lv_r2 <= auto0CBF9E3E_ae) || (auto0CBF9E3E_ai <= 0 && lv_r2 >= auto0CBF9E3E_ae) ) ; lv_r2 += auto0CBF9E3E_ai ) {
                if ((lv_roundRandomized[lv_r1] == gv_teamRoundRandomized[lv_r2])) {
                    lv_repeated = true;
                }

            }
            if ((lv_repeated == false)) {
                gv_teamRoundRandomized[lv_r1] = lv_roundRandomized[lv_r1];
                break;
            }

        }
    }
}

void gf_VenueGroupRandomize () {
    int auto9810B740_ae;
    int auto9810B740_ai;
    int autoAA69F9EA_ae;
    int autoAA69F9EA_ai;
    int auto37BDAEA3_ae;
    int auto37BDAEA3_ai;
    int autoEDCAD8F6_ae;
    int autoEDCAD8F6_ai;
    int autoB31440CC_ae;
    int autoB31440CC_ai;

    // Variable Declarations
    int lv_g1;
    int lv_g2;
    bool lv_repeated;
    int[gv_venueGroupMaximumCount + 1] lv_venueGroupRandomized;
    int lv_round;

    // Variable Initialization

    // Implementation
    auto9810B740_ae = gv_teamRoundCount;
    auto9810B740_ai = 1;
    lv_round = 1;
    for ( ; ( (auto9810B740_ai >= 0 && lv_round <= auto9810B740_ae) || (auto9810B740_ai <= 0 && lv_round >= auto9810B740_ae) ) ; lv_round += auto9810B740_ai ) {
        autoAA69F9EA_ae = (gv_teamCount/2);
        autoAA69F9EA_ai = 1;
        lv_g1 = 1;
        for ( ; ( (autoAA69F9EA_ai >= 0 && lv_g1 <= autoAA69F9EA_ae) || (autoAA69F9EA_ai <= 0 && lv_g1 >= autoAA69F9EA_ae) ) ; lv_g1 += autoAA69F9EA_ai ) {
            gv_venueGroupRandomized[lv_g1][lv_round] = 0;
        }
    }
    auto37BDAEA3_ae = gv_teamRoundCount;
    auto37BDAEA3_ai = 1;
    lv_round = 1;
    for ( ; ( (auto37BDAEA3_ai >= 0 && lv_round <= auto37BDAEA3_ae) || (auto37BDAEA3_ai <= 0 && lv_round >= auto37BDAEA3_ae) ) ; lv_round += auto37BDAEA3_ai ) {
        autoEDCAD8F6_ae = (gv_teamCount/2);
        autoEDCAD8F6_ai = 1;
        lv_g1 = 1;
        for ( ; ( (autoEDCAD8F6_ai >= 0 && lv_g1 <= autoEDCAD8F6_ae) || (autoEDCAD8F6_ai <= 0 && lv_g1 >= autoEDCAD8F6_ae) ) ; lv_g1 += autoEDCAD8F6_ai ) {
            while (true) {
                lv_venueGroupRandomized[lv_g1] = RandomInt(1, (gv_teamCount/2));
                lv_repeated = false;
                autoB31440CC_ae = gv_venueGroupMaximumCount;
                autoB31440CC_ai = 1;
                lv_g2 = 1;
                for ( ; ( (autoB31440CC_ai >= 0 && lv_g2 <= autoB31440CC_ae) || (autoB31440CC_ai <= 0 && lv_g2 >= autoB31440CC_ae) ) ; lv_g2 += autoB31440CC_ai ) {
                    if ((lv_venueGroupRandomized[lv_g1] == gv_venueGroupRandomized[lv_g2][lv_round])) {
                        lv_repeated = true;
                    }

                }
                if ((lv_repeated == false)) {
                    gv_venueGroupRandomized[lv_g1][lv_round] = lv_venueGroupRandomized[lv_g1];
                    break;
                }

            }
        }
    }
}

void gf_TeamAtVenueSet (bool lp_debug) {
    int auto1C8E1019_ae;
    int auto1C8E1019_ai;
    int autoAEFC50E8_ae;
    int autoAEFC50E8_ai;
    int auto28EB09BE_ae;
    int auto28EB09BE_ai;
    int auto8900F5B9_ae;
    int auto8900F5B9_ai;

    // Variable Declarations
    int lv_team;
    int lv_teamMember;
    int lv_round;
    int lv_venueGroup;
    int lv_cycle;
    int[gv_venueMaximumCount + 1] lv_teamCompetitor;

    // Variable Initialization
    lv_cycle = 1;

    // Implementation
    gf_TeamRoundRandomize();
    gf_VenueGroupRandomize();
    auto1C8E1019_ae = gv_teamRoundCount;
    auto1C8E1019_ai = 1;
    lv_round = 1;
    for ( ; ( (auto1C8E1019_ai >= 0 && lv_round <= auto1C8E1019_ae) || (auto1C8E1019_ai <= 0 && lv_round >= auto1C8E1019_ae) ) ; lv_round += auto1C8E1019_ai ) {
        autoAEFC50E8_ae = (gv_teamCount/2);
        autoAEFC50E8_ai = 1;
        lv_team = 1;
        for ( ; ( (autoAEFC50E8_ai >= 0 && lv_team <= autoAEFC50E8_ae) || (autoAEFC50E8_ai <= 0 && lv_team >= autoAEFC50E8_ae) ) ; lv_team += autoAEFC50E8_ai ) {
            if ((lv_team == 1)) {
                lv_teamCompetitor[lv_team] = 1;
            }
            else {
                if (lv_cycle >= gv_teamCount) {
                    lv_cycle = 2;
                }
                else {
                    lv_cycle = lv_cycle + 1;
                }
                lv_teamCompetitor[lv_team] = lv_cycle;
            }
        }
        auto28EB09BE_ae = (gv_teamCount/2+1);
        auto28EB09BE_ai = -1;
        lv_team = gv_teamCount;
        for ( ; ( (auto28EB09BE_ai >= 0 && lv_team <= auto28EB09BE_ae) || (auto28EB09BE_ai <= 0 && lv_team >= auto28EB09BE_ae) ) ; lv_team += auto28EB09BE_ai ) {
            if (lv_cycle >= gv_teamCount) {
                lv_cycle = 2;
            }
            else {
                lv_cycle = lv_cycle + 1;
            }
            lv_teamCompetitor[lv_team] = lv_cycle;
        }
        lv_venueGroup = 0;
        auto8900F5B9_ae = gv_teamCount;
        auto8900F5B9_ai = 1;
        lv_team = 1;
        for ( ; ( (auto8900F5B9_ai >= 0 && lv_team <= auto8900F5B9_ae) || (auto8900F5B9_ai <= 0 && lv_team >= auto8900F5B9_ae) ) ; lv_team += auto8900F5B9_ai ) {
            if ((ModI(lv_team, 2) == 1)) {
                lv_venueGroup += 1;
                if ((lp_debug == false)) {
                    gv_teamAtVenue[lv_team][gv_teamRoundRandomized[lv_round]] = lv_teamCompetitor[gv_venueGroupRandomized[lv_venueGroup][lv_round]];
                }
                else {
                    gv_teamAtVenue[lv_team][lv_round] = lv_teamCompetitor[lv_venueGroup];
                }
            }
            else {
                if ((lp_debug == false)) {
                    gv_teamAtVenue[lv_team][gv_teamRoundRandomized[lv_round]] = lv_teamCompetitor[(gv_venueGroupRandomized[lv_venueGroup][lv_round]+gv_teamCount/2)];
                }
                else {
                    gv_teamAtVenue[lv_team][lv_round] = lv_teamCompetitor[(lv_venueGroup+gv_teamCount/2)];
                }
            }
        }
        lv_cycle -= 1;
    }
}

void gf_PlayerAtVenueSet (bool lp_debug) {
    int autoFF18FBB3_ae;
    int autoFF18FBB3_ai;
    int auto9575A7EF_ae;
    int auto9575A7EF_ai;
    int autoEE410BE0_ae;
    int autoEE410BE0_ai;
    int auto07166D7A_ae;
    int auto07166D7A_ai;

    // Variable Declarations
    int lv_creepTeam;
    int lv_team;
    int lv_teamMember;
    int lv_round;
    int lv_teamRound;
    int lv_venue;

    // Variable Initialization

    // Implementation
    lv_creepTeam = RandomInt(1, (gv_teamCount-1));
    autoFF18FBB3_ae = gv_roundCount;
    autoFF18FBB3_ai = 1;
    lv_round = 1;
    for ( ; ( (autoFF18FBB3_ai >= 0 && lv_round <= autoFF18FBB3_ae) || (autoFF18FBB3_ai <= 0 && lv_round >= autoFF18FBB3_ae) ) ; lv_round += autoFF18FBB3_ai ) {
        if (lv_teamRound >= gv_teamRoundCount) {
            lv_teamRound = 1;
        }
        else {
            lv_teamRound = lv_teamRound + 1;
        }
        if ((lv_teamRound == 1)) {
            gf_TeamAtVenueSet(lp_debug);
        }

        auto9575A7EF_ae = gv_teamCount;
        auto9575A7EF_ai = 1;
        lv_team = 1;
        for ( ; ( (auto9575A7EF_ai >= 0 && lv_team <= auto9575A7EF_ae) || (auto9575A7EF_ai <= 0 && lv_team >= auto9575A7EF_ae) ) ; lv_team += auto9575A7EF_ai ) {
            if (lv_creepTeam >= gv_teamCount) {
                lv_creepTeam = 1;
            }
            else {
                lv_creepTeam = lv_creepTeam + 1;
            }
            autoEE410BE0_ae = gv_teamMemberCount;
            autoEE410BE0_ai = 1;
            lv_teamMember = 1;
            for ( ; ( (autoEE410BE0_ai >= 0 && lv_teamMember <= autoEE410BE0_ae) || (autoEE410BE0_ai <= 0 && lv_teamMember >= autoEE410BE0_ae) ) ; lv_teamMember += autoEE410BE0_ai ) {
                if (lv_venue >= gv_venueMaximumCount) {
                    lv_venue = 1;
                }
                else {
                    lv_venue = lv_venue + 1;
                }
                gv_playerAtVenue[lv_venue][lv_round] = PlayerGroupPlayer(gv_teamGroup[gv_teamAtVenue[lv_team][lv_teamRound]], lv_teamMember);
                gv_creepPlayerAtVenue[lv_venue][lv_round] = PlayerGroupPlayer(gv_teamGroup[gv_teamAtVenue[lv_creepTeam][lv_teamRound]], lv_teamMember);
            }
        }
    }
    auto07166D7A_ae = gv_roundCount;
    auto07166D7A_ai = 1;
    lv_round = 1;
    for ( ; ( (auto07166D7A_ai >= 0 && lv_round <= auto07166D7A_ae) || (auto07166D7A_ai <= 0 && lv_round >= auto07166D7A_ae) ) ; lv_round += auto07166D7A_ai ) {
        if ((gv_bonusRoundIsOn[lv_round] == true)) {
        }

    }
}

void gf_PlayerCountTest () {
    int autoA148D118_ae;
    int autoA148D118_ai;

    // Variable Declarations
    int lv_player;
    int lv_playerCount;

    // Variable Initialization

    // Implementation
    autoA148D118_ae = gv_playerCount;
    autoA148D118_ai = 1;
    lv_player = 1;
    for ( ; ( (autoA148D118_ai >= 0 && lv_player <= autoA148D118_ae) || (autoA148D118_ai <= 0 && lv_player >= autoA148D118_ae) ) ; lv_player += autoA148D118_ai ) {
        if (((PlayerType(gf_IndexGetUserPlayer(lv_player)) == c_playerTypeUser) || (PlayerType(gf_IndexGetUserPlayer(lv_player)) == c_playerTypeComputer))) {
            lv_playerCount += 1;
        }

    }
    if ((lv_playerCount != gv_playerCount)) {
        gv_testPassed = false;
    }

}

void gf_GameOverTestNotPassed () {
    int autoD14004E8_ae;
    int autoD14004E8_ai;

    // Variable Declarations
    int lv_player;
    int lv_time;

    // Variable Initialization
    lv_time = 10;

    // Implementation
    TextExpressionSetToken("Param/Expression/DD24D0D9", "A", IntToText(gv_playerCount));
    TextExpressionSetToken("Param/Expression/DD24D0D9", "B", IntToText(gv_teamMemberCount));
    TextExpressionSetToken("Param/Expression/DD24D0D9", "C", IntToText(lv_time));
    UIDisplayMessage(gv_uIPlayergroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/DD24D0D9"));
    Wait(lv_time, c_timeGame);
    autoD14004E8_ae = gv_playerCount;
    autoD14004E8_ai = 1;
    lv_player = 1;
    for ( ; ( (autoD14004E8_ai >= 0 && lv_player <= autoD14004E8_ae) || (autoD14004E8_ai <= 0 && lv_player >= autoD14004E8_ae) ) ; lv_player += autoD14004E8_ai ) {
        GameOver(gf_IndexGetUserPlayer(lv_player), c_gameOverTie, true, true);
    }
}

void gf_DebugEnable (bool lp_option) {
    // Variable Declarations
    int lv_player;
    int lv_team;

    // Variable Initialization

    // Implementation
    TriggerEnable(gt_DebugControlPressed, lp_option);
    TriggerEnable(gt_DebugKeyPressed, lp_option);
    TriggerEnable(gt_DebugUnitRemove, lp_option);
}

void gf_KillScoreAndKillGoldAdd (int lp_player, string lp_unitType) {
    // Implementation
    PlayerModifyPropertyInt(lp_player, c_playerPropTerrazine, c_playerPropOperAdd, gf_UnitTypeGetKillGold(lp_unitType));
    gv_killScore[lp_player] += gf_UnitTypeGetKillGold(lp_unitType);
    gf_KillScoreUpdate();
}

void gf_KillScoreUpdate () {
    int auto6CADA265_ae;
    int auto6CADA265_ai;
    int autoA0CDB29D_ae;
    int autoA0CDB29D_ai;

    // Variable Declarations
    int lv_maximumScore;
    int lv_row;
    int lv_column;
    color lv_color;

    // Variable Initialization
    lv_column = 3;
    lv_color = Color(0,0,0);

    // Implementation
    auto6CADA265_ae = gv_playerCount;
    auto6CADA265_ai = 1;
    lv_row = 1;
    for ( ; ( (auto6CADA265_ai >= 0 && lv_row <= auto6CADA265_ae) || (auto6CADA265_ai <= 0 && lv_row >= auto6CADA265_ae) ) ; lv_row += auto6CADA265_ai ) {
        if ((gv_killScore[gf_IndexGetUserPlayer(lv_row)] >= lv_maximumScore)) {
            lv_maximumScore = gv_killScore[gf_IndexGetUserPlayer(lv_row)];
        }

    }
    autoA0CDB29D_ae = gv_playerCount;
    autoA0CDB29D_ai = 1;
    lv_row = 1;
    for ( ; ( (autoA0CDB29D_ai >= 0 && lv_row <= autoA0CDB29D_ae) || (autoA0CDB29D_ai <= 0 && lv_row >= autoA0CDB29D_ae) ) ; lv_row += autoA0CDB29D_ai ) {
        BoardItemSetText(gv_scoreBoard, lv_column, lv_row, IntToText(gv_killScore[gf_IndexGetUserPlayer(lv_row)]));
        BoardItemSetProgressValue(gv_scoreBoard, lv_column, lv_row, gv_killScore[gf_IndexGetUserPlayer(lv_row)]);
        BoardItemSetProgressRange(gv_scoreBoard, lv_column, lv_row, 0.0, lv_maximumScore);
    }
}

void gf_ScoreBoardRowColorUpdate (int lp_round) {
    int autoBE313DB5_ae;
    int autoBE313DB5_ai;

    // Variable Declarations
    int lv_row;
    color lv_color;

    // Variable Initialization
    lv_color = Color(0,0,0);

    // Implementation
    autoBE313DB5_ae = gv_playerCount;
    autoBE313DB5_ai = 1;
    lv_row = 1;
    for ( ; ( (autoBE313DB5_ai >= 0 && lv_row <= autoBE313DB5_ae) || (autoBE313DB5_ai <= 0 && lv_row >= autoBE313DB5_ae) ) ; lv_row += autoBE313DB5_ai ) {
        if ((gf_PlayerIsAlive(gf_IndexGetUserPlayer(lv_row), lp_round) == true)) {
            lv_color = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gf_IndexGetUserPlayer(lv_row), false));
        }
        else {
            lv_color = Color(0,0,0);
        }
        BoardItemSetProgressColor(gv_scoreBoard, 2, lv_row, lv_color, 1);
        BoardItemSetProgressColor(gv_scoreBoard, 3, lv_row, lv_color, 1);
    }
}

void gf_ScoreBoardSetName (int lp_round, bool lp_bonusRound) {
    // Variable Declarations
    text lv_text;

    // Variable Initialization

    // Implementation
    if ((lp_bonusRound == false)) {
        if ((gf_IsFinalRound(lp_round) == false)) {
            TextExpressionSetToken("Param/Expression/0B166C7E", "A", IntToText(lp_round));
            lv_text = TextExpressionAssemble("Param/Expression/0B166C7E");
        }
        else {
            lv_text = TextExpressionAssemble("Param/Expression/B0C1E07C");
        }
    }
    else {
        TextExpressionSetToken("Param/Expression/FC361899", "A", IntToText(lp_round));
        lv_text = TextExpressionAssemble("Param/Expression/FC361899");
    }
    BoardSetName(gv_scoreBoard, lv_text, Color(100.00, 100.00, 100.00));
}

void gf_BuildingScoreUpdate () {
    int auto8F4D4E20_ae;
    int auto8F4D4E20_ai;
    int autoB3462373_ae;
    int autoB3462373_ai;

    // Variable Declarations
    int lv_maximumScore;
    int lv_row;
    int lv_column;

    // Variable Initialization
    lv_column = 2;

    // Implementation
    auto8F4D4E20_ae = gv_playerCount;
    auto8F4D4E20_ai = 1;
    lv_row = 1;
    for ( ; ( (auto8F4D4E20_ai >= 0 && lv_row <= auto8F4D4E20_ae) || (auto8F4D4E20_ai <= 0 && lv_row >= auto8F4D4E20_ae) ) ; lv_row += auto8F4D4E20_ai ) {
        if ((gv_buildingScore[gf_IndexGetUserPlayer(lv_row)] >= lv_maximumScore)) {
            lv_maximumScore = gv_buildingScore[gf_IndexGetUserPlayer(lv_row)];
        }

    }
    autoB3462373_ae = gv_playerCount;
    autoB3462373_ai = 1;
    lv_row = 1;
    for ( ; ( (autoB3462373_ai >= 0 && lv_row <= autoB3462373_ae) || (autoB3462373_ai <= 0 && lv_row >= autoB3462373_ae) ) ; lv_row += autoB3462373_ai ) {
        BoardItemSetText(gv_scoreBoard, lv_column, lv_row, IntToText(gv_buildingScore[gf_IndexGetUserPlayer(lv_row)]));
        BoardItemSetProgressValue(gv_scoreBoard, lv_column, lv_row, gv_buildingScore[gf_IndexGetUserPlayer(lv_row)]);
        BoardItemSetProgressRange(gv_scoreBoard, lv_column, lv_row, 0.0, lv_maximumScore);
    }
}

void gf_StartLocationCameraPan () {
    int auto2999E700_ae;
    int auto2999E700_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    auto2999E700_ae = gv_playerCount;
    auto2999E700_ai = 1;
    lv_player = 1;
    for ( ; ( (auto2999E700_ai >= 0 && lv_player <= auto2999E700_ae) || (auto2999E700_ai <= 0 && lv_player >= auto2999E700_ae) ) ; lv_player += auto2999E700_ai ) {
        CameraPan(gf_IndexGetUserPlayer(lv_player), PlayerStartLocation(gf_IndexGetUserPlayer(lv_player)), 0.0, -1, 10.0, false);
    }
}

void gf_VenueCameraPan (int lp_round) {
    int auto98A27C29_ae;
    int auto98A27C29_ai;

    // Variable Declarations
    int lv_venue;

    // Variable Initialization

    // Implementation
    auto98A27C29_ae = gv_playerCount;
    auto98A27C29_ai = 1;
    lv_venue = 1;
    for ( ; ( (auto98A27C29_ai >= 0 && lv_venue <= auto98A27C29_ae) || (auto98A27C29_ai <= 0 && lv_venue >= auto98A27C29_ae) ) ; lv_venue += auto98A27C29_ai ) {
        if ((gv_playerAtVenue[lv_venue][lp_round] != -1)) {
            CameraPan(gv_playerAtVenue[lv_venue][lp_round], RegionGetCenter(gv_venue[lv_venue]), 0.0, -1, 10.0, false);
        }

    }
}

bool gf_PlayerIsAlive (int lp_player, int lp_round) {
    int auto22D5D1C2_ae;
    int auto22D5D1C2_ai;

    // Variable Declarations
    int lv_team;
    bool lv_playerIsAlive;

    // Variable Initialization

    // Implementation
    auto22D5D1C2_ae = gv_teamCountAlive[lp_round];
    auto22D5D1C2_ai = 1;
    lv_team = 1;
    for ( ; ( (auto22D5D1C2_ai >= 0 && lv_team <= auto22D5D1C2_ae) || (auto22D5D1C2_ai <= 0 && lv_team >= auto22D5D1C2_ae) ) ; lv_team += auto22D5D1C2_ai ) {
        if ((PlayerGroupHasPlayer(gv_teamGroup[gv_teamAlive[lv_team]], lp_player) == true)) {
            lv_playerIsAlive = true;
            break;
        }

    }
    return lv_playerIsAlive;
}

void gf_CountUnitEnable (bool lp_option) {
    // Implementation
    TriggerEnable(gt_CountUnit, lp_option);
}

void gf_CountUnit (int lp_team, bool lp_wait) {
    int auto33B6CB7C_ae;
    int auto33B6CB7C_ai;
    unitgroup auto9C373270_g;
    int auto9C373270_u;

    // Variable Declarations
    int lv_team;
    int lv_teamMember;
    int lv_player;
    unit lv_unit;
    string lv_effect;

    // Variable Initialization
    lv_effect = "CountUnitRemove";

    // Implementation
    auto33B6CB7C_ae = gv_teamMemberCount;
    auto33B6CB7C_ai = 1;
    lv_teamMember = 1;
    for ( ; ( (auto33B6CB7C_ai >= 0 && lv_teamMember <= auto33B6CB7C_ae) || (auto33B6CB7C_ai <= 0 && lv_teamMember >= auto33B6CB7C_ae) ) ; lv_teamMember += auto33B6CB7C_ai ) {
        lv_player = PlayerGroupPlayer(gv_teamGroup[lp_team], lv_teamMember);
        while ((UnitGroupCount(UnitGroup(null, gf_UserPlayerGetMirrorPlayer(lv_player), gv_battlefield, gv_unitFilter, 0), c_unitCountAlive) > 0)) {
            auto9C373270_g = UnitGroup(null, gf_UserPlayerGetMirrorPlayer(lv_player), gv_battlefield, gv_unitFilter, 0);
            auto9C373270_u = 1;
            for ( ; auto9C373270_u <= UnitGroupCount(auto9C373270_g, c_unitCountAll) ; auto9C373270_u += BoolToInt(lv_unit == UnitGroupUnit(auto9C373270_g, auto9C373270_u)) ) {
                lv_unit = UnitGroupUnit(auto9C373270_g, auto9C373270_u);
                PlayerCreateEffectUnit(gf_UserPlayerGetMirrorPlayer(lv_player), lv_effect, lv_unit);
                if ((lp_wait == true)) {
                    Wait(gv_minimumPeriod, c_timeGame);
                }

            }
        }
    }
}

void gf_GameOver (int lp_team) {
    int autoC0BD2082_ae;
    int autoC0BD2082_ai;
    int auto12268A78_ae;
    int auto12268A78_ai;
    int autoA4151996_ae;
    int autoA4151996_ai;

    // Variable Declarations
    int lv_teamMember;
    int lv_team;
    int lv_time;

    // Variable Initialization
    lv_time = 10;

    // Implementation
    TriggerEnable(gt_PlayerLeft, false);
    TextExpressionSetToken("Param/Expression/988C1F86", "A", IntToText(lv_time));
    UIDisplayMessage(gv_uIPlayergroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/988C1F86"));
    Wait(lv_time, c_timeGame);
    autoC0BD2082_ae = gv_teamMemberCount;
    autoC0BD2082_ai = 1;
    lv_teamMember = 1;
    for ( ; ( (autoC0BD2082_ai >= 0 && lv_teamMember <= autoC0BD2082_ae) || (autoC0BD2082_ai <= 0 && lv_teamMember >= autoC0BD2082_ae) ) ; lv_teamMember += autoC0BD2082_ai ) {
        GameOver(PlayerGroupPlayer(gv_teamGroup[lp_team], lv_teamMember), c_gameOverVictory, true, true);
    }
    auto12268A78_ae = gv_teamCount;
    auto12268A78_ai = 1;
    lv_team = 1;
    for ( ; ( (auto12268A78_ai >= 0 && lv_team <= auto12268A78_ae) || (auto12268A78_ai <= 0 && lv_team >= auto12268A78_ae) ) ; lv_team += auto12268A78_ai ) {
        if ((lv_team != lp_team)) {
            autoA4151996_ae = gv_teamMemberCount;
            autoA4151996_ai = 1;
            lv_teamMember = 1;
            for ( ; ( (autoA4151996_ai >= 0 && lv_teamMember <= autoA4151996_ae) || (autoA4151996_ai <= 0 && lv_teamMember >= autoA4151996_ae) ) ; lv_teamMember += autoA4151996_ai ) {
                GameOver(PlayerGroupPlayer(gv_teamGroup[lv_team], lv_teamMember), c_gameOverDefeat, true, true);
            }
        }

    }
}

void gf_DisplayMessageAll (int lp_round) {
    int auto2C65B6E8_ae;
    int auto2C65B6E8_ai;

    // Variable Declarations
    int lv_player;
    text lv_text;

    // Variable Initialization

    // Implementation
    if ((gv_round == gv_roundCount)) {
        lv_text = StringExternal("Param/Value/FAF81038");
    }
    else {
        lv_text = StringExternal("Param/Value/7FC5FD9B");
    }
    auto2C65B6E8_ae = gv_playerCount;
    auto2C65B6E8_ai = 1;
    lv_player = 1;
    for ( ; ( (auto2C65B6E8_ai >= 0 && lv_player <= auto2C65B6E8_ae) || (auto2C65B6E8_ai <= 0 && lv_player >= auto2C65B6E8_ae) ) ; lv_player += auto2C65B6E8_ai ) {
        if ((gf_PlayerIsAlive(gf_IndexGetUserPlayer(lv_player), lp_round) == true)) {
            TextExpressionSetToken("Param/Expression/66F863EC", "A", TextWithColor(PlayerName(gf_IndexGetUserPlayer(lv_player)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gf_IndexGetUserPlayer(lv_player), false))));
            TextExpressionSetToken("Param/Expression/66F863EC", "B", lv_text);
            UIDisplayMessage(gv_uIPlayergroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/66F863EC"));
        }

    }
}

void gf_PlayerAtFinalVenueSet (int lp_round) {
    int auto67A6C3EC_ae;
    int auto67A6C3EC_ai;
    int auto10C6C590_ae;
    int auto10C6C590_ai;
    int autoEF832F53_ae;
    int autoEF832F53_ai;
    int autoA8ED057D_ae;
    int autoA8ED057D_ai;

    // Variable Declarations
    int lv_venue;
    int lv_team;
    int lv_teamMember;

    // Variable Initialization

    // Implementation
    auto67A6C3EC_ae = gv_venueMaximumCount;
    auto67A6C3EC_ai = 1;
    lv_venue = 1;
    for ( ; ( (auto67A6C3EC_ai >= 0 && lv_venue <= auto67A6C3EC_ae) || (auto67A6C3EC_ai <= 0 && lv_venue >= auto67A6C3EC_ae) ) ; lv_venue += auto67A6C3EC_ai ) {
        gv_playerAtFinalVenue[lv_venue][lp_round] = -1;
    }
    lv_venue = 0;
    auto10C6C590_ae = gv_teamCountAlive[(lp_round-1)];
    auto10C6C590_ai = 1;
    lv_team = 1;
    for ( ; ( (auto10C6C590_ai >= 0 && lv_team <= auto10C6C590_ae) || (auto10C6C590_ai <= 0 && lv_team >= auto10C6C590_ae) ) ; lv_team += auto10C6C590_ai ) {
        autoEF832F53_ae = gv_teamMemberCount;
        autoEF832F53_ai = 1;
        lv_teamMember = 1;
        for ( ; ( (autoEF832F53_ai >= 0 && lv_teamMember <= autoEF832F53_ae) || (autoEF832F53_ai <= 0 && lv_teamMember >= autoEF832F53_ae) ) ; lv_teamMember += autoEF832F53_ai ) {
            lv_venue += 1;
            gv_playerAtFinalVenue[lv_venue][lp_round] = PlayerGroupPlayer(gv_teamGroup[gv_teamAlive[lv_team]], lv_teamMember);
        }
    }
    autoA8ED057D_ae = gv_venueMaximumCount;
    autoA8ED057D_ai = 1;
    lv_venue = 1;
    for ( ; ( (autoA8ED057D_ai >= 0 && lv_venue <= autoA8ED057D_ae) || (autoA8ED057D_ai <= 0 && lv_venue >= autoA8ED057D_ae) ) ; lv_venue += autoA8ED057D_ai ) {
        gv_playerAtVenue[lv_venue][lp_round] = gv_playerAtFinalVenue[lv_venue][lp_round];
    }
}

void gf_ReserveUnitIndexResetAll () {
    int auto5A6B82AB_ae;
    int auto5A6B82AB_ai;
    int autoF43EFDA8_ae;
    int autoF43EFDA8_ai;

    // Variable Declarations
    int lv_player;
    int lv_phalanx;

    // Variable Initialization

    // Implementation
    auto5A6B82AB_ae = gv_playerCount;
    auto5A6B82AB_ai = 1;
    lv_player = 1;
    for ( ; ( (auto5A6B82AB_ai >= 0 && lv_player <= auto5A6B82AB_ae) || (auto5A6B82AB_ai <= 0 && lv_player >= auto5A6B82AB_ae) ) ; lv_player += auto5A6B82AB_ai ) {
        autoF43EFDA8_ae = gv_phalanxMaximumCount;
        autoF43EFDA8_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (autoF43EFDA8_ai >= 0 && lv_phalanx <= autoF43EFDA8_ae) || (autoF43EFDA8_ai <= 0 && lv_phalanx >= autoF43EFDA8_ae) ) ; lv_phalanx += autoF43EFDA8_ai ) {
            gv_reserveUnitIndex[gf_IndexGetUserPlayer(lv_player)][lv_phalanx] = 0;
        }
    }
}

void gf_ReserveUnitCreationEnable (bool lp_option) {
    int auto882584ED_ae;
    int auto882584ED_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    auto882584ED_ae = gv_playerCount;
    auto882584ED_ai = 1;
    lv_player = 1;
    for ( ; ( (auto882584ED_ai >= 0 && lv_player <= auto882584ED_ae) || (auto882584ED_ai <= 0 && lv_player >= auto882584ED_ae) ) ; lv_player += auto882584ED_ai ) {
        if ((lp_option == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(gf_IndexGetUserPlayer(lv_player), "CountUnit", 1);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(gf_IndexGetUserPlayer(lv_player), "BuildArmy", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gf_IndexGetUserPlayer(lv_player), "BuildPhalanx", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gf_IndexGetUserPlayer(lv_player), "BuildPortal", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gf_IndexGetUserPlayer(lv_player), "CountUnit", 0);
        }
    }
    TriggerEnable(gt_CreateReserveUnit, lp_option);
    TriggerEnable(gt_UnitDied, lp_option);
    TriggerEnable(gt_IssueOrderPeriodic, lp_option);
}

void gf_ReserveUnitCreation (unit lp_unit, int lp_player, int lp_phalanx) {
    // Variable Declarations
    string lv_unitType;
    int lv_index;

    // Variable Initialization

    // Implementation
    lv_index = (gf_UnitTypeGetPhalanxCapacity(UnitGetType(lp_unit))+gv_reserveUnitIndex[lp_player][lp_phalanx]);
    if ((lv_index < gv_unitMaximumCountPerPhalanx)) {
        gv_reserveUnitIndex[lp_player][lp_phalanx] += 1;
        lv_unitType = gv_unitType[lp_player][lp_phalanx][lv_index];
        if ((lv_unitType != null)) {
            gf_UnitCreate(gf_UserPlayerGetMirrorPlayer(lp_player), UnitGetPosition(lp_unit), lv_unitType, lp_unit);
        }

    }

}

void gf_SearchRadiusInFinalRoundSet (fixed lp_radius) {
    // Implementation
    gv_searchRadiusInFinalRound = lp_radius;
}

void gf_TimerSet (fixed lp_duration, bool lp_debug) {
    // Implementation
    if ((lp_debug == true)) {
        TriggerWaitForTrigger(gt_DebugControlPressed, false);
    }
    else {
        TimerStart(gv_timer, lp_duration, false, c_timeGame);
        TimerWindowShow(gv_timerWindow, gv_uIPlayergroup, true);
        libNtve_gf_WaitForTimer(gv_timer, 0.0, false);
        TimerWindowShow(gv_timerWindow, gv_uIPlayergroup, false);
    }
    Wait(gv_minimumPeriod, c_timeGame);
}

void gf_AIPhalanxAndPortalPositionAll (int lp_round) {
    int auto9A3FFAE0_ae;
    int auto9A3FFAE0_ai;

    // Variable Declarations
    int lv_venue;
    string lv_unitType;

    // Variable Initialization

    // Implementation
    auto9A3FFAE0_ae = gv_venueMaximumCount;
    auto9A3FFAE0_ai = 1;
    lv_venue = 1;
    for ( ; ( (auto9A3FFAE0_ai >= 0 && lv_venue <= auto9A3FFAE0_ae) || (auto9A3FFAE0_ai <= 0 && lv_venue >= auto9A3FFAE0_ae) ) ; lv_venue += auto9A3FFAE0_ai ) {
        if ((gv_playerAtVenue[lv_venue][lp_round] != -1)) {
            lv_unitType = gf_RaceGetPhalanxType(PlayerRace(gv_playerAtVenue[lv_venue][lp_round]));
            gf_AIPhalanxAndPortalPosition(gv_playerAtVenue[lv_venue][lp_round], gv_venue[lv_venue], lv_unitType, gv_phalanxUserType, gv_phalanxFilter, gv_phalanxMaximumCount);
            if ((PlayerGroupHasPlayer(gv_aIGroup, gv_playerAtVenue[lv_venue][lp_round]) == true)) {
                lv_unitType = "hprt";
                gf_AIPhalanxAndPortalPosition(gv_playerAtVenue[lv_venue][lp_round], gv_venue[lv_venue], lv_unitType, gv_portalUserType, gv_portalFilter, gv_portalMaximumCount);
            }

        }

    }
}

void gf_AIPhalanxBuffSetAll (int lp_round) {
    int autoD032C73F_ae;
    int autoD032C73F_ai;
    int auto2A7AFE0D_ae;
    int auto2A7AFE0D_ai;

    // Variable Declarations
    int lv_venue;
    int lv_phalanx;

    // Variable Initialization

    // Implementation
    autoD032C73F_ae = gv_venueMaximumCount;
    autoD032C73F_ai = 1;
    lv_venue = 1;
    for ( ; ( (autoD032C73F_ai >= 0 && lv_venue <= autoD032C73F_ae) || (autoD032C73F_ai <= 0 && lv_venue >= autoD032C73F_ae) ) ; lv_venue += autoD032C73F_ai ) {
        if ((gv_playerAtVenue[lv_venue][lp_round] != -1)) {
            auto2A7AFE0D_ae = gv_phalanxMaximumCount;
            auto2A7AFE0D_ai = 1;
            lv_phalanx = 1;
            for ( ; ( (auto2A7AFE0D_ai >= 0 && lv_phalanx <= auto2A7AFE0D_ae) || (auto2A7AFE0D_ai <= 0 && lv_phalanx >= auto2A7AFE0D_ae) ) ; lv_phalanx += auto2A7AFE0D_ai ) {
                gf_PhalanxBuffSet(gv_phalanx[gv_playerAtVenue[lv_venue][lp_round]][lv_phalanx], false);
            }
        }

    }
}

void gf_AIPhalanxAndPortalPosition (int lp_player, region lp_region, string lp_unitType, string lp_userType, unitfilter lp_unitFilter, int lp_count) {
    // Variable Declarations
    string lv_unitTypeID;
    int lv_columnCount;
    int lv_rowCount;
    point lv_point;

    // Variable Initialization
    lv_unitTypeID = "";

    // Implementation
    lv_unitTypeID = (lp_unitType);
    lv_columnCount = UserDataGetInt(lp_userType, (lv_unitTypeID), "Row", 1);
    lv_rowCount = UserDataGetInt(lp_userType, (lv_unitTypeID), "Column", 1);
    while ((UnitGroupCount(UnitGroup(null, lp_player, lp_region, lp_unitFilter, 0), c_unitCountAlive) < lp_count)) {
        lv_point = RegionRandomPoint(lp_region);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unitType, 0, lp_player, lv_point);
        if ((UnitGetType(UnitLastCreated()) != null) && (gf_RegionContainsPointWithOffset(UnitGetPosition(UnitLastCreated()), lp_region, lv_rowCount, lv_columnCount) == true)) {
        }
        else {
            UnitRemove(UnitLastCreated());
        }
    }
}

void gf_AIBuildingPosition () {
    int auto25D7163F_ae;
    int auto25D7163F_ai;
    int autoFFBDBC7C_ae;
    int autoFFBDBC7C_ai;
    unitgroup auto3A7025C8_g;
    int auto3A7025C8_u;
    int autoE73DAF8C_ae;
    int autoE73DAF8C_ai;
    unitgroup auto11FFCEE5_g;
    int auto11FFCEE5_u;
    string auto0077EE91_val;

    // Variable Declarations
    int lv_buildingRegion;
    unit lv_worker;
    unit lv_unit;
    string lv_buildAbility;
    abilcmd lv_abilityCommand;
    point lv_point;
    order lv_order;
    int lv_phalanx;
    int lv_index;
    string lv_ability;

    // Variable Initialization

    // Implementation
    auto25D7163F_ae = gv_playerCount;
    auto25D7163F_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (auto25D7163F_ai >= 0 && lv_buildingRegion <= auto25D7163F_ae) || (auto25D7163F_ai <= 0 && lv_buildingRegion >= auto25D7163F_ae) ) ; lv_buildingRegion += auto25D7163F_ai ) {
        if ((PlayerGroupHasPlayer(gv_aIGroup, gv_playerAtBuildingRegion[lv_buildingRegion]) == true)) {
            autoFFBDBC7C_ae = gv_phalanxMaximumCount;
            autoFFBDBC7C_ai = 1;
            lv_phalanx = 1;
            for ( ; ( (autoFFBDBC7C_ai >= 0 && lv_phalanx <= autoFFBDBC7C_ae) || (autoFFBDBC7C_ai <= 0 && lv_phalanx >= autoFFBDBC7C_ae) ) ; lv_phalanx += autoFFBDBC7C_ai ) {
                auto3A7025C8_g = UnitGroup(null, gv_playerAtBuildingRegion[lv_buildingRegion], gv_buildingRegion[lv_buildingRegion][lv_phalanx], gv_buildingFilter, 0);
                auto3A7025C8_u = 1;
                for ( ; auto3A7025C8_u <= UnitGroupCount(auto3A7025C8_g, c_unitCountAll) ; auto3A7025C8_u += BoolToInt(lv_unit == UnitGroupUnit(auto3A7025C8_g, auto3A7025C8_u)) ) {
                    lv_unit = UnitGroupUnit(auto3A7025C8_g, auto3A7025C8_u);
                    autoE73DAF8C_ae = UnitAbilityCount(lv_unit);
                    autoE73DAF8C_ai = 1;
                    lv_index = 1;
                    for ( ; ( (autoE73DAF8C_ai >= 0 && lv_index <= autoE73DAF8C_ae) || (autoE73DAF8C_ai <= 0 && lv_index >= autoE73DAF8C_ae) ) ; lv_index += autoE73DAF8C_ai ) {
                        lv_ability = UnitAbilityGet(lv_unit, lv_index);
                        if ((AbilityClass(lv_ability) == c_classIdCAbilMorph)) {
                            UnitIssueOrder(lv_unit, Order(AbilityCommand(lv_ability, 0)), c_orderQueueReplace);
                        }

                    }
                }
            }
            auto11FFCEE5_g = UnitGroup(null, gv_playerAtBuildingRegion[lv_buildingRegion], null, gv_workerFilter, 0);
            auto11FFCEE5_u = 1;
            for ( ; auto11FFCEE5_u <= UnitGroupCount(auto11FFCEE5_g, c_unitCountAll) ; auto11FFCEE5_u += BoolToInt(lv_worker == UnitGroupUnit(auto11FFCEE5_g, auto11FFCEE5_u)) ) {
                lv_worker = UnitGroupUnit(auto11FFCEE5_g, auto11FFCEE5_u);
                auto0077EE91_val = UnitGetType(lv_worker);
                if (auto0077EE91_val == "hpea") {
                    lv_buildAbility = "AHbuArmy";
                }
                else if (auto0077EE91_val == "ewsp") {
                    lv_buildAbility = "AEbuArmy";
                }
                else if (auto0077EE91_val == "opeo") {
                    lv_buildAbility = "AObuArmy";
                }
                else if (auto0077EE91_val == "uaco") {
                    lv_buildAbility = "AUbuArmy";
                }
                else {
                }
                while ((PlayerGetPropertyInt(gv_playerAtBuildingRegion[lv_buildingRegion], c_playerPropTerrazine) >= 150)) {
                    lv_abilityCommand = AbilityCommand(lv_buildAbility, RandomInt(0, 29));
                    lv_point = RegionRandomPoint(gv_buildingRegion[lv_buildingRegion][RandomInt(1, gv_phalanxMaximumCount)]);
                    lv_order = OrderTargetingPoint(lv_abilityCommand, lv_point);
                    UnitIssueOrder(lv_worker, lv_order, c_orderQueueReplace);
                }
            }
        }

    }
}

void gf_UnitPositionAll () {
    int auto6E9FF0BC_ae;
    int auto6E9FF0BC_ai;
    unitgroup autoBFFAB839_g;
    int autoBFFAB839_u;

    // Variable Declarations
    unit lv_unit;
    int lv_venue;
    int lv_phalanx;

    // Variable Initialization

    // Implementation
    auto6E9FF0BC_ae = gv_venueMaximumCount;
    auto6E9FF0BC_ai = 1;
    lv_venue = 1;
    for ( ; ( (auto6E9FF0BC_ai >= 0 && lv_venue <= auto6E9FF0BC_ae) || (auto6E9FF0BC_ai <= 0 && lv_venue >= auto6E9FF0BC_ae) ) ; lv_venue += auto6E9FF0BC_ai ) {
        autoBFFAB839_g = UnitGroup(null, c_playerAny, gv_venue[lv_venue], gv_phalanxFilter, 0);
        autoBFFAB839_u = 1;
        for ( ; autoBFFAB839_u <= UnitGroupCount(autoBFFAB839_g, c_unitCountAll) ; autoBFFAB839_u += BoolToInt(lv_unit == UnitGroupUnit(autoBFFAB839_g, autoBFFAB839_u)) ) {
            lv_unit = UnitGroupUnit(autoBFFAB839_g, autoBFFAB839_u);
            lv_phalanx = FixedToInt(UnitGetCustomValue(lv_unit, gv_customValuePhalanx));
            gf_UnitOrPreviewModelPosition(lv_unit, false);
        }
    }
}

void gf_UnitOrPreviewModelPosition (unit lp_unit, bool lp_preview) {
    int auto7E0D0491_ae;
    int auto7E0D0491_ai;
    int autoA02CCFF8_ae;
    int autoA02CCFF8_ai;

    // Variable Declarations
    int lv_player;
    string lv_unitTypeID;
    point lv_position;
    int lv_phalanx;
    int lv_playerUnitCreated;
    int lv_column;
    int lv_columnCount;
    int lv_row;
    int lv_rowCount;
    point lv_pointInitial;
    point lv_pointColumn;
    point lv_pointRow;
    int lv_index;
    string lv_unitType;

    // Variable Initialization
    lv_player = UnitGetOwner(lp_unit);
    lv_unitTypeID = (UnitGetType(lp_unit));
    lv_position = UnitGetPosition(lp_unit);
    lv_phalanx = FixedToInt(UnitGetCustomValue(lp_unit, gv_customValuePhalanx));

    // Implementation
    if ((lp_preview == true)) {
        lv_playerUnitCreated = lv_player;
    }
    else {
        lv_playerUnitCreated = gf_UserPlayerGetMirrorPlayer(lv_player);
    }
    lv_columnCount = UserDataGetInt(gv_phalanxUserType, (lv_unitTypeID), "Row", 1);
    lv_rowCount = UserDataGetInt(gv_phalanxUserType, (lv_unitTypeID), "Column", 1);
    lv_pointInitial = PointWithOffsetPolar(PointWithOffsetPolar(lv_position, (lv_rowCount/2-0.5), PointGetFacing(lv_position)), (lv_columnCount/2-0.5), (UnitGetFacing(lp_unit)+90));
    lv_index = 0;
    auto7E0D0491_ae = lv_columnCount;
    auto7E0D0491_ai = 1;
    lv_column = 1;
    for ( ; ( (auto7E0D0491_ai >= 0 && lv_column <= auto7E0D0491_ae) || (auto7E0D0491_ai <= 0 && lv_column >= auto7E0D0491_ae) ) ; lv_column += auto7E0D0491_ai ) {
        lv_pointColumn = PointWithOffsetPolar(lv_pointInitial, (lv_column-1), (UnitGetFacing(lp_unit)+180));
        autoA02CCFF8_ae = lv_rowCount;
        autoA02CCFF8_ai = 1;
        lv_row = 1;
        for ( ; ( (autoA02CCFF8_ai >= 0 && lv_row <= autoA02CCFF8_ae) || (autoA02CCFF8_ai <= 0 && lv_row >= autoA02CCFF8_ae) ) ; lv_row += autoA02CCFF8_ai ) {
            lv_pointRow = PointWithOffsetPolar(lv_pointColumn, (lv_row-1), (UnitGetFacing(lp_unit)-90));
            lv_index += 1;
            lv_unitType = gv_unitType[lv_player][lv_phalanx][lv_index];
            if ((lv_unitType != null)) {
                if ((lp_preview == true)) {
                    gf_PreviewModelCreate(lv_playerUnitCreated, lv_pointRow, lv_unitType, lp_unit);
                    gv_previewModel[lv_player][lv_phalanx][lv_index] = libNtve_gf_ActorLastCreated();
                }
                else {
                    gf_UnitCreate(lv_playerUnitCreated, lv_pointRow, lv_unitType, lp_unit);
                }
            }

        }
    }
}

void gf_CreepPosition (int lp_round) {
    int auto9567BB10_ae;
    int auto9567BB10_ai;

    // Variable Declarations
    int lv_venue;

    // Variable Initialization

    // Implementation
    auto9567BB10_ae = gv_venueMaximumCount;
    auto9567BB10_ai = 1;
    lv_venue = 1;
    for ( ; ( (auto9567BB10_ai >= 0 && lv_venue <= auto9567BB10_ae) || (auto9567BB10_ai <= 0 && lv_venue >= auto9567BB10_ae) ) ; lv_venue += auto9567BB10_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, gv_creepUnitType[lv_venue][lp_round], 0, gv_creepPlayerAtVenue[lv_venue][lp_round], gv_creepPoint[lv_venue]);
        UnitSetFacing(UnitLastCreated(), PointGetFacing(gv_creepPoint[lv_venue]), 0.0);
    }
}

void gf_UnitCreate (int lp_player, point lp_point, string lp_unitType, unit lp_unit) {
    int auto5E840BDA_ae;
    int auto5E840BDA_ai;

    // Variable Declarations
    int lv_index;
    string lv_behavior;

    // Variable Initialization

    // Implementation
    UnitCreate(1, lp_unitType, c_unitCreateIgnorePlacement, lp_player, lp_point, UnitGetFacing(lp_unit));
    UnitSetFacing(UnitLastCreated(), UnitGetFacing(lp_unit), 0.0);
    UnitSetCustomValue(UnitLastCreated(), gv_customValuePhalanx, UnitGetCustomValue(lp_unit, gv_customValuePhalanx));
    UnitBehaviorAdd(UnitLastCreated(), "PhalanxMarker", lp_unit, 1);
    auto5E840BDA_ae = UnitBehaviorCountAll(lp_unit);
    auto5E840BDA_ai = 1;
    lv_index = 1;
    for ( ; ( (auto5E840BDA_ai >= 0 && lv_index <= auto5E840BDA_ae) || (auto5E840BDA_ai <= 0 && lv_index >= auto5E840BDA_ae) ) ; lv_index += auto5E840BDA_ai ) {
        lv_behavior = UnitBehaviorGet(lp_unit, lv_index);
        if (((lv_behavior) == (((lv_behavior))))) {
            UnitBehaviorAdd(UnitLastCreated(), UserDataGetGameLink(gv_phalanxBuffUserType, ((lv_behavior)), "Behavior", 1), UnitLastCreated(), 1);
        }

    }
}

bool gf_BehaviorIsPhalanxBuff (string lp_behavior) {
    int auto0E1D3E20_ae;
    int auto0E1D3E20_ai;

    // Variable Declarations
    int lv_index;
    bool lv_isPhalanxBuff;

    // Variable Initialization

    // Implementation
    auto0E1D3E20_ae = UserDataInstanceCount(gv_phalanxBuffUserType);
    auto0E1D3E20_ai = 1;
    lv_index = 1;
    for ( ; ( (auto0E1D3E20_ai >= 0 && lv_index <= auto0E1D3E20_ae) || (auto0E1D3E20_ai <= 0 && lv_index >= auto0E1D3E20_ae) ) ; lv_index += auto0E1D3E20_ai ) {
        if (((lp_behavior) == (UserDataInstance(gv_phalanxBuffUserType, lv_index)))) {
            lv_isPhalanxBuff = true;
            break;
        }

    }
    return lv_isPhalanxBuff;
}

void gf_PhalanxCounterEnable (bool lp_reset, bool lp_option) {
    int autoEAE7D402_ae;
    int autoEAE7D402_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    if ((lp_option == true)) {
    }
    else {
        Wait(gv_minimumPeriod, c_timeGame);
    }
    if ((lp_reset == true)) {
        autoEAE7D402_ae = gv_playerCount;
        autoEAE7D402_ai = 1;
        lv_player = 1;
        for ( ; ( (autoEAE7D402_ai >= 0 && lv_player <= autoEAE7D402_ae) || (autoEAE7D402_ai <= 0 && lv_player >= autoEAE7D402_ae) ) ; lv_player += autoEAE7D402_ai ) {
            gv_phalanxIndex[gf_IndexGetUserPlayer(lv_player)] = 0;
        }
    }

    TriggerEnable(gt_PhalanxCreated, lp_option);
    TriggerEnable(gt_PortalCreated, lp_option);
}

void gf_PhalanxBuffSet (unit lp_unit, bool lp_preview) {
    // Variable Declarations
    int lv_phalanx;
    int lv_player;
    string lv_behavior;
    string lv_ability;

    // Variable Initialization
    lv_phalanx = FixedToInt(UnitGetCustomValue(lp_unit, gv_customValuePhalanx));
    lv_player = UnitGetOwner(lp_unit);

    // Implementation
    lv_behavior = gv_phalanxBuff[lv_player][lv_phalanx];
    if ((lp_preview == false)) {
        while ((lv_behavior == null)) {
            lv_behavior = ((UserDataInstance(gv_phalanxBuffUserType, RandomInt(1, UserDataInstanceCount(gv_phalanxBuffUserType)))));
        }
    }

    lv_ability = UserDataGetGameLink(gv_phalanxBuffUserType, ((lv_behavior)), "Ability", 1);
    UnitIssueOrder(lp_unit, Order(AbilityCommand(lv_ability, 0)), c_orderQueueReplace);
}

void gf_PreviewUpdateAll () {
    int autoEA579529_ae;
    int autoEA579529_ai;
    int auto2F39E4C9_ae;
    int auto2F39E4C9_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    string lv_unitType;

    // Variable Initialization

    // Implementation
    autoEA579529_ae = gv_playerCount;
    autoEA579529_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (autoEA579529_ai >= 0 && lv_buildingRegion <= autoEA579529_ae) || (autoEA579529_ai <= 0 && lv_buildingRegion >= autoEA579529_ae) ) ; lv_buildingRegion += autoEA579529_ai ) {
        auto2F39E4C9_ae = gv_phalanxMaximumCount;
        auto2F39E4C9_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto2F39E4C9_ai >= 0 && lv_phalanx <= auto2F39E4C9_ae) || (auto2F39E4C9_ai <= 0 && lv_phalanx >= auto2F39E4C9_ae) ) ; lv_phalanx += auto2F39E4C9_ai ) {
            gf_PreviewUpdate(gv_playerAtBuildingRegion[lv_buildingRegion], lv_phalanx);
        }
    }
}

void gf_PreviewUpdate (int lp_player, int lp_phalanx) {
    int autoEA136BF7_ae;
    int autoEA136BF7_ai;

    // Variable Declarations
    string lv_unitTypeID;
    point lv_position;
    int lv_phalanx;
    int lv_index;

    // Variable Initialization

    // Implementation
    autoEA136BF7_ae = gv_unitMaximumCountPerPhalanx;
    autoEA136BF7_ai = 1;
    lv_index = 1;
    for ( ; ( (autoEA136BF7_ai >= 0 && lv_index <= autoEA136BF7_ae) || (autoEA136BF7_ai <= 0 && lv_index >= autoEA136BF7_ae) ) ; lv_index += autoEA136BF7_ai ) {
        ActorSend(gv_previewModel[lp_player][lp_phalanx][lv_index], libNtve_gf_Destroy());
    }
    gf_UnitOrPreviewModelPosition(gv_previewer[lp_player][lp_phalanx], true);
}

void gf_PreviewerRegionSet (region lp_region, int lp_index, int lp_phalanx) {
    // Implementation
    gv_previewRegion[lp_index][lp_phalanx] = lp_region;
}

void gf_PreviewerRemoveAll () {
    int auto5C815038_ae;
    int auto5C815038_ai;
    int auto2CF5D106_ae;
    int auto2CF5D106_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    string lv_unitType;

    // Variable Initialization

    // Implementation
    auto5C815038_ae = gv_playerCount;
    auto5C815038_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (auto5C815038_ai >= 0 && lv_buildingRegion <= auto5C815038_ae) || (auto5C815038_ai <= 0 && lv_buildingRegion >= auto5C815038_ae) ) ; lv_buildingRegion += auto5C815038_ai ) {
        auto2CF5D106_ae = gv_phalanxMaximumCount;
        auto2CF5D106_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto2CF5D106_ai >= 0 && lv_phalanx <= auto2CF5D106_ae) || (auto2CF5D106_ai <= 0 && lv_phalanx >= auto2CF5D106_ae) ) ; lv_phalanx += auto2CF5D106_ai ) {
            UnitRemove(gv_previewer[gv_playerAtBuildingRegion[lv_buildingRegion]][lv_phalanx]);
        }
    }
}

void gf_PreviewerAtBuildingRegionPositionAll () {
    int auto0DC35C0B_ae;
    int auto0DC35C0B_ai;
    int auto0D213AC8_ae;
    int auto0D213AC8_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    string lv_unitType;

    // Variable Initialization

    // Implementation
    auto0DC35C0B_ae = gv_playerCount;
    auto0DC35C0B_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (auto0DC35C0B_ai >= 0 && lv_buildingRegion <= auto0DC35C0B_ae) || (auto0DC35C0B_ai <= 0 && lv_buildingRegion >= auto0DC35C0B_ae) ) ; lv_buildingRegion += auto0DC35C0B_ai ) {
        auto0D213AC8_ae = gv_phalanxMaximumCount;
        auto0D213AC8_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto0D213AC8_ai >= 0 && lv_phalanx <= auto0D213AC8_ae) || (auto0D213AC8_ai <= 0 && lv_phalanx >= auto0D213AC8_ae) ) ; lv_phalanx += auto0D213AC8_ai ) {
            lv_unitType = gf_RaceGetPhalanxType(PlayerRace(gv_playerAtBuildingRegion[lv_buildingRegion]));
            libNtve_gf_CreateUnitsAtPoint2(1, lv_unitType, c_unitCreateIgnorePlacement, gv_playerAtBuildingRegion[lv_buildingRegion], RegionGetCenter(gv_previewRegion[lv_buildingRegion][lv_phalanx]));
            UnitSetFacing(UnitLastCreated(), 90.0, 0.0);
            UnitSetCustomValue(UnitLastCreated(), gv_customValuePhalanx, lv_phalanx);
            gv_previewer[gv_playerAtBuildingRegion[lv_buildingRegion]][lv_phalanx] = UnitLastCreated();
            gf_PhalanxBuffSet(UnitLastCreated(), true);
        }
    }
}

void gf_PreviewEnable (bool lp_option) {
    // Implementation
    if ((lp_option == true)) {
        gf_PreviewerAtBuildingRegionPositionAll();
    }
    else {
        Wait(gv_minimumPeriod, c_timeGame);
        gf_PreviewerRemoveAll();
    }
    TriggerEnable(gt_BuildingCreated, lp_option);
    TriggerEnable(gt_UnitAbilityMorph, lp_option);
}

void gf_PreviewModelCreate (int lp_player, point lp_point, string lp_unitType, unit lp_unit) {
    // Implementation
    libNtve_gf_CreateModelAtPoint(((lp_unitType)), lp_point);
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing((UnitGetFacing(lp_unit)+90)));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false))));
}

void gf_UnitTypeSetAll () {
    int auto7D28C878_ae;
    int auto7D28C878_ai;
    int autoF1F93F33_ae;
    int autoF1F93F33_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;

    // Variable Initialization

    // Implementation
    auto7D28C878_ae = gv_playerCount;
    auto7D28C878_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (auto7D28C878_ai >= 0 && lv_buildingRegion <= auto7D28C878_ae) || (auto7D28C878_ai <= 0 && lv_buildingRegion >= auto7D28C878_ae) ) ; lv_buildingRegion += auto7D28C878_ai ) {
        gv_buildingScore[gv_playerAtBuildingRegion[lv_buildingRegion]] = 0;
        autoF1F93F33_ae = gv_phalanxMaximumCount;
        autoF1F93F33_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (autoF1F93F33_ai >= 0 && lv_phalanx <= autoF1F93F33_ae) || (autoF1F93F33_ai <= 0 && lv_phalanx >= autoF1F93F33_ae) ) ; lv_phalanx += autoF1F93F33_ai ) {
            gf_UnitTypeSet(lv_buildingRegion, lv_phalanx);
        }
    }
    gf_BuildingScoreUpdate();
}

void gf_UnitTypeReset (int lp_player, int lp_phalanx) {
    int autoA5752FBA_ae;
    int autoA5752FBA_ai;

    // Variable Declarations
    int lv_unit;

    // Variable Initialization

    // Implementation
    autoA5752FBA_ae = gv_unitMaximumCountPerPhalanx;
    autoA5752FBA_ai = 1;
    lv_unit = 1;
    for ( ; ( (autoA5752FBA_ai >= 0 && lv_unit <= autoA5752FBA_ae) || (autoA5752FBA_ai <= 0 && lv_unit >= autoA5752FBA_ae) ) ; lv_unit += autoA5752FBA_ai ) {
        gv_unitType[lp_player][lp_phalanx][lv_unit] = null;
    }
}

void gf_UnitTypeSet (int lp_buildingRegion, int lp_phalanx) {
    int autoFA13A366_ae;
    int autoFA13A366_ai;
    int auto4878DECE_ae;
    int auto4878DECE_ai;
    int auto905D87B8_ae;
    int auto905D87B8_ai;
    int autoEF386EA4_ae;
    int autoEF386EA4_ai;

    // Variable Declarations
    region lv_buildingRegion;
    point lv_pointInitial;
    point lv_point;
    int lv_unitIndex;
    string lv_unitTypeID;
    int lv_unit;
    int lv_index;
    string lv_unitType;
    int lv_column;
    int lv_row;
    region lv_region;

    // Variable Initialization
    lv_buildingRegion = gv_buildingRegion[lp_buildingRegion][lp_phalanx];
    lv_unitTypeID = "";

    // Implementation
    gf_UnitTypeReset(gv_playerAtBuildingRegion[lp_buildingRegion], lp_phalanx);
    lv_pointInitial = PointWithOffset(RegionGetCenter(lv_buildingRegion), (-libNtve_gf_WidthOfRegion(lv_buildingRegion)/2+0.5), (libNtve_gf_HeightOfRegion(lv_buildingRegion)/2-0.5));
    autoFA13A366_ae = FixedToInt(libNtve_gf_HeightOfRegion(lv_buildingRegion));
    autoFA13A366_ai = 1;
    lv_row = 1;
    for ( ; ( (autoFA13A366_ai >= 0 && lv_row <= autoFA13A366_ae) || (autoFA13A366_ai <= 0 && lv_row >= autoFA13A366_ae) ) ; lv_row += autoFA13A366_ai ) {
        auto4878DECE_ae = FixedToInt(libNtve_gf_WidthOfRegion(lv_buildingRegion));
        auto4878DECE_ai = 1;
        lv_column = 1;
        for ( ; ( (auto4878DECE_ai >= 0 && lv_column <= auto4878DECE_ae) || (auto4878DECE_ai <= 0 && lv_column >= auto4878DECE_ae) ) ; lv_column += auto4878DECE_ai ) {
            lv_point = PointWithOffset(lv_pointInitial, (lv_column-1), (-lv_row+1));
            lv_region = RegionRect((PointGetX(lv_point)-0.5), (PointGetY(lv_point)-0.5), (PointGetX(lv_point)+0.5), (PointGetY(lv_point)+0.5));
            UnitGroupLoopBegin(UnitGroup(null, c_playerAny, lv_region, gv_buildingFilter, 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                lv_unitTypeID = (UnitGetType(UnitGroupLoopCurrent()));
                auto905D87B8_ae = UserDataFieldValueCount(gv_unitTypeUserType, "UnitType");
                auto905D87B8_ai = 1;
                lv_index = 1;
                for ( ; ( (auto905D87B8_ai >= 0 && lv_index <= auto905D87B8_ae) || (auto905D87B8_ai <= 0 && lv_index >= auto905D87B8_ae) ) ; lv_index += auto905D87B8_ai ) {
                    autoEF386EA4_ae = UserDataGetInt(gv_unitTypeUserType, (lv_unitTypeID), "Count", lv_index);
                    autoEF386EA4_ai = 1;
                    lv_unit = 1;
                    for ( ; ( (autoEF386EA4_ai >= 0 && lv_unit <= autoEF386EA4_ae) || (autoEF386EA4_ai <= 0 && lv_unit >= autoEF386EA4_ae) ) ; lv_unit += autoEF386EA4_ai ) {
                        if ((lv_unitIndex < gv_unitMaximumCountPerPhalanx)) {
                            lv_unitType = UserDataGetUnit(gv_unitTypeUserType, (lv_unitTypeID), "UnitType", lv_index);
                            if ((lv_unitType != null)) {
                                lv_unitIndex += 1;
                                gv_unitType[gv_playerAtBuildingRegion[lp_buildingRegion]][lp_phalanx][lv_unitIndex] = lv_unitType;
                                gv_buildingScore[gv_playerAtBuildingRegion[lp_buildingRegion]] += gf_UnitTypeGetKillGold(lv_unitType);
                            }

                        }

                    }
                }
            }
            UnitGroupLoopEnd();
        }
    }
}

void gf_CreepUnitTypeSetAll () {
    int auto62356746_ae;
    int auto62356746_ai;
    int auto0C8197BD_ae;
    int auto0C8197BD_ai;

    // Variable Declarations
    int lv_round;
    int lv_venue;
    int lv_count;
    int lv_index;
    string lv_roundID;
    string lv_unitType;
    text lv_description;
    string lv_path;

    // Variable Initialization
    lv_roundID = "";
    lv_path = "";

    // Implementation
    lv_count = UserDataFieldValueCount(gv_creepUnitTypeUserType, "UnitType");
    auto62356746_ae = gv_roundCount;
    auto62356746_ai = 1;
    lv_round = 1;
    for ( ; ( (auto62356746_ai >= 0 && lv_round <= auto62356746_ae) || (auto62356746_ai <= 0 && lv_round >= auto62356746_ae) ) ; lv_round += auto62356746_ai ) {
        if ((gv_bonusRoundIsOn[lv_round] == true)) {
            auto0C8197BD_ae = gv_venueMaximumCount;
            auto0C8197BD_ai = 1;
            lv_venue = 1;
            for ( ; ( (auto0C8197BD_ai >= 0 && lv_venue <= auto0C8197BD_ae) || (auto0C8197BD_ai <= 0 && lv_venue >= auto0C8197BD_ae) ) ; lv_venue += auto0C8197BD_ai ) {
                while ((gv_creepUnitType[lv_venue][lv_round] == null)) {
                    lv_index = RandomInt(1, lv_count);
                    lv_roundID = IntToString(lv_round);
                    lv_unitType = UserDataGetUnit(gv_creepUnitTypeUserType, (lv_roundID), "UnitType", lv_index);
                    if ((lv_unitType != null)) {
                        gv_creepUnitType[lv_venue][lv_round] = lv_unitType;
                        lv_description = UserDataGetText(gv_creepUnitTypeUserType, (lv_roundID), "Description", lv_index);
                        lv_path = CatalogFieldValueGet(c_gameCatalogActor, (lv_unitType), "UnitIcon", gv_playerAtVenue[lv_venue][lv_round]);
                        TextExpressionSetToken("Param/Expression/2C3E096F", "A", IntToText(lv_round));
                        TextExpressionSetToken("Param/Expression/2C3E096F", "B", UnitTypeGetName(lv_unitType));
                        TextExpressionSetToken("Param/Expression/93F8A044", "A", IntToText(lv_round));
                        TextExpressionSetToken("Param/Expression/93F8A044", "B", UnitTypeGetName(lv_unitType));
                        HelpPanelAddTip(PlayerGroupSingle(gv_playerAtVenue[lv_venue][lv_round]), TextExpressionAssemble("Param/Expression/2C3E096F"), lv_description, TextExpressionAssemble("Param/Expression/93F8A044"), (lv_path));
                    }

                }
            }
        }

    }
}

int gf_PointInBuildingRegionGetBuildingRegion (point lp_point) {
    int autoEE46AC9D_ae;
    int autoEE46AC9D_ai;
    int autoCD1EFE2A_ae;
    int autoCD1EFE2A_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    int lv_index;

    // Variable Initialization

    // Implementation
    autoEE46AC9D_ae = gv_playerCount;
    autoEE46AC9D_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (autoEE46AC9D_ai >= 0 && lv_buildingRegion <= autoEE46AC9D_ae) || (autoEE46AC9D_ai <= 0 && lv_buildingRegion >= autoEE46AC9D_ae) ) ; lv_buildingRegion += autoEE46AC9D_ai ) {
        autoCD1EFE2A_ae = gv_phalanxMaximumCount;
        autoCD1EFE2A_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (autoCD1EFE2A_ai >= 0 && lv_phalanx <= autoCD1EFE2A_ae) || (autoCD1EFE2A_ai <= 0 && lv_phalanx >= autoCD1EFE2A_ae) ) ; lv_phalanx += autoCD1EFE2A_ai ) {
            if ((RegionContainsPoint(gv_buildingRegion[lv_buildingRegion][lv_phalanx], lp_point) == true)) {
                lv_index = lv_buildingRegion;
                break;
            }

        }
    }
    return lv_index;
}

int gf_PointInBuildingRegionGetPhalanx (point lp_point) {
    int auto8AF076B6_ae;
    int auto8AF076B6_ai;
    int autoEA983D8B_ae;
    int autoEA983D8B_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    int lv_index;

    // Variable Initialization

    // Implementation
    auto8AF076B6_ae = gv_playerCount;
    auto8AF076B6_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (auto8AF076B6_ai >= 0 && lv_buildingRegion <= auto8AF076B6_ae) || (auto8AF076B6_ai <= 0 && lv_buildingRegion >= auto8AF076B6_ae) ) ; lv_buildingRegion += auto8AF076B6_ai ) {
        autoEA983D8B_ae = gv_phalanxMaximumCount;
        autoEA983D8B_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (autoEA983D8B_ai >= 0 && lv_phalanx <= autoEA983D8B_ae) || (autoEA983D8B_ai <= 0 && lv_phalanx >= autoEA983D8B_ae) ) ; lv_phalanx += autoEA983D8B_ai ) {
            if ((RegionContainsPoint(gv_buildingRegion[lv_buildingRegion][lv_phalanx], lp_point) == true)) {
                lv_index = lv_phalanx;
                break;
            }

        }
    }
    return lv_index;
}

void gf_PhalanxPlaceholderPositionAll () {
    int auto5D24B564_ae;
    int auto5D24B564_ai;
    string autoAC9E2180_val;
    int autoFFBBF94E_ae;
    int autoFFBBF94E_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    string lv_unitType;

    // Variable Initialization

    // Implementation
    auto5D24B564_ae = gv_playerCount;
    auto5D24B564_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (auto5D24B564_ai >= 0 && lv_buildingRegion <= auto5D24B564_ae) || (auto5D24B564_ai <= 0 && lv_buildingRegion >= auto5D24B564_ae) ) ; lv_buildingRegion += auto5D24B564_ai ) {
        autoAC9E2180_val = PlayerRace(gv_playerAtBuildingRegion[lv_buildingRegion]);
        if (autoAC9E2180_val == "Human") {
            lv_unitType = "HumanPhalanxPlaceholder";
        }
        else if (autoAC9E2180_val == "NightElf") {
            lv_unitType = "NightElfPhalanxPlaceholder";
        }
        else if (autoAC9E2180_val == "Orc") {
            lv_unitType = "OrcPhalanxPlaceholder";
        }
        else if (autoAC9E2180_val == "Undead") {
            lv_unitType = "UndeadPhalanxPlaceholder";
        }
        else {
        }
        autoFFBBF94E_ae = gv_phalanxMaximumCount;
        autoFFBBF94E_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (autoFFBBF94E_ai >= 0 && lv_phalanx <= autoFFBBF94E_ae) || (autoFFBBF94E_ai <= 0 && lv_phalanx >= autoFFBBF94E_ae) ) ; lv_phalanx += autoFFBBF94E_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_unitType, c_unitCreateIgnorePlacement, gv_playerAtBuildingRegion[lv_buildingRegion], RegionGetCenter(gv_previewRegion[lv_buildingRegion][lv_phalanx]));
        }
    }
}

void gf_BuildingRegionSet (region lp_region, int lp_index, int lp_phalanx) {
    // Implementation
    gv_buildingRegion[lp_index][lp_phalanx] = lp_region;
}

void gf_PlayerAtBuildingRegionSet () {
    int auto0E2468D8_ae;
    int auto0E2468D8_ai;
    int autoC093970B_ae;
    int autoC093970B_ai;
    int autoB88C6C05_ae;
    int autoB88C6C05_ai;
    int auto63C10B05_ae;
    int auto63C10B05_ai;
    int autoA7F659E9_ae;
    int autoA7F659E9_ai;
    int autoED87CDDE_ae;
    int autoED87CDDE_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_targetBuildingRegion;
    int lv_phalanx;
    int lv_player;

    // Variable Initialization

    // Implementation
    auto0E2468D8_ae = gv_playerCount;
    auto0E2468D8_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (auto0E2468D8_ai >= 0 && lv_buildingRegion <= auto0E2468D8_ae) || (auto0E2468D8_ai <= 0 && lv_buildingRegion >= auto0E2468D8_ae) ) ; lv_buildingRegion += auto0E2468D8_ai ) {
        autoC093970B_ae = gv_phalanxMaximumCount;
        autoC093970B_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (autoC093970B_ai >= 0 && lv_phalanx <= autoC093970B_ae) || (autoC093970B_ai <= 0 && lv_phalanx >= autoC093970B_ae) ) ; lv_phalanx += autoC093970B_ai ) {
            autoB88C6C05_ae = gv_playerCount;
            autoB88C6C05_ai = 1;
            lv_targetBuildingRegion = 1;
            for ( ; ( (autoB88C6C05_ai >= 0 && lv_targetBuildingRegion <= autoB88C6C05_ae) || (autoB88C6C05_ai <= 0 && lv_targetBuildingRegion >= autoB88C6C05_ae) ) ; lv_targetBuildingRegion += autoB88C6C05_ai ) {
                if ((RegionContainsPoint(gv_buildingRegion[lv_buildingRegion][lv_phalanx], PlayerStartLocation(gf_IndexGetUserPlayer(lv_targetBuildingRegion))) == true)) {
                    lv_player = gf_IndexGetUserPlayer(lv_targetBuildingRegion);
                }

            }
        }
        gv_playerAtBuildingRegion[lv_buildingRegion] = lv_player;
    }
    auto63C10B05_ae = gv_playerCount;
    auto63C10B05_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (auto63C10B05_ai >= 0 && lv_buildingRegion <= auto63C10B05_ae) || (auto63C10B05_ai <= 0 && lv_buildingRegion >= auto63C10B05_ae) ) ; lv_buildingRegion += auto63C10B05_ai ) {
        autoA7F659E9_ae = gv_playerCount;
        autoA7F659E9_ai = 1;
        lv_targetBuildingRegion = 1;
        for ( ; ( (autoA7F659E9_ai >= 0 && lv_targetBuildingRegion <= autoA7F659E9_ae) || (autoA7F659E9_ai <= 0 && lv_targetBuildingRegion >= autoA7F659E9_ae) ) ; lv_targetBuildingRegion += autoA7F659E9_ai ) {
            autoED87CDDE_ae = gv_phalanxMaximumCount;
            autoED87CDDE_ai = 1;
            lv_phalanx = 1;
            for ( ; ( (autoED87CDDE_ai >= 0 && lv_phalanx <= autoED87CDDE_ae) || (autoED87CDDE_ai <= 0 && lv_phalanx >= autoED87CDDE_ae) ) ; lv_phalanx += autoED87CDDE_ai ) {
                VisRevealerCreate(gv_playerAtBuildingRegion[lv_buildingRegion], gv_buildingRegion[lv_targetBuildingRegion][lv_phalanx]);
                VisRevealerEnable(VisRevealerLastCreated(), false);
                gv_buildingRegionRevealer[gv_playerAtBuildingRegion[lv_buildingRegion]][gv_playerAtBuildingRegion[lv_targetBuildingRegion]][lv_phalanx] = VisRevealerLastCreated();
                VisRevealerCreate(gv_playerAtBuildingRegion[lv_buildingRegion], gv_previewRegion[lv_targetBuildingRegion][lv_phalanx]);
                VisRevealerEnable(VisRevealerLastCreated(), false);
                gv_previewRegionRevealer[gv_playerAtBuildingRegion[lv_buildingRegion]][gv_playerAtBuildingRegion[lv_targetBuildingRegion]][lv_phalanx] = VisRevealerLastCreated();
            }
        }
    }
}

void gf_BuildingRegionRevealerEnable (bool lp_option, bool lp_debug) {
    int autoB1EB4525_ae;
    int autoB1EB4525_ai;
    int autoE6E6ECF0_ae;
    int autoE6E6ECF0_ai;
    int autoF6EBABFC_ae;
    int autoF6EBABFC_ai;
    int autoE61EBCFF_ae;
    int autoE61EBCFF_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    int lv_targetBuildingRegion;

    // Variable Initialization

    // Implementation
    gf_TeamAlianceSet(libNtve_ge_AllianceSetting_AllyWithSharedVision);
    autoB1EB4525_ae = gv_playerCount;
    autoB1EB4525_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (autoB1EB4525_ai >= 0 && lv_buildingRegion <= autoB1EB4525_ae) || (autoB1EB4525_ai <= 0 && lv_buildingRegion >= autoB1EB4525_ae) ) ; lv_buildingRegion += autoB1EB4525_ai ) {
        if ((lp_option == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "BuildArmy", 1);
            if ((gv_round > (gv_roundCount-gv_finalRoundCount))) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "BuildArmyFinal", 1);
            }
            else {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "BuildArmyFinal", 0);
            }
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "BuildArmy", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "BuildArmyFinal", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "BuildPhalanx", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "BuildPortal", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "CountUnit", 0);
        }
        autoE6E6ECF0_ae = gv_phalanxMaximumCount;
        autoE6E6ECF0_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (autoE6E6ECF0_ai >= 0 && lv_phalanx <= autoE6E6ECF0_ae) || (autoE6E6ECF0_ai <= 0 && lv_phalanx >= autoE6E6ECF0_ae) ) ; lv_phalanx += autoE6E6ECF0_ai ) {
            VisRevealerEnable(gv_buildingRegionRevealer[gv_playerAtBuildingRegion[lv_buildingRegion]][gv_playerAtBuildingRegion[lv_buildingRegion]][lv_phalanx], lp_option);
            VisRevealerEnable(gv_previewRegionRevealer[gv_playerAtBuildingRegion[lv_buildingRegion]][gv_playerAtBuildingRegion[lv_buildingRegion]][lv_phalanx], lp_option);
        }
        if ((lp_debug == true)) {
            autoF6EBABFC_ae = gv_playerCount;
            autoF6EBABFC_ai = 1;
            lv_targetBuildingRegion = 1;
            for ( ; ( (autoF6EBABFC_ai >= 0 && lv_targetBuildingRegion <= autoF6EBABFC_ae) || (autoF6EBABFC_ai <= 0 && lv_targetBuildingRegion >= autoF6EBABFC_ae) ) ; lv_targetBuildingRegion += autoF6EBABFC_ai ) {
                autoE61EBCFF_ae = gv_phalanxMaximumCount;
                autoE61EBCFF_ai = 1;
                lv_phalanx = 1;
                for ( ; ( (autoE61EBCFF_ai >= 0 && lv_phalanx <= autoE61EBCFF_ae) || (autoE61EBCFF_ai <= 0 && lv_phalanx >= autoE61EBCFF_ae) ) ; lv_phalanx += autoE61EBCFF_ai ) {
                    VisRevealerEnable(gv_buildingRegionRevealer[gv_playerAtBuildingRegion[lv_buildingRegion]][gv_playerAtBuildingRegion[lv_targetBuildingRegion]][lv_phalanx], lp_option);
                    VisRevealerEnable(gv_previewRegionRevealer[gv_playerAtBuildingRegion[lv_buildingRegion]][gv_playerAtBuildingRegion[lv_targetBuildingRegion]][lv_phalanx], lp_option);
                }
            }
        }

    }
}

bool gf_RegionContainsPointWithOffset (point lp_point, region lp_region, int lp_x, int lp_y) {
    // Implementation
    if ((RegionContainsPoint(lp_region, PointWithOffsetPolar(lp_point, (lp_x/2-0.5), (0.0+0))) == true) && (RegionContainsPoint(lp_region, PointWithOffsetPolar(lp_point, (lp_x/2-0.5), (0.0+180))) == true) && (RegionContainsPoint(lp_region, PointWithOffsetPolar(lp_point, (lp_y/2-0.5), (0.0+90))) == true) && (RegionContainsPoint(lp_region, PointWithOffsetPolar(lp_point, (lp_y/2-0.5), (0.0+270))) == true)) {
        return true;
    }
    else {
        return false;
    }
}

void gf_CreepPointSet (point lp_point, int lp_index) {
    // Implementation
    gv_creepPoint[lp_index] = lp_point;
}

void gf_VenueInitialSet (region lp_region, int lp_index, fixed lp_facing) {
    int auto43A407E1_ae;
    int auto43A407E1_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    gv_venueInitial[lp_index] = lp_region;
    gv_venueInitialFacing[lp_index] = lp_facing;
    auto43A407E1_ae = gv_playerCount;
    auto43A407E1_ai = 1;
    lv_player = 1;
    for ( ; ( (auto43A407E1_ai >= 0 && lv_player <= auto43A407E1_ae) || (auto43A407E1_ai <= 0 && lv_player >= auto43A407E1_ae) ) ; lv_player += auto43A407E1_ai ) {
        VisRevealerCreate(gf_IndexGetUserPlayer(lv_player), gv_venueInitial[lp_index]);
        VisRevealerEnable(VisRevealerLastCreated(), false);
        gv_venueInitialRevealer[lp_index][gf_IndexGetUserPlayer(lv_player)] = VisRevealerLastCreated();
    }
}

void gf_BonusVenueSet (region lp_region, int lp_index, fixed lp_facing) {
    int auto6C52A265_ae;
    int auto6C52A265_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    gv_bonusVenue[lp_index] = lp_region;
    gv_bonusVenueFacing[lp_index] = lp_facing;
    auto6C52A265_ae = gv_playerCount;
    auto6C52A265_ai = 1;
    lv_player = 1;
    for ( ; ( (auto6C52A265_ai >= 0 && lv_player <= auto6C52A265_ae) || (auto6C52A265_ai <= 0 && lv_player >= auto6C52A265_ae) ) ; lv_player += auto6C52A265_ai ) {
        VisRevealerCreate(gf_IndexGetUserPlayer(lv_player), gv_bonusVenue[lp_index]);
        VisRevealerEnable(VisRevealerLastCreated(), false);
        gv_bonusVenueRevealer[lp_index][gf_IndexGetUserPlayer(lv_player)] = VisRevealerLastCreated();
    }
}

void gf_VenueRevealerEnable (int lp_round, bool lp_option) {
    int autoE8BD126E_ae;
    int autoE8BD126E_ai;

    // Variable Declarations
    int lv_venue;

    // Variable Initialization

    // Implementation
    gf_TeamAlianceSet(libNtve_ge_AllianceSetting_Ally);
    autoE8BD126E_ae = gv_venueMaximumCount;
    autoE8BD126E_ai = 1;
    lv_venue = 1;
    for ( ; ( (autoE8BD126E_ai >= 0 && lv_venue <= autoE8BD126E_ae) || (autoE8BD126E_ai <= 0 && lv_venue >= autoE8BD126E_ae) ) ; lv_venue += autoE8BD126E_ai ) {
        if ((gv_playerAtVenue[lv_venue][lp_round] != -1)) {
            if ((lp_option == true)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtVenue[lv_venue][lp_round], "BuildPhalanx", 1);
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtVenue[lv_venue][lp_round], "BuildPortal", 1);
            }
            else {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtVenue[lv_venue][lp_round], "BuildArmy", 0);
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtVenue[lv_venue][lp_round], "BuildPhalanx", 0);
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtVenue[lv_venue][lp_round], "BuildPortal", 0);
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtVenue[lv_venue][lp_round], "CountUnit", 0);
            }
            VisRevealerEnable(gv_venueRevealer[lv_venue][gv_playerAtVenue[lv_venue][lp_round]], lp_option);
        }

    }
}

void gf_BonusVenueReplace () {
    int auto071FC1BA_ae;
    int auto071FC1BA_ai;
    int auto8903228B_ae;
    int auto8903228B_ai;

    // Variable Declarations
    int lv_venue;
    int lv_index;

    // Variable Initialization

    // Implementation
    auto071FC1BA_ae = gv_venueMaximumCount;
    auto071FC1BA_ai = 1;
    lv_venue = 1;
    for ( ; ( (auto071FC1BA_ai >= 0 && lv_venue <= auto071FC1BA_ae) || (auto071FC1BA_ai <= 0 && lv_venue >= auto071FC1BA_ae) ) ; lv_venue += auto071FC1BA_ai ) {
        gv_venue[lv_venue] = gv_bonusVenue[lv_venue];
        gv_venueFacing[lv_venue] = gv_bonusVenueFacing[lv_venue];
        auto8903228B_ae = gv_playerMaximumIndex;
        auto8903228B_ai = 1;
        lv_index = 0;
        for ( ; ( (auto8903228B_ai >= 0 && lv_index <= auto8903228B_ae) || (auto8903228B_ai <= 0 && lv_index >= auto8903228B_ae) ) ; lv_index += auto8903228B_ai ) {
            gv_venueRevealer[lv_venue][lv_index] = gv_bonusVenueRevealer[lv_venue][lv_index];
        }
    }
}

void gf_VenueInitialReplace () {
    int auto4AEDB4D7_ae;
    int auto4AEDB4D7_ai;
    int auto1E810B8E_ae;
    int auto1E810B8E_ai;

    // Variable Declarations
    int lv_venue;
    int lv_index;

    // Variable Initialization

    // Implementation
    auto4AEDB4D7_ae = gv_venueMaximumCount;
    auto4AEDB4D7_ai = 1;
    lv_venue = 1;
    for ( ; ( (auto4AEDB4D7_ai >= 0 && lv_venue <= auto4AEDB4D7_ae) || (auto4AEDB4D7_ai <= 0 && lv_venue >= auto4AEDB4D7_ae) ) ; lv_venue += auto4AEDB4D7_ai ) {
        gv_venue[lv_venue] = gv_venueInitial[lv_venue];
        gv_venueFacing[lv_venue] = gv_venueInitialFacing[lv_venue];
        auto1E810B8E_ae = gv_playerMaximumIndex;
        auto1E810B8E_ai = 1;
        lv_index = 0;
        for ( ; ( (auto1E810B8E_ai >= 0 && lv_index <= auto1E810B8E_ae) || (auto1E810B8E_ai <= 0 && lv_index >= auto1E810B8E_ae) ) ; lv_index += auto1E810B8E_ai ) {
            gv_venueRevealer[lv_venue][lv_index] = gv_venueInitialRevealer[lv_venue][lv_index];
        }
    }
}

void gf_PathingBlockerRemove (region lp_region) {
    unitgroup auto5D9150A3_g;
    int auto5D9150A3_u;

    // Variable Declarations
    unit lv_unit;

    // Variable Initialization

    // Implementation
    auto5D9150A3_g = UnitGroup(null, c_playerAny, lp_region, gv_pathBlockerFilter, 0);
    auto5D9150A3_u = 1;
    for ( ; auto5D9150A3_u <= UnitGroupCount(auto5D9150A3_g, c_unitCountAll) ; auto5D9150A3_u += BoolToInt(lv_unit == UnitGroupUnit(auto5D9150A3_g, auto5D9150A3_u)) ) {
        lv_unit = UnitGroupUnit(auto5D9150A3_g, auto5D9150A3_u);
        UnitRemove(lv_unit);
    }
}

void gf_ValidRegionFillHidden () {
    int autoB65D249C_ae;
    int autoB65D249C_ai;
    int auto7664A264_ae;
    int auto7664A264_ai;
    int autoB88E6ECC_ae;
    int autoB88E6ECC_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_targetBuildingRegion;
    int lv_phalanx;

    // Variable Initialization

    // Implementation
    autoB65D249C_ae = gv_playerCount;
    autoB65D249C_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (autoB65D249C_ai >= 0 && lv_buildingRegion <= autoB65D249C_ae) || (autoB65D249C_ai <= 0 && lv_buildingRegion >= autoB65D249C_ae) ) ; lv_buildingRegion += autoB65D249C_ai ) {
        VisFillArea(gv_playerAtBuildingRegion[lv_buildingRegion], RegionEntireMap(), c_fillTypeHidden, false);
        VisRevealArea(gv_playerAtBuildingRegion[lv_buildingRegion], gv_battlefield, gv_minimumPeriod, false);
        auto7664A264_ae = gv_playerCount;
        auto7664A264_ai = 1;
        lv_targetBuildingRegion = 1;
        for ( ; ( (auto7664A264_ai >= 0 && lv_targetBuildingRegion <= auto7664A264_ae) || (auto7664A264_ai <= 0 && lv_targetBuildingRegion >= auto7664A264_ae) ) ; lv_targetBuildingRegion += auto7664A264_ai ) {
            autoB88E6ECC_ae = gv_phalanxMaximumCount;
            autoB88E6ECC_ai = 1;
            lv_phalanx = 1;
            for ( ; ( (autoB88E6ECC_ai >= 0 && lv_phalanx <= autoB88E6ECC_ae) || (autoB88E6ECC_ai <= 0 && lv_phalanx >= autoB88E6ECC_ae) ) ; lv_phalanx += autoB88E6ECC_ai ) {
                VisRevealArea(gv_playerAtBuildingRegion[lv_buildingRegion], gv_buildingRegion[lv_targetBuildingRegion][lv_phalanx], gv_minimumPeriod, false);
                VisRevealArea(gv_playerAtBuildingRegion[lv_buildingRegion], gv_previewRegion[lv_targetBuildingRegion][lv_phalanx], gv_minimumPeriod, false);
            }
        }
    }
}

void gf_BattlefieldSetAll (region lp_region) {
    int autoE3FE267D_ae;
    int autoE3FE267D_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    gv_battlefield = lp_region;
    autoE3FE267D_ae = gv_playerCount;
    autoE3FE267D_ai = 1;
    lv_player = 1;
    for ( ; ( (autoE3FE267D_ai >= 0 && lv_player <= autoE3FE267D_ae) || (autoE3FE267D_ai <= 0 && lv_player >= autoE3FE267D_ae) ) ; lv_player += autoE3FE267D_ai ) {
        VisRevealerCreate(gf_IndexGetUserPlayer(lv_player), gv_battlefield);
        VisRevealerEnable(VisRevealerLastCreated(), false);
        gv_battlefieldRevealer[gf_IndexGetUserPlayer(lv_player)] = VisRevealerLastCreated();
        VisRevealerCreate(gf_UserPlayerGetMirrorPlayer(gf_IndexGetUserPlayer(lv_player)), gv_battlefield);
        VisRevealerEnable(VisRevealerLastCreated(), false);
        gv_battlefieldRevealer[gf_UserPlayerGetMirrorPlayer(gf_IndexGetUserPlayer(lv_player))] = VisRevealerLastCreated();
    }
}

void gf_BattlefieldRevealerEnable (bool lp_option) {
    int auto0B3F5F2A_ae;
    int auto0B3F5F2A_ai;
    int auto0DAD2343_ae;
    int auto0DAD2343_ai;
    int auto6654BDE2_ae;
    int auto6654BDE2_ai;

    // Variable Declarations
    int lv_player;
    int lv_targetPlayer;
    int lv_phalanx;

    // Variable Initialization

    // Implementation
    auto0B3F5F2A_ae = gv_playerCount;
    auto0B3F5F2A_ai = 1;
    lv_player = 1;
    for ( ; ( (auto0B3F5F2A_ai >= 0 && lv_player <= auto0B3F5F2A_ae) || (auto0B3F5F2A_ai <= 0 && lv_player >= auto0B3F5F2A_ae) ) ; lv_player += auto0B3F5F2A_ai ) {
        if ((lp_option == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(gf_IndexGetUserPlayer(lv_player), "BuildArmy", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gf_IndexGetUserPlayer(lv_player), "BuildPhalanx", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gf_IndexGetUserPlayer(lv_player), "BuildPortal", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gf_IndexGetUserPlayer(lv_player), "CountUnit", 0);
        }

        VisRevealerEnable(gv_battlefieldRevealer[gf_IndexGetUserPlayer(lv_player)], lp_option);
        VisRevealerEnable(gv_battlefieldRevealer[gf_UserPlayerGetMirrorPlayer(gf_IndexGetUserPlayer(lv_player))], lp_option);
        auto0DAD2343_ae = gv_playerCount;
        auto0DAD2343_ai = 1;
        lv_targetPlayer = 1;
        for ( ; ( (auto0DAD2343_ai >= 0 && lv_targetPlayer <= auto0DAD2343_ae) || (auto0DAD2343_ai <= 0 && lv_targetPlayer >= auto0DAD2343_ae) ) ; lv_targetPlayer += auto0DAD2343_ai ) {
            auto6654BDE2_ae = gv_phalanxMaximumCount;
            auto6654BDE2_ai = 1;
            lv_phalanx = 1;
            for ( ; ( (auto6654BDE2_ai >= 0 && lv_phalanx <= auto6654BDE2_ae) || (auto6654BDE2_ai <= 0 && lv_phalanx >= auto6654BDE2_ae) ) ; lv_phalanx += auto6654BDE2_ai ) {
                VisRevealerEnable(gv_buildingRegionRevealer[gf_IndexGetUserPlayer(lv_player)][gf_IndexGetUserPlayer(lv_targetPlayer)][lv_phalanx], lp_option);
                VisRevealerEnable(gv_previewRegionRevealer[gf_IndexGetUserPlayer(lv_player)][gf_IndexGetUserPlayer(lv_targetPlayer)][lv_phalanx], lp_option);
            }
        }
    }
}

void gf_BattlefieldReset () {
    unitgroup autoB75FCF98_g;
    int autoB75FCF98_u;
    unitgroup autoBF737A98_g;
    int autoBF737A98_u;
    unitgroup autoED3AB458_g;
    int autoED3AB458_u;
    unitgroup auto2A46D06B_g;
    int auto2A46D06B_u;
    unitgroup auto94B1B15F_g;
    int auto94B1B15F_u;
    unitgroup autoB938F228_g;
    int autoB938F228_u;

    // Variable Declarations
    unit lv_unit;

    // Variable Initialization

    // Implementation
    gf_ReserveUnitIndexResetAll();
    autoB75FCF98_g = UnitGroup(null, c_playerAny, gv_battlefield, gv_phalanxFilter, 0);
    autoB75FCF98_u = 1;
    for ( ; autoB75FCF98_u <= UnitGroupCount(autoB75FCF98_g, c_unitCountAll) ; autoB75FCF98_u += BoolToInt(lv_unit == UnitGroupUnit(autoB75FCF98_g, autoB75FCF98_u)) ) {
        lv_unit = UnitGroupUnit(autoB75FCF98_g, autoB75FCF98_u);
        UnitRemove(lv_unit);
    }
    autoBF737A98_g = UnitGroup(null, c_playerAny, gv_battlefield, gv_portalFilter, 0);
    autoBF737A98_u = 1;
    for ( ; autoBF737A98_u <= UnitGroupCount(autoBF737A98_g, c_unitCountAll) ; autoBF737A98_u += BoolToInt(lv_unit == UnitGroupUnit(autoBF737A98_g, autoBF737A98_u)) ) {
        lv_unit = UnitGroupUnit(autoBF737A98_g, autoBF737A98_u);
        UnitRemove(lv_unit);
    }
    autoED3AB458_g = UnitGroup(null, c_playerAny, gv_battlefield, gv_creepFilter, 0);
    autoED3AB458_u = 1;
    for ( ; autoED3AB458_u <= UnitGroupCount(autoED3AB458_g, c_unitCountAll) ; autoED3AB458_u += BoolToInt(lv_unit == UnitGroupUnit(autoED3AB458_g, autoED3AB458_u)) ) {
        lv_unit = UnitGroupUnit(autoED3AB458_g, autoED3AB458_u);
        UnitRemove(lv_unit);
    }
    auto2A46D06B_g = UnitGroup(null, c_playerAny, gv_battlefield, gv_unitFilter, 0);
    auto2A46D06B_u = 1;
    for ( ; auto2A46D06B_u <= UnitGroupCount(auto2A46D06B_g, c_unitCountAll) ; auto2A46D06B_u += BoolToInt(lv_unit == UnitGroupUnit(auto2A46D06B_g, auto2A46D06B_u)) ) {
        lv_unit = UnitGroupUnit(auto2A46D06B_g, auto2A46D06B_u);
        UnitRemove(lv_unit);
    }
    auto94B1B15F_g = UnitGroup(null, c_playerAny, gv_battlefield, UnitFilter((1 << c_targetFilterMissile), 0, 0, 0), 0);
    auto94B1B15F_u = 1;
    for ( ; auto94B1B15F_u <= UnitGroupCount(auto94B1B15F_g, c_unitCountAll) ; auto94B1B15F_u += BoolToInt(lv_unit == UnitGroupUnit(auto94B1B15F_g, auto94B1B15F_u)) ) {
        lv_unit = UnitGroupUnit(auto94B1B15F_g, auto94B1B15F_u);
        UnitRemove(lv_unit);
    }
    autoB938F228_g = UnitGroup(null, c_playerAny, gv_battlefield, UnitFilter(0, (1 << (c_targetFilterDead - 32)), 0, 0), 0);
    autoB938F228_u = 1;
    for ( ; autoB938F228_u <= UnitGroupCount(autoB938F228_g, c_unitCountAll) ; autoB938F228_u += BoolToInt(lv_unit == UnitGroupUnit(autoB938F228_g, autoB938F228_u)) ) {
        lv_unit = UnitGroupUnit(autoB938F228_g, autoB938F228_u);
        UnitRemove(lv_unit);
    }
}

bool gf_IsFinalRound (int lp_round) {
    // Implementation
    if ((lp_round > (gv_roundCount-gv_finalRoundCount))) {
        return true;
    }
    else {
        return false;
    }
}

void gf_RoundGoldSet (int lp_round, int lp_value) {
    // Implementation
    gv_roundGold[lp_round] = lp_value;
}

void gf_BonusRoundSet (bool lp_on, int lp_round) {
    // Implementation
    gv_bonusRoundIsOn[lp_round] = lp_on;
}

void gf_GoldAdd (int lp_round) {
    int autoC14FC872_ae;
    int autoC14FC872_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    autoC14FC872_ae = gv_playerCount;
    autoC14FC872_ai = 1;
    lv_player = 1;
    for ( ; ( (autoC14FC872_ai >= 0 && lv_player <= autoC14FC872_ae) || (autoC14FC872_ai <= 0 && lv_player >= autoC14FC872_ae) ) ; lv_player += autoC14FC872_ai ) {
        PlayerModifyPropertyInt(gf_IndexGetUserPlayer(lv_player), c_playerPropTerrazine, c_playerPropOperAdd, gv_buildingScore[gf_IndexGetUserPlayer(lv_player)]);
        PlayerModifyPropertyInt(gf_IndexGetUserPlayer(lv_player), c_playerPropTerrazine, c_playerPropOperAdd, gv_roundGold[lp_round]);
        gv_buildingScore[gf_IndexGetUserPlayer(lv_player)] = 0;
        gv_killScore[gf_IndexGetUserPlayer(lv_player)] = 0;
    }
}

void gf_UserPlayerSet (int lp_index, int lp_player) {
    // Implementation
    gv_userPlayer[lp_index] = lp_player;
}

void gf_TeamAlianceSet (int lp_option) {
    int auto6B30AC5A_ae;
    int auto6B30AC5A_ai;

    // Variable Declarations
    int lv_team;

    // Variable Initialization

    // Implementation
    auto6B30AC5A_ae = gv_teamCount;
    auto6B30AC5A_ai = 1;
    lv_team = 1;
    for ( ; ( (auto6B30AC5A_ai >= 0 && lv_team <= auto6B30AC5A_ae) || (auto6B30AC5A_ai <= 0 && lv_team >= auto6B30AC5A_ae) ) ; lv_team += auto6B30AC5A_ai ) {
        libNtve_gf_SetPlayerGroupAlliance(gv_teamGroup[lv_team], lp_option);
    }
}

void gf_MirrorPlayerSet (int lp_index, int lp_player) {
    // Implementation
    gv_mirrorPlayer[lp_index] = lp_player;
}

int gf_UnitTypeGetKillGold (string lp_unitType) {
    // Variable Declarations
    int lv_value;

    // Variable Initialization

    // Implementation
    lv_value = CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "KillResource[" + IntToString(2) + "]", c_playerAny);
    return lv_value;
}

fixed gf_PointGetVenueFacing (point lp_point) {
    int autoDF4A3B30_ae;
    int autoDF4A3B30_ai;

    // Variable Declarations
    int lv_venue;
    fixed lv_facing;

    // Variable Initialization

    // Implementation
    autoDF4A3B30_ae = gv_venueMaximumCount;
    autoDF4A3B30_ai = 1;
    lv_venue = 1;
    for ( ; ( (autoDF4A3B30_ai >= 0 && lv_venue <= autoDF4A3B30_ae) || (autoDF4A3B30_ai <= 0 && lv_venue >= autoDF4A3B30_ae) ) ; lv_venue += autoDF4A3B30_ai ) {
        if ((RegionContainsPoint(gv_venue[lv_venue], lp_point) == true)) {
            lv_facing = gv_venueFacing[lv_venue];
        }

    }
    return lv_facing;
}

int gf_UnitTypeGetPhalanxCapacity (string lp_unitType) {
    // Variable Declarations
    int lv_capacity;
    int lv_columnCount;
    int lv_rowCount;

    // Variable Initialization
    lv_columnCount = UserDataGetInt(gv_phalanxUserType, ((lp_unitType)), "Column", 1);
    lv_rowCount = UserDataGetInt(gv_phalanxUserType, ((lp_unitType)), "Row", 1);

    // Implementation
    lv_capacity = (lv_columnCount*lv_rowCount);
    return lv_capacity;
}

string gf_RaceGetPhalanxType (string lp_race) {
    string autoB9615AA3_val;

    // Variable Declarations
    string lv_unitType;

    // Variable Initialization

    // Implementation
    autoB9615AA3_val = lp_race;
    if (autoB9615AA3_val == "Human") {
        lv_unitType = "flag";
    }
    else if (autoB9615AA3_val == "NightElf") {
        lv_unitType = "nflg";
    }
    else if (autoB9615AA3_val == "Orc") {
        lv_unitType = "oflg";
    }
    else if (autoB9615AA3_val == "Undead") {
        lv_unitType = "uflg";
    }
    else {
    }
    return lv_unitType;
}

int gf_MirrorPlayerGetUserPlayer (int lp_player) {
    int autoF1FC35C6_ae;
    int autoF1FC35C6_ai;

    // Variable Declarations
    int lv_player;
    int lv_userPlayer;

    // Variable Initialization

    // Implementation
    autoF1FC35C6_ae = gv_playerCount;
    autoF1FC35C6_ai = 1;
    lv_player = 1;
    for ( ; ( (autoF1FC35C6_ai >= 0 && lv_player <= autoF1FC35C6_ae) || (autoF1FC35C6_ai <= 0 && lv_player >= autoF1FC35C6_ae) ) ; lv_player += autoF1FC35C6_ai ) {
        if ((gv_mirrorPlayer[lv_player] == lp_player)) {
            lv_userPlayer = gv_userPlayer[lv_player];
        }

    }
    return lv_userPlayer;
}

int gf_UserPlayerGetMirrorPlayer (int lp_player) {
    int auto9A8A567F_ae;
    int auto9A8A567F_ai;

    // Variable Declarations
    int lv_player;
    int lv_mirrorPlayer;

    // Variable Initialization

    // Implementation
    auto9A8A567F_ae = gv_playerCount;
    auto9A8A567F_ai = 1;
    lv_player = 1;
    for ( ; ( (auto9A8A567F_ai >= 0 && lv_player <= auto9A8A567F_ae) || (auto9A8A567F_ai <= 0 && lv_player >= auto9A8A567F_ae) ) ; lv_player += auto9A8A567F_ai ) {
        if ((gv_userPlayer[lv_player] == lp_player)) {
            lv_mirrorPlayer = gv_mirrorPlayer[lv_player];
        }

    }
    return lv_mirrorPlayer;
}

int gf_IndexGetUserPlayer (int lp_index) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    lv_player = gv_userPlayer[lp_index];
    return lv_player;
}

region gf_IndexGetVenue (int lp_index) {
    // Implementation
    return gv_venue[lp_index];
}

string gf_AttributeGetRace (string lp_attribute) {
    // Variable Declarations
    string lv_userDataType;
    string lv_race;
    int lv_index;
    int lv_count;

    // Variable Initialization
    lv_userDataType = "RaceAttributeMapping";
    lv_race = UserDataGetGameLink(lv_userDataType, (lp_attribute), "Race", 1);
    lv_count = UserDataInstanceCount(lv_userDataType);

    // Implementation
    if ((lv_race == null)) {
        lv_race = UserDataGetGameLink(lv_userDataType, UserDataInstance(lv_userDataType, RandomInt(1, lv_count)), "Race", 1);
    }

    return lv_race;
}

void gf_ReserveUnitCreation2 (int lp_player, int lp_phalanx) {
    unitgroup autoB338870E_g;
    int autoB338870E_u;

    // Variable Declarations
    unit lv_phalanxUnit;
    int lv_phalanx;
    string lv_unitType;
    int lv_index;

    // Variable Initialization

    // Implementation
    autoB338870E_g = UnitGroup(null, gf_MirrorPlayerGetUserPlayer(lp_player), gv_battlefield, gv_phalanxFilter, 0);
    autoB338870E_u = 1;
    for ( ; autoB338870E_u <= UnitGroupCount(autoB338870E_g, c_unitCountAll) ; autoB338870E_u += BoolToInt(lv_phalanxUnit == UnitGroupUnit(autoB338870E_g, autoB338870E_u)) ) {
        lv_phalanxUnit = UnitGroupUnit(autoB338870E_g, autoB338870E_u);
        lv_phalanx = FixedToInt(UnitGetCustomValue(lv_phalanxUnit, gv_customValuePhalanx));
        if ((lp_phalanx == lv_phalanx)) {
            lv_index = (gf_UnitTypeGetPhalanxCapacity(UnitGetType(lv_phalanxUnit))+gv_reserveUnitIndex[gf_MirrorPlayerGetUserPlayer(lp_player)][lv_phalanx]);
            if ((lv_index < gv_unitMaximumCountPerPhalanx)) {
                gv_reserveUnitIndex[gf_MirrorPlayerGetUserPlayer(lp_player)][lv_phalanx] += 1;
                lv_unitType = gv_unitType[gf_MirrorPlayerGetUserPlayer(lp_player)][lv_phalanx][lv_index];
                TextExpressionSetToken("Param/Expression/CDD29E12", "A", IntToText(gv_reserveUnitIndex[0][1]));
                TextExpressionSetToken("Param/Expression/CDD29E12", "B", IntToText(gv_reserveUnitIndex[1][1]));
                TextExpressionSetToken("Param/Expression/CDD29E12", "C", IntToText(gv_reserveUnitIndex[2][1]));
                TextExpressionSetToken("Param/Expression/CDD29E12", "D", IntToText(gv_reserveUnitIndex[3][1]));
                TextExpressionSetToken("Param/Expression/CDD29E12", "E", IntToText(gv_reserveUnitIndex[4][1]));
                TextExpressionSetToken("Param/Expression/CDD29E12", "F", IntToText(gv_reserveUnitIndex[5][1]));
                TextExpressionSetToken("Param/Expression/CDD29E12", "G", IntToText(gv_reserveUnitIndex[6][1]));
                TextExpressionSetToken("Param/Expression/CDD29E12", "H", IntToText(gv_reserveUnitIndex[7][1]));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextExpressionAssemble("Param/Expression/CDD29E12"));
                TextExpressionSetToken("Param/Expression/A7AB3A2F", "A", IntToText(lv_phalanx));
                TextExpressionSetToken("Param/Expression/A7AB3A2F", "B", UnitTypeGetName(lv_unitType));
                TextExpressionSetToken("Param/Expression/A7AB3A2F", "C", IntToText(lv_index));
                UIDisplayMessage(PlayerGroupSingle(gf_MirrorPlayerGetUserPlayer(lp_player)), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/A7AB3A2F"));
                if ((lv_unitType != null)) {
                    gf_UnitCreate(lp_player, UnitGetPosition(lv_phalanxUnit), lv_unitType, lv_phalanxUnit);
                }

            }

        }

    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: MapInizialization
//--------------------------------------------------------------------------------------------------
bool gt_MapInizialization_Func (bool testConds, bool runActions) {
    playergroup autoE8E91B19_g;
    int autoE8E91B19_p;

    // Variable Declarations
    bool lv_debug;
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libGAwX_gt_AOmiMarker, false);
    TriggerExecute(gt_PlayerInizialization, true, false);
    TriggerExecute(gt_VenueInizialization, true, false);
    TriggerExecute(gt_BuidingRegionInizialization, true, false);
    TriggerExecute(gt_PreviewerPointInizialization, true, false);
    TriggerExecute(gt_RoundInitialization, true, false);
    gf_ModInizialization(lv_debug);
    autoE8E91B19_g = PlayerGroupActive(); 
    autoE8E91B19_p = 1;
    for ( ; autoE8E91B19_p <= PlayerGroupCount(autoE8E91B19_g) ; autoE8E91B19_p += BoolToInt(lv_player == PlayerGroupPlayer(autoE8E91B19_g, autoE8E91B19_p)) ) {
        lv_player = PlayerGroupPlayer(autoE8E91B19_g, autoE8E91B19_p);
        VisRevealArea(lv_player, RegionFromId(70), 0.0625, false);
        VisRevealArea(lv_player, RegionFromId(71), 0.0625, false);
    }
    libGAwX_gf_SetWar3TimeOfDay("13:00:00");
    libGAwX_gf_PauseUnpauseTimeOfDayWar3(true);
    MeleeInitUnits();
    gf_RoundStartLoop(lv_debug);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInizialization_Init () {
    gt_MapInizialization = TriggerCreate("gt_MapInizialization_Func");
    TriggerAddEventMapInit(gt_MapInizialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlayerInizialization
//--------------------------------------------------------------------------------------------------
bool gt_PlayerInizialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UserPlayerSet(1, 0);
    gf_MirrorPlayerSet(1, 8);
    gf_UserPlayerSet(2, 1);
    gf_MirrorPlayerSet(2, 9);
    gf_UserPlayerSet(3, 2);
    gf_MirrorPlayerSet(3, 10);
    gf_UserPlayerSet(4, 3);
    gf_MirrorPlayerSet(4, 11);
    gf_UserPlayerSet(5, 4);
    gf_MirrorPlayerSet(5, 12);
    gf_UserPlayerSet(6, 5);
    gf_MirrorPlayerSet(6, 13);
    gf_UserPlayerSet(7, 6);
    gf_MirrorPlayerSet(7, 14);
    gf_UserPlayerSet(8, 7);
    gf_MirrorPlayerSet(8, 15);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerInizialization_Init () {
    gt_PlayerInizialization = TriggerCreate("gt_PlayerInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: VenueInizialization
//--------------------------------------------------------------------------------------------------
bool gt_VenueInizialization_Func (bool testConds, bool runActions) {
    string auto480E4CF2_val;

    // Variable Declarations
    string lv_gameValue;

    // Variable Initialization
    lv_gameValue = GameAttributeGameValue("2");

    // Actions
    if (!runActions) {
        return true;
    }

    auto480E4CF2_val = lv_gameValue;
    if (auto480E4CF2_val == "0001") {
        gf_VenueInitialSet(RegionFromId(25), 1, 90.0);
        gf_VenueInitialSet(RegionFromId(27), 2, 270.0);
        gf_VenueInitialSet(RegionFromId(29), 3, 270.0);
        gf_VenueInitialSet(RegionFromId(31), 4, 90.0);
        gf_VenueInitialSet(RegionFromId(33), 5, 0.0);
        gf_VenueInitialSet(RegionFromId(34), 6, 180.0);
        gf_VenueInitialSet(RegionFromId(35), 7, 180.0);
        gf_VenueInitialSet(RegionFromId(36), 8, 0.0);
        gf_BonusVenueSet(RegionFromId(25), 1, 90.0);
        gf_BonusVenueSet(RegionFromId(29), 2, 270.0);
        gf_BonusVenueSet(RegionFromId(33), 3, 0.0);
        gf_BonusVenueSet(RegionFromId(35), 4, 180.0);
        gf_BonusVenueSet(RegionFromId(38), 5, 0.0);
        gf_BonusVenueSet(RegionFromId(39), 6, 180.0);
        gf_BonusVenueSet(RegionFromId(40), 7, 0.0);
        gf_BonusVenueSet(RegionFromId(41), 8, 180.0);
        gf_CreepPointSet(PointFromId(1622943121), 1);
        gf_CreepPointSet(PointFromId(9096037), 2);
        gf_CreepPointSet(PointFromId(914766699), 3);
        gf_CreepPointSet(PointFromId(2024075559), 4);
        gf_CreepPointSet(PointFromId(1413534366), 5);
        gf_CreepPointSet(PointFromId(775643380), 6);
        gf_CreepPointSet(PointFromId(1844541176), 7);
        gf_CreepPointSet(PointFromId(1335332667), 8);
    }
    else if (auto480E4CF2_val == "0002") {
        gf_VenueInitialSet(RegionFromId(25), 1, 90.0);
        gf_VenueInitialSet(RegionFromId(26), 2, 90.0);
        gf_PathingBlockerRemove(RegionFromId(26));
        gf_VenueInitialSet(RegionFromId(27), 3, 270.0);
        gf_VenueInitialSet(RegionFromId(28), 4, 270.0);
        gf_PathingBlockerRemove(RegionFromId(28));
        gf_VenueInitialSet(RegionFromId(29), 5, 270.0);
        gf_VenueInitialSet(RegionFromId(30), 6, 270.0);
        gf_PathingBlockerRemove(RegionFromId(30));
        gf_VenueInitialSet(RegionFromId(31), 7, 90.0);
        gf_VenueInitialSet(RegionFromId(32), 8, 90.0);
        gf_PathingBlockerRemove(RegionFromId(32));
        gf_PathingBlockerRemove(RegionFromId(42));
        gf_PathingBlockerRemove(RegionFromId(43));
        gf_PathingBlockerRemove(RegionFromId(44));
        gf_PathingBlockerRemove(RegionFromId(45));
        gf_BonusVenueSet(RegionFromId(25), 1, 90.0);
        gf_BonusVenueSet(RegionFromId(26), 2, 90.0);
        gf_BonusVenueSet(RegionFromId(29), 3, 270.0);
        gf_BonusVenueSet(RegionFromId(30), 4, 270.0);
        gf_BonusVenueSet(RegionFromId(33), 5, 0.0);
        gf_BonusVenueSet(RegionFromId(42), 6, 0.0);
        gf_BonusVenueSet(RegionFromId(35), 7, 180.0);
        gf_BonusVenueSet(RegionFromId(44), 8, 180.0);
        gf_CreepPointSet(PointFromId(1622943121), 1);
        gf_CreepPointSet(PointFromId(529173248), 2);
        gf_CreepPointSet(PointFromId(9096037), 3);
        gf_CreepPointSet(PointFromId(537789621), 4);
        gf_CreepPointSet(PointFromId(914766699), 5);
        gf_CreepPointSet(PointFromId(924364117), 6);
        gf_CreepPointSet(PointFromId(2024075559), 7);
        gf_CreepPointSet(PointFromId(478594730), 8);
    }
    else {
    }
    gf_BattlefieldSetAll(RegionFromId(37));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VenueInizialization_Init () {
    gt_VenueInizialization = TriggerCreate("gt_VenueInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BuidingRegionInizialization
//--------------------------------------------------------------------------------------------------
bool gt_BuidingRegionInizialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_BuildingRegionSet(RegionFromId(1), 1, 1);
    gf_BuildingRegionSet(RegionFromId(2), 1, 2);
    gf_BuildingRegionSet(RegionFromId(3), 1, 3);
    gf_BuildingRegionSet(RegionFromId(4), 2, 1);
    gf_BuildingRegionSet(RegionFromId(5), 2, 2);
    gf_BuildingRegionSet(RegionFromId(6), 2, 3);
    gf_BuildingRegionSet(RegionFromId(7), 3, 1);
    gf_BuildingRegionSet(RegionFromId(8), 3, 2);
    gf_BuildingRegionSet(RegionFromId(9), 3, 3);
    gf_BuildingRegionSet(RegionFromId(10), 4, 1);
    gf_BuildingRegionSet(RegionFromId(11), 4, 2);
    gf_BuildingRegionSet(RegionFromId(12), 4, 3);
    gf_BuildingRegionSet(RegionFromId(13), 5, 1);
    gf_BuildingRegionSet(RegionFromId(14), 5, 2);
    gf_BuildingRegionSet(RegionFromId(15), 5, 3);
    gf_BuildingRegionSet(RegionFromId(16), 6, 1);
    gf_BuildingRegionSet(RegionFromId(17), 6, 2);
    gf_BuildingRegionSet(RegionFromId(18), 6, 3);
    gf_BuildingRegionSet(RegionFromId(19), 7, 1);
    gf_BuildingRegionSet(RegionFromId(20), 7, 2);
    gf_BuildingRegionSet(RegionFromId(21), 7, 3);
    gf_BuildingRegionSet(RegionFromId(22), 8, 1);
    gf_BuildingRegionSet(RegionFromId(23), 8, 2);
    gf_BuildingRegionSet(RegionFromId(24), 8, 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuidingRegionInizialization_Init () {
    gt_BuidingRegionInizialization = TriggerCreate("gt_BuidingRegionInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PreviewerPointInizialization
//--------------------------------------------------------------------------------------------------
bool gt_PreviewerPointInizialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreviewerRegionSet(RegionFromId(46), 1, 1);
    gf_PreviewerRegionSet(RegionFromId(47), 1, 2);
    gf_PreviewerRegionSet(RegionFromId(48), 1, 3);
    gf_PreviewerRegionSet(RegionFromId(49), 2, 1);
    gf_PreviewerRegionSet(RegionFromId(50), 2, 2);
    gf_PreviewerRegionSet(RegionFromId(51), 2, 3);
    gf_PreviewerRegionSet(RegionFromId(52), 3, 1);
    gf_PreviewerRegionSet(RegionFromId(53), 3, 2);
    gf_PreviewerRegionSet(RegionFromId(54), 3, 3);
    gf_PreviewerRegionSet(RegionFromId(55), 4, 1);
    gf_PreviewerRegionSet(RegionFromId(56), 4, 2);
    gf_PreviewerRegionSet(RegionFromId(57), 4, 3);
    gf_PreviewerRegionSet(RegionFromId(58), 5, 1);
    gf_PreviewerRegionSet(RegionFromId(59), 5, 2);
    gf_PreviewerRegionSet(RegionFromId(60), 5, 3);
    gf_PreviewerRegionSet(RegionFromId(61), 6, 1);
    gf_PreviewerRegionSet(RegionFromId(62), 6, 2);
    gf_PreviewerRegionSet(RegionFromId(63), 6, 3);
    gf_PreviewerRegionSet(RegionFromId(64), 7, 1);
    gf_PreviewerRegionSet(RegionFromId(65), 7, 2);
    gf_PreviewerRegionSet(RegionFromId(66), 7, 3);
    gf_PreviewerRegionSet(RegionFromId(67), 8, 1);
    gf_PreviewerRegionSet(RegionFromId(68), 8, 2);
    gf_PreviewerRegionSet(RegionFromId(69), 8, 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PreviewerPointInizialization_Init () {
    gt_PreviewerPointInizialization = TriggerCreate("gt_PreviewerPointInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: RoundInitialization
//--------------------------------------------------------------------------------------------------
bool gt_RoundInitialization_Func (bool testConds, bool runActions) {
    string autoB7B0BFE0_val;

    // Variable Declarations
    string lv_gameValue;

    // Variable Initialization
    lv_gameValue = GameAttributeGameValue("2");

    // Actions
    if (!runActions) {
        return true;
    }

    autoB7B0BFE0_val = lv_gameValue;
    if (autoB7B0BFE0_val == "0001") {
        gf_RoundGoldSet(1, 750);
        gf_RoundGoldSet(2, 750);
        gf_RoundGoldSet(3, 750);
        gf_BonusRoundSet(true, 3);
        gf_RoundGoldSet(4, 1500);
        gf_RoundGoldSet(5, 1500);
        gf_RoundGoldSet(6, 1500);
        gf_RoundGoldSet(7, 1500);
        gf_BonusRoundSet(true, 7);
        gf_RoundGoldSet(8, 1500);
    }
    else if (autoB7B0BFE0_val == "0002") {
        gf_RoundGoldSet(1, 750);
        gf_RoundGoldSet(2, 750);
        gf_RoundGoldSet(3, 750);
        gf_BonusRoundSet(true, 3);
        gf_RoundGoldSet(4, 1500);
        gf_RoundGoldSet(5, 1500);
        gf_RoundGoldSet(6, 1500);
        gf_BonusRoundSet(true, 6);
        gf_RoundGoldSet(7, 1500);
    }
    else {
    }
    gf_SearchRadiusInFinalRoundSet(60.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoundInitialization_Init () {
    gt_RoundInitialization = TriggerCreate("gt_RoundInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????? - ???????????????
//--------------------------------------------------------------------------------------------------
bool gt_E69588E69E9CE58AA9E6898BE8A7A6E58F91E599A8E58AA8E4BD9C_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_source;
    unit lv_outer;
    unit lv_target;
    unit lv_origin;
    point lv_casterPoint;
    point lv_sourcePoint;
    point lv_outerPoint;
    point lv_targetPoint;
    point lv_originPoint;
    string lv_effect;
    string lv_pic;
    text lv_e5B8AEE58AA9E6A087E9A298;
    text lv_e5B8AEE58AA9E58685E5AEB9;
    text lv_e59B9EE8BDA6;

    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_source = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_outer = EventPlayerEffectUsedUnit(c_effectUnitOuter);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_origin = EventPlayerEffectUsedUnit(c_effectUnitOrigin);
    lv_casterPoint = EventPlayerEffectUsedPoint(c_effectLocationCasterPoint);
    lv_sourcePoint = EventPlayerEffectUsedPoint(c_effectLocationSourcePoint);
    lv_outerPoint = EventPlayerEffectUsedPoint(c_effectLocationOuterPoint);
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_originPoint = EventPlayerEffectUsedPoint(c_effectLocationOriginPoint);
    lv_effect = EventPlayerEffectUsed();
    lv_pic = "";
    lv_e5B8AEE58AA9E6A087E9A298 = StringToText((lv_effect));
    lv_e59B9EE8BDA6 = StringToText("<n/>");

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_caster != null)) {
        lv_pic = CatalogFieldValueGet(c_gameCatalogActor, (UnitGetType(lv_caster)), "UnitIcon", 0);
    }
    else {
        lv_pic = "Assets\\Textures\\btn-ability-protoss-cloakfield-color.dds";
    }
    lv_e5B8AEE58AA9E58685E5AEB9 = (lv_e5B8AEE58AA9E58685E5AEB9 + gf_E69588E69E9CE58AA9E6898BE79BB8E585B3E58D95E4BD8DE782B9E4BFA1E681AF(lv_caster, lv_casterPoint, 0) + lv_e59B9EE8BDA6);
    lv_e5B8AEE58AA9E58685E5AEB9 = (lv_e5B8AEE58AA9E58685E5AEB9 + gf_E69588E69E9CE58AA9E6898BE79BB8E585B3E58D95E4BD8DE782B9E4BFA1E681AF(lv_source, lv_sourcePoint, 1) + lv_e59B9EE8BDA6);
    lv_e5B8AEE58AA9E58685E5AEB9 = (lv_e5B8AEE58AA9E58685E5AEB9 + gf_E69588E69E9CE58AA9E6898BE79BB8E585B3E58D95E4BD8DE782B9E4BFA1E681AF(lv_outer, lv_outerPoint, 2) + lv_e59B9EE8BDA6);
    lv_e5B8AEE58AA9E58685E5AEB9 = (lv_e5B8AEE58AA9E58685E5AEB9 + gf_E69588E69E9CE58AA9E6898BE79BB8E585B3E58D95E4BD8DE782B9E4BFA1E681AF(lv_target, lv_targetPoint, 3) + lv_e59B9EE8BDA6);
    lv_e5B8AEE58AA9E58685E5AEB9 = (lv_e5B8AEE58AA9E58685E5AEB9 + gf_E69588E69E9CE58AA9E6898BE79BB8E585B3E58D95E4BD8DE782B9E4BFA1E681AF(lv_origin, lv_originPoint, 4));
    HelpPanelAddTip(PlayerGroupAll(), gf_E69588E69E9CE58AA9E6898BE5B8AEE58AA9E69687E69CACE6A087E9A298(lv_e5B8AEE58AA9E6A087E9A298), lv_e5B8AEE58AA9E58685E5AEB9, lv_e5B8AEE58AA9E6A087E9A298, lv_pic);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_E69588E69E9CE58AA9E6898BE8A7A6E58F91E599A8E58AA8E4BD9C_Init () {
    gt_E69588E69E9CE58AA9E6898BE8A7A6E58F91E599A8E58AA8E4BD9C = TriggerCreate("gt_E69588E69E9CE58AA9E6898BE8A7A6E58F91E599A8E58AA8E4BD9C_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????? - ?????????
//--------------------------------------------------------------------------------------------------
bool gt_E69588E69E9CE58AA9E6898BE5889DE5A78BE58C96_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE5898DE7BC80[(0)] = "\xE6\x96\xBD\xE6\xB3\x95";
    gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE5898DE7BC80[(1)] = "\xE6\xBA\x90";
    gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE5898DE7BC80[(2)] = "\xE5\xA4\x96\xE5\xB1\x82";
    gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE5898DE7BC80[(3)] = "\xE7\x9B\xAE\xE6\xA0\x87";
    gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE5898DE7BC80[(4)] = "\xE8\xB5\xB7\xE6\xBA\x90";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_E69588E69E9CE58AA9E6898BE5889DE5A78BE58C96_Init () {
    gt_E69588E69E9CE58AA9E6898BE5889DE5A78BE58C96 = TriggerCreate("gt_E69588E69E9CE58AA9E6898BE5889DE5A78BE58C96_Func");
    TriggerAddEventMapInit(gt_E69588E69E9CE58AA9E6898BE5889DE5A78BE58C96);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pillage
//--------------------------------------------------------------------------------------------------
bool gt_Pillage_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gf_MirrorPlayerGetUserPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_playerPropTerrazine, c_playerPropOperSubtract, CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "Asal", "DamageResponse.Cost.Resource[" + IntToString(2) + "]", gf_MirrorPlayerGetUserPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Pillage_Init () {
    gt_Pillage = TriggerCreate("gt_Pillage_Func");
    TriggerAddEventPlayerEffectUsed(gt_Pillage, c_playerAny, "AsalTriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adef - Defend - Init Register
//--------------------------------------------------------------------------------------------------
bool gt_AdefDefendInitRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_adefGroup, lv_unit) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GAw3_AddEventUnitDamaged(gt_AdefDefendDamaged, lv_unit, c_unitDamageTypeRanged, c_unitDamageNonFatal, null);
    UnitGroupAdd(gv_adefGroup, lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdefDefendInitRegister_Init () {
    gt_AdefDefendInitRegister = TriggerCreate("gt_AdefDefendInitRegister_Func");
    TriggerAddEventUnitBehaviorChange(gt_AdefDefendInitRegister, null, "Adef", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adef - Defend - Damaged
//--------------------------------------------------------------------------------------------------
bool gt_AdefDefendDamaged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_weapon;
    string lv_lM;
    string lv_atkType;
    fixed lv_triggerDamge;
    fixed lv_actualDamge;
    fixed lv_attemptedDamage;
    unit lv_footman;
    unit lv_source;
    unit lv_triggerAttaker;

    // Variable Initialization
    lv_weapon = ((EventUnitDamageEffect()));
    lv_lM = (((lv_weapon) + "LM"));
    lv_atkType = GAw3_WeaponAtkType(lv_weapon);
    lv_actualDamge = EventUnitDamageAmount();
    lv_attemptedDamage = EventUnitDamageAbsorbed();
    lv_footman = EventUnit();
    lv_source = EventUnitDamageSourceUnit();
    lv_triggerAttaker = lv_source;

    // Conditions
    if (testConds) {
        if (!((lv_actualDamge == 0.0))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_footman, "Adef") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(lv_source) == false)) {
        lv_triggerAttaker = lv_footman;
    }

    if (((lv_atkType == "DAMAGE_PIERCE") || (lv_atkType == "DAMAGE_CHAOS") || (lv_atkType == "DAMAGE_MAGIC") || (lv_atkType == "DAMAGE_SIEGE") || (lv_atkType == "spells"))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/E0FCBAD4"), true);
        if ((RandomFixed(0.0, 1.0) <= gv_adefDeflectChance)) {
            UnitCreateEffectUnit(lv_footman, "AdefVisualDummy", lv_footman);
            if ((lv_source != lv_footman) && (UnitTypeTestFlag(UnitGetType(lv_triggerAttaker), c_unitFlagPreventDefeat) == false)) {
                if ((CatalogEntryIsValid(c_gameCatalogEffect, lv_lM) == false)) {
                    lv_lM = ((lv_weapon));
                }

                UnitCreateEffectUnit(lv_footman, lv_lM, lv_source);
            }

        }
        else {
            lv_triggerDamge = (lv_attemptedDamage * gv_adefDamageTaken);
            UnitDamage(lv_triggerAttaker, "TriggerRangedDamge", lv_footman, lv_triggerDamge);
        }
    }
    else {
        lv_triggerDamge = lv_attemptedDamage;
        UnitDamage(lv_triggerAttaker, "TriggerRangedDamge", lv_footman, lv_triggerDamge);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdefDefendDamaged_Init () {
    gt_AdefDefendDamaged = TriggerCreate("gt_AdefDefendDamaged_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameAttributeInizialization
//--------------------------------------------------------------------------------------------------
bool gt_GameAttributeInizialization_Func (bool testConds, bool runActions) {
    string auto9F0FBC5E_val;
    int autoE3DC549D_ae;
    int autoE3DC549D_ai;

    // Variable Declarations
    int lv_round;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto9F0FBC5E_val = GameAttributeGameValue("2");
    if (auto9F0FBC5E_val == "0001") {
        gv_teamCount = 8;
    }
    else if (auto9F0FBC5E_val == "0002") {
        gv_teamCount = 4;
    }
    else {
    }
    gv_teamRoundCount = (gv_teamCount-1);
    gv_teamMemberCount = (gv_playerCount/gv_teamCount);
    gv_finalRoundCount = Log2I(gv_teamCount);
    gv_roundCount = (gv_playerCount-gv_teamMemberCount+gv_finalRoundCount);
    autoE3DC549D_ae = gv_finalRoundCount;
    autoE3DC549D_ai = 1;
    lv_round = 1;
    for ( ; ( (autoE3DC549D_ai >= 0 && lv_round <= autoE3DC549D_ae) || (autoE3DC549D_ai <= 0 && lv_round >= autoE3DC549D_ae) ) ; lv_round += autoE3DC549D_ai ) {
        gv_teamCountAlive[(gv_playerCount-gv_teamMemberCount+lv_round)] = (gv_teamCount/Pow2I(lv_round));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameAttributeInizialization_Init () {
    gt_GameAttributeInizialization = TriggerCreate("gt_GameAttributeInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AllianceInizialization
//--------------------------------------------------------------------------------------------------
bool gt_AllianceInizialization_Func (bool testConds, bool runActions) {
    int auto48CA2DB8_ae;
    int auto48CA2DB8_ai;
    int autoC1EE1A6B_ae;
    int autoC1EE1A6B_ai;
    int auto7C60CD92_ae;
    int auto7C60CD92_ai;

    // Variable Declarations
    int lv_team;
    int lv_teamMember;
    int lv_targetTeamMember;
    int lv_player;
    int lv_targetPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TeamAlianceSet(libNtve_ge_AllianceSetting_AllyWithSharedVision);
    auto48CA2DB8_ae = gv_teamCount;
    auto48CA2DB8_ai = 1;
    lv_team = 1;
    for ( ; ( (auto48CA2DB8_ai >= 0 && lv_team <= auto48CA2DB8_ae) || (auto48CA2DB8_ai <= 0 && lv_team >= auto48CA2DB8_ae) ) ; lv_team += auto48CA2DB8_ai ) {
        libNtve_gf_SetPlayerGroupAlliance(gv_mirrorTeamGroup[lv_team], libNtve_ge_AllianceSetting_AllyWithSharedVision);
        autoC1EE1A6B_ae = gv_teamMemberCount;
        autoC1EE1A6B_ai = 1;
        lv_teamMember = 1;
        for ( ; ( (autoC1EE1A6B_ai >= 0 && lv_teamMember <= autoC1EE1A6B_ae) || (autoC1EE1A6B_ai <= 0 && lv_teamMember >= autoC1EE1A6B_ae) ) ; lv_teamMember += autoC1EE1A6B_ai ) {
            PlayerSetColorIndex(PlayerGroupPlayer(gv_mirrorTeamGroup[lv_team], lv_teamMember), PlayerGetColorIndex(PlayerGroupPlayer(gv_teamGroup[lv_team], lv_teamMember), false), true);
            auto7C60CD92_ae = gv_teamMemberCount;
            auto7C60CD92_ai = 1;
            lv_targetTeamMember = 1;
            for ( ; ( (auto7C60CD92_ai >= 0 && lv_targetTeamMember <= auto7C60CD92_ae) || (auto7C60CD92_ai <= 0 && lv_targetTeamMember >= auto7C60CD92_ae) ) ; lv_targetTeamMember += auto7C60CD92_ai ) {
                libNtve_gf_SetAllianceOneWay(PlayerGroupPlayer(gv_mirrorTeamGroup[lv_team], lv_teamMember), PlayerGroupPlayer(gv_teamGroup[lv_team], lv_targetTeamMember), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
                libNtve_gf_SetAllianceOneWay(PlayerGroupPlayer(gv_teamGroup[lv_team], lv_teamMember), PlayerGroupPlayer(gv_mirrorTeamGroup[lv_team], lv_targetTeamMember), libNtve_ge_AllianceSetting_Ally);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AllianceInizialization_Init () {
    gt_AllianceInizialization = TriggerCreate("gt_AllianceInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ScoreBoardInizialization
//--------------------------------------------------------------------------------------------------
bool gt_ScoreBoardInizialization_Func (bool testConds, bool runActions) {
    int autoD8A44EDB_ae;
    int autoD8A44EDB_ai;
    int auto8541D2F5_ae;
    int auto8541D2F5_ai;
    int auto8AA98942_ae;
    int auto8AA98942_ai;

    // Variable Declarations
    int lv_column;
    int lv_row;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    BoardCreate(3, gv_playerCount, StringExternal("Param/Value/FF4A691A"), Color(100.00, 100.00, 100.00));
    gv_scoreBoard = BoardLastCreated();
    BoardSetGroupCount(gv_scoreBoard, gv_teamCount);
    BoardItemSetText(gv_scoreBoard, 1, c_boardRowHeader, StringExternal("Param/Value/4ED20226"));
    BoardItemSetText(gv_scoreBoard, 2, c_boardRowHeader, StringExternal("Param/Value/F553281E"));
    BoardItemSetText(gv_scoreBoard, 3, c_boardRowHeader, StringExternal("Param/Value/5430EF71"));
    autoD8A44EDB_ae = 3;
    autoD8A44EDB_ai = 1;
    lv_column = 1;
    for ( ; ( (autoD8A44EDB_ai >= 0 && lv_column <= autoD8A44EDB_ae) || (autoD8A44EDB_ai <= 0 && lv_column >= autoD8A44EDB_ae) ) ; lv_column += autoD8A44EDB_ai ) {
        BoardItemSetFontSize(gv_scoreBoard, lv_column, c_boardRowHeader, 20);
    }
    BoardSetPlayerColumn(gv_scoreBoard, 1, true);
    auto8541D2F5_ae = gv_playerCount;
    auto8541D2F5_ai = 1;
    lv_row = 1;
    for ( ; ( (auto8541D2F5_ai >= 0 && lv_row <= auto8541D2F5_ae) || (auto8541D2F5_ai <= 0 && lv_row >= auto8541D2F5_ae) ) ; lv_row += auto8541D2F5_ai ) {
        BoardPlayerAdd(gv_scoreBoard, gf_IndexGetUserPlayer(lv_row));
        BoardRowSetGroup(gv_scoreBoard, lv_row, gf_PlayerGetTeam(gf_IndexGetUserPlayer(lv_row)));
        auto8AA98942_ae = 3;
        auto8AA98942_ai = 1;
        lv_column = 1;
        for ( ; ( (auto8AA98942_ai >= 0 && lv_column <= auto8AA98942_ae) || (auto8AA98942_ai <= 0 && lv_column >= auto8AA98942_ae) ) ; lv_column += auto8AA98942_ai ) {
            if ((lv_column == 1)) {
                BoardItemSetFontSize(gv_scoreBoard, lv_column, lv_row, 20);
                BoardItemSetTextColor(gv_scoreBoard, lv_column, lv_row, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gf_IndexGetUserPlayer(lv_row), false)));
            }
            else if (((lv_column == 2) || (lv_column == 3))) {
                BoardItemSetFontSize(gv_scoreBoard, lv_column, lv_row, 16);
                BoardItemSetTextColor(gv_scoreBoard, lv_column, lv_row, Color(100.00, 100.00, 100.00));
                BoardItemSetProgressShow(gv_scoreBoard, lv_column, lv_row, true);
                BoardItemSetProgressColor(gv_scoreBoard, lv_column, lv_row, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gf_IndexGetUserPlayer(lv_row), false)), 1);
            }
        }
    }
    libNtve_gf_ShowHideLeaderboard(gv_scoreBoard, true, gv_uIPlayergroup);
    gf_BuildingScoreUpdate();
    gf_KillScoreUpdate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScoreBoardInizialization_Init () {
    gt_ScoreBoardInizialization = TriggerCreate("gt_ScoreBoardInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TimerInizialization
//--------------------------------------------------------------------------------------------------
bool gt_TimerInizialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TimerWindowCreate(gv_timer, StringExternal("Param/Value/CC74F765"), false, false);
    gv_timerWindow = TimerWindowLastCreated();
    TimerWindowSetTimer(gv_timerWindow, gv_timer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerInizialization_Init () {
    gt_TimerInizialization = TriggerCreate("gt_TimerInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlayerInizialization 2
//--------------------------------------------------------------------------------------------------
bool gt_PlayerInizialization2_Func (bool testConds, bool runActions) {
    int auto761CCEE3_ae;
    int auto761CCEE3_ai;
    int autoFE09AC3F_ae;
    int autoFE09AC3F_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto761CCEE3_ae = gv_playerCount;
    auto761CCEE3_ai = 1;
    lv_player = 1;
    for ( ; ( (auto761CCEE3_ai >= 0 && lv_player <= auto761CCEE3_ae) || (auto761CCEE3_ai <= 0 && lv_player >= auto761CCEE3_ae) ) ; lv_player += auto761CCEE3_ai ) {
        libGAwX_gf_SetPlayerUIRace(gf_IndexGetUserPlayer(lv_player), libGAwX_gf_GenerateRaceFromRaceAttribute(GameAttributePlayerValue("[bnet:War3 Extra (GA)/0.0/60618,file:Mods\\WarCraft\\WarCraftDataAbil.SC2Mod]1", gf_IndexGetUserPlayer(lv_player))));
        PlayerSetState(gf_IndexGetUserPlayer(lv_player), c_playerStateFoodIgnored, true);
        PlayerSetState(gf_IndexGetUserPlayer(lv_player), c_playerStateShowWorldTip, true);
        PlayerOptionOverride(gf_IndexGetUserPlayer(lv_player), "simplecommandcard", "0");
        PlayerOptionOverride(gf_IndexGetUserPlayer(lv_player), "buildgridhint", "1");
        PlayerOptionOverride(gf_IndexGetUserPlayer(lv_player), "gametooltips", "1");
        PlayerOptionOverride(gf_IndexGetUserPlayer(lv_player), "selectuncontrolable", "1");
        if ((PlayerType(gf_IndexGetUserPlayer(lv_player)) == c_playerTypeComputer)) {
            PlayerGroupAdd(gv_aIGroup, gf_IndexGetUserPlayer(lv_player));
        }

    }
    autoFE09AC3F_ae = gv_playerCount;
    autoFE09AC3F_ai = 1;
    lv_player = 1;
    for ( ; ( (autoFE09AC3F_ai >= 0 && lv_player <= autoFE09AC3F_ae) || (autoFE09AC3F_ai <= 0 && lv_player >= autoFE09AC3F_ae) ) ; lv_player += autoFE09AC3F_ai ) {
        AIStart(gf_UserPlayerGetMirrorPlayer(gf_IndexGetUserPlayer(lv_player)), false, 1000);
        TechTreeRequirementsEnable(gf_UserPlayerGetMirrorPlayer(gf_IndexGetUserPlayer(lv_player)), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerInizialization2_Init () {
    gt_PlayerInizialization2 = TriggerCreate("gt_PlayerInizialization2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DebugControlPressed
//--------------------------------------------------------------------------------------------------
bool gt_DebugControlPressed_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugControlPressed_Init () {
    gt_DebugControlPressed = TriggerCreate("gt_DebugControlPressed_Func");
    TriggerEnable(gt_DebugControlPressed, false);
    TriggerAddEventKeyPressed(gt_DebugControlPressed, c_playerAny, c_keyF5, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DebugKeyPressed
//--------------------------------------------------------------------------------------------------
bool gt_DebugKeyPressed_Func (bool testConds, bool runActions) {
    int auto150A4D6C_val;

    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    auto150A4D6C_val = EventKeyPressed();
    if (auto150A4D6C_val == c_keyF7) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "hpea", c_unitCreateIgnorePlacement, lv_player, PlayerStartLocation(lv_player));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ewsp", c_unitCreateIgnorePlacement, lv_player, PlayerStartLocation(lv_player));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "opeo", c_unitCreateIgnorePlacement, lv_player, PlayerStartLocation(lv_player));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "uaco", c_unitCreateIgnorePlacement, lv_player, PlayerStartLocation(lv_player));
        PlayerModifyPropertyInt(lv_player, c_playerPropTerrazine, c_playerPropOperSetTo, 100000);
        PlayerModifyPropertyInt(lv_player, c_playerPropCustom, c_playerPropOperSetTo, 100000);
        PlayerGroupClear(gv_aIGroup);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugKeyPressed_Init () {
    gt_DebugKeyPressed = TriggerCreate("gt_DebugKeyPressed_Func");
    TriggerEnable(gt_DebugKeyPressed, false);
    TriggerAddEventKeyPressed(gt_DebugKeyPressed, c_playerAny, c_keyNone, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DebugUnitRemove
//--------------------------------------------------------------------------------------------------
bool gt_DebugUnitRemove_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroupSelected(EventPlayer()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugUnitRemove_Init () {
    gt_DebugUnitRemove = TriggerCreate("gt_DebugUnitRemove_Func");
    TriggerEnable(gt_DebugUnitRemove, false);
    TriggerAddEventKeyPressed(gt_DebugUnitRemove, c_playerAny, c_keyR, true, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitDied
//--------------------------------------------------------------------------------------------------
bool gt_UnitDied_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(libNtve_gf_KillingUnit()) == true)) {
        if (((UnitFilterMatch(libNtve_gf_KillingUnit(), libNtve_gf_KillingPlayer(), gv_unitFilter) == true) || (UnitFilterMatch(libNtve_gf_KillingUnit(), libNtve_gf_KillingPlayer(), gv_creepFilter) == true))) {
            if ((UnitFilterMatch(libNtve_gf_KillingUnit(), libNtve_gf_KillingPlayer(), gv_creepFilter) == false)) {
                gf_KillScoreAndKillGoldAdd(gf_MirrorPlayerGetUserPlayer(libNtve_gf_KillingPlayer()), UnitGetType(EventUnit()));
            }
            else {
                PlayerModifyPropertyInt(libNtve_gf_KillingPlayer(), c_playerPropTerrazine, c_playerPropOperSubtract, gf_UnitTypeGetKillGold(UnitGetType(EventUnit())));
            }
        }

    }
    else {
        gf_KillScoreAndKillGoldAdd(gf_MirrorPlayerGetUserPlayer(libNtve_gf_KillingPlayer()), UnitGetType(EventUnit()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitDied_Init () {
    gt_UnitDied = TriggerCreate("gt_UnitDied_Func");
    TriggerEnable(gt_UnitDied, false);
    TriggerAddEventUnitDied(gt_UnitDied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CountUnit
//--------------------------------------------------------------------------------------------------
bool gt_CountUnit_Func (bool testConds, bool runActions) {
    int autoD1AF6FDF_ae;
    int autoD1AF6FDF_ai;
    int auto0EB56AF9_ae;
    int auto0EB56AF9_ai;
    int autoD4451BCD_ae;
    int autoD4451BCD_ai;
    int auto8FFB6130_ae;
    int auto8FFB6130_ai;
    int auto5081DC90_ae;
    int auto5081DC90_ai;
    int auto5372DDC0_ae;
    int auto5372DDC0_ai;
    int autoF540BA74_ae;
    int autoF540BA74_ai;

    // Variable Declarations
    unit lv_unit;
    int lv_player;
    int lv_team;
    int lv_teamMember;
    int[gv_teamMaximumCount + 1] lv_teamMemberCountAlive;
    int lv_teamCountAlive;
    int[gv_teamMaximumCount + 1] lv_teamAlive;
    bool lv_wait;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoD1AF6FDF_ae = gv_teamCount;
    autoD1AF6FDF_ai = 1;
    lv_team = 1;
    for ( ; ( (autoD1AF6FDF_ai >= 0 && lv_team <= autoD1AF6FDF_ae) || (autoD1AF6FDF_ai <= 0 && lv_team >= autoD1AF6FDF_ae) ) ; lv_team += autoD1AF6FDF_ai ) {
        auto0EB56AF9_ae = gv_teamMemberCount;
        auto0EB56AF9_ai = 1;
        lv_teamMember = 1;
        for ( ; ( (auto0EB56AF9_ai >= 0 && lv_teamMember <= auto0EB56AF9_ae) || (auto0EB56AF9_ai <= 0 && lv_teamMember >= auto0EB56AF9_ae) ) ; lv_teamMember += auto0EB56AF9_ai ) {
            lv_player = PlayerGroupPlayer(gv_teamGroup[lv_team], lv_teamMember);
            if ((UnitGroupCount(UnitGroup(null, lv_player, gv_battlefield, gv_phalanxFilter, 0), c_unitCountAlive) > 0)) {
                lv_teamMemberCountAlive[lv_team] += 1;
            }

        }
    }
    autoD4451BCD_ae = gv_teamCount;
    autoD4451BCD_ai = 1;
    lv_team = 1;
    for ( ; ( (autoD4451BCD_ai >= 0 && lv_team <= autoD4451BCD_ae) || (autoD4451BCD_ai <= 0 && lv_team >= autoD4451BCD_ae) ) ; lv_team += autoD4451BCD_ai ) {
        if ((lv_teamMemberCountAlive[lv_team] > 0)) {
            lv_teamCountAlive += 1;
            lv_teamAlive[lv_teamCountAlive] = lv_team;
        }

    }
    if ((lv_teamCountAlive == gv_teamCountAlive[gv_round])) {
        auto8FFB6130_ae = gv_teamMaximumCount;
        auto8FFB6130_ai = 1;
        lv_team = 1;
        for ( ; ( (auto8FFB6130_ai >= 0 && lv_team <= auto8FFB6130_ae) || (auto8FFB6130_ai <= 0 && lv_team >= auto8FFB6130_ae) ) ; lv_team += auto8FFB6130_ai ) {
            gv_teamAlive[lv_team] = 0;
        }
        auto5081DC90_ae = lv_teamCountAlive;
        auto5081DC90_ai = 1;
        lv_team = 1;
        for ( ; ( (auto5081DC90_ai >= 0 && lv_team <= auto5081DC90_ae) || (auto5081DC90_ai <= 0 && lv_team >= auto5081DC90_ae) ) ; lv_team += auto5081DC90_ai ) {
            gv_teamAlive[lv_team] = lv_teamAlive[lv_team];
        }
        gf_DisplayMessageAll(gv_round);
        if ((gf_IsFinalRound(gv_round) == true)) {
            lv_wait = false;
            gf_ScoreBoardRowColorUpdate(gv_round);
        }
        else {
            lv_wait = true;
        }
        if ((gv_round == gv_roundCount)) {
            auto5372DDC0_ae = lv_teamCountAlive;
            auto5372DDC0_ai = 1;
            lv_team = 1;
            for ( ; ( (auto5372DDC0_ai >= 0 && lv_team <= auto5372DDC0_ae) || (auto5372DDC0_ai <= 0 && lv_team >= auto5372DDC0_ae) ) ; lv_team += auto5372DDC0_ai ) {
                gf_GameOver(lv_teamAlive[lv_team]);
            }
        }
        else {
            autoF540BA74_ae = lv_teamCountAlive;
            autoF540BA74_ai = 1;
            lv_team = 1;
            for ( ; ( (autoF540BA74_ai >= 0 && lv_team <= autoF540BA74_ae) || (autoF540BA74_ai <= 0 && lv_team >= autoF540BA74_ae) ) ; lv_team += autoF540BA74_ai ) {
                gf_CountUnitEnable(false);
                gf_CountUnit(lv_teamAlive[lv_team], lv_wait);
            }
            TriggerExecute(gt_CountUnitControl, true, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CountUnit_Init () {
    gt_CountUnit = TriggerCreate("gt_CountUnit_Func");
    TriggerEnable(gt_CountUnit, false);
    TriggerAddEventPlayerEffectUsed(gt_CountUnit, c_playerAny, "CountUnitTriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CountUnitControl
//--------------------------------------------------------------------------------------------------
bool gt_CountUnitControl_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CountUnitControl_Init () {
    gt_CountUnitControl = TriggerCreate("gt_CountUnitControl_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreateReserveUnit
//--------------------------------------------------------------------------------------------------
bool gt_CreateReserveUnit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ReserveUnitCreation(EventPlayerEffectUsedUnit(c_effectUnitCaster), EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), gv_customValuePhalanx)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateReserveUnit_Init () {
    gt_CreateReserveUnit = TriggerCreate("gt_CreateReserveUnit_Func");
    TriggerEnable(gt_CreateReserveUnit, false);
    TriggerAddEventPlayerEffectUsed(gt_CreateReserveUnit, c_playerAny, "CreateReserveUnitTriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: IssueOrderPeriodic
//--------------------------------------------------------------------------------------------------
bool gt_IssueOrderPeriodic_Func (bool testConds, bool runActions) {
    unitgroup auto05F565B2_g;
    int auto05F565B2_u;

    // Variable Declarations
    unit lv_unit;
    unit lv_targetUnit;
    unitgroup lv_targetUnitgroup;
    point lv_targetPoint;
    fixed lv_range;
    fixed lv_radius;
    region lv_region;

    // Variable Initialization
    lv_targetUnitgroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto05F565B2_g = UnitGroup(null, c_playerAny, gv_battlefield, gv_unitFilter, 0);
    auto05F565B2_u = 1;
    for ( ; auto05F565B2_u <= UnitGroupCount(auto05F565B2_g, c_unitCountAll) ; auto05F565B2_u += BoolToInt(lv_unit == UnitGroupUnit(auto05F565B2_g, auto05F565B2_u)) ) {
        lv_unit = UnitGroupUnit(auto05F565B2_g, auto05F565B2_u);
        lv_targetUnit = null;
        lv_targetPoint = null;
        UnitGroupClear(lv_targetUnitgroup);
        if ((gv_round > (gv_roundCount-gv_finalRoundCount))) {
            lv_region = RegionCircle(UnitGetPosition(lv_unit), gv_searchRadiusInFinalRound);
        }
        else {
            lv_region = gv_battlefield;
        }
        lv_targetUnitgroup = UnitGroupAlliance(UnitGetOwner(lv_unit), c_unitAllianceEnemy, lv_region, gv_unitAndCreepFilter, 0);
        while ((UnitGroupCount(lv_targetUnitgroup, c_unitCountAlive) > 0)) {
            lv_targetUnit = UnitGroupClosestToPoint(lv_targetUnitgroup, UnitGetPosition(lv_unit));
            if (true) {
                lv_targetPoint = UnitGetPosition(lv_targetUnit);
                break;
            }
            else {
                UnitGroupRemove(lv_targetUnitgroup, lv_targetUnit);
            }
        }
        if ((lv_targetPoint != null)) {
            lv_range = UnitWeaponRange(lv_unit, 1);
            if ((lv_range > 3.9062)) {
                lv_radius = (UnitWeaponRange(lv_unit, 1)+UnitGetPropertyFixed(lv_unit, c_unitPropRadius, c_unitPropNormal)+UnitGetPropertyFixed(lv_targetUnit, c_unitPropRadius, c_unitPropNormal));
            }
            else {
                lv_radius = (3.9062+UnitGetPropertyFixed(lv_unit, c_unitPropRadius, c_unitPropNormal)+UnitGetPropertyFixed(lv_targetUnit, c_unitPropRadius, c_unitPropNormal));
            }
            if ((RegionContainsPoint(RegionCircle(lv_targetPoint, lv_radius), UnitGetPosition(lv_unit)) == false)) {
                UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("Amov", 3), libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, UnitWeaponRange(lv_unit, 1), UnitGetPosition(lv_unit))), c_orderQueueReplace);
            }

        }
        else {
            UnitIssueOrder(lv_unit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IssueOrderPeriodic_Init () {
    gt_IssueOrderPeriodic = TriggerCreate("gt_IssueOrderPeriodic_Func");
    TriggerEnable(gt_IssueOrderPeriodic, false);
    TriggerAddEventTimePeriodic(gt_IssueOrderPeriodic, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PhalanxCreated
//--------------------------------------------------------------------------------------------------
bool gt_PhalanxCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_behavior;
    string lv_ability;
    int lv_player;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(EventUnitCreatedUnit()) == true) && (UnitFilterMatch(EventUnitCreatedUnit(), lv_player, gv_phalanxFilter) == true)) {
        gv_phalanxIndex[lv_player] += 1;
        UnitSetCustomValue(EventUnitCreatedUnit(), gv_customValuePhalanx, gv_phalanxIndex[lv_player]);
        UnitSetFacing(EventUnitCreatedUnit(), gf_PointGetVenueFacing(UnitGetPosition(EventUnitCreatedUnit())), 0.0);
        gv_previewer[lv_player][gv_phalanxIndex[lv_player]] = EventUnitCreatedUnit();
        gf_PreviewUpdate(lv_player, gv_phalanxIndex[lv_player]);
        gv_phalanx[lv_player][gv_phalanxIndex[lv_player]] = EventUnitCreatedUnit();
        gf_PhalanxBuffSet(EventUnitCreatedUnit(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PhalanxCreated_Init () {
    gt_PhalanxCreated = TriggerCreate("gt_PhalanxCreated_Func");
    TriggerEnable(gt_PhalanxCreated, false);
    TriggerAddEventUnitCreated(gt_PhalanxCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PortalCreated
//--------------------------------------------------------------------------------------------------
bool gt_PortalCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(EventUnitCreatedUnit()) == true) && (UnitFilterMatch(EventUnitCreatedUnit(), lv_player, gv_portalFilter) == true)) {
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PortalCreated_Init () {
    gt_PortalCreated = TriggerCreate("gt_PortalCreated_Func");
    TriggerEnable(gt_PortalCreated, false);
    TriggerAddEventUnitCreated(gt_PortalCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PhalanxBuffChange
//--------------------------------------------------------------------------------------------------
bool gt_PhalanxBuffChange_Func (bool testConds, bool runActions) {
    int autoF6C3F961_val;

    // Variable Declarations
    int lv_player;
    int lv_phalanx;
    int lv_change;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());
    lv_phalanx = FixedToInt(UnitGetCustomValue(EventUnit(), gv_customValuePhalanx));
    lv_change = EventUnitBehaviorChange();

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), lv_player, gv_phalanxFilter) == true))) {
            return false;
        }

        if (!((gf_BehaviorIsPhalanxBuff(EventUnitBehavior()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF6C3F961_val = lv_change;
    if (autoF6C3F961_val == c_unitBehaviorChangeActivate) {
        gv_phalanxBuff[lv_player][lv_phalanx] = EventUnitBehavior();
    }
    else if (autoF6C3F961_val == c_unitBehaviorChangeDeactivate) {
        gv_phalanxBuff[lv_player][lv_phalanx] = null;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PhalanxBuffChange_Init () {
    gt_PhalanxBuffChange = TriggerCreate("gt_PhalanxBuffChange_Func");
    TriggerAddEventUnitBehaviorChange(gt_PhalanxBuffChange, null, null, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_PhalanxBuffChange, null, null, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BuildingCreated
//--------------------------------------------------------------------------------------------------
bool gt_BuildingCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_abil;
    unit lv_unit;

    // Variable Initialization
    lv_abil = EventUnitCreatedAbil();
    lv_unit = EventUnitCreatedUnit();

    // Conditions
    if (testConds) {
        if (!((AbilityClass(lv_abil) == c_classIdCAbilBuild))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetFacing(lv_unit, 270.0, 0.0);
    Wait(gv_minimumPeriod, c_timeGame);
    gf_UnitTypeSet(gf_PointInBuildingRegionGetBuildingRegion(UnitGetPosition(lv_unit)), gf_PointInBuildingRegionGetPhalanx(UnitGetPosition(lv_unit)));
    gf_PreviewUpdate(gv_playerAtBuildingRegion[gf_PointInBuildingRegionGetBuildingRegion(UnitGetPosition(lv_unit))], gf_PointInBuildingRegionGetPhalanx(UnitGetPosition(lv_unit)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildingCreated_Init () {
    gt_BuildingCreated = TriggerCreate("gt_BuildingCreated_Func");
    TriggerEnable(gt_BuildingCreated, false);
    TriggerAddEventUnitCreated(gt_BuildingCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitAbilityMorph
//--------------------------------------------------------------------------------------------------
bool gt_UnitAbilityMorph_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_abil;
    unit lv_unit;

    // Variable Initialization
    lv_abil = AbilityCommandGetAbility(EventUnitAbility());
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(gv_minimumPeriod, c_timeGame);
    gf_UnitTypeSet(gf_PointInBuildingRegionGetBuildingRegion(UnitGetPosition(lv_unit)), gf_PointInBuildingRegionGetPhalanx(UnitGetPosition(lv_unit)));
    gf_PreviewUpdate(gv_playerAtBuildingRegion[gf_PointInBuildingRegionGetBuildingRegion(UnitGetPosition(lv_unit))], gf_PointInBuildingRegionGetPhalanx(UnitGetPosition(lv_unit)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitAbilityMorph_Init () {
    gt_UnitAbilityMorph = TriggerCreate("gt_UnitAbilityMorph_Func");
    TriggerEnable(gt_UnitAbilityMorph, false);
    TriggerAddEventUnitAbility(gt_UnitAbilityMorph, null, null, c_abilMorphStageAbilsEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlayerLeft
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeft_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_aIGroup, EventPlayer());
    TextExpressionSetToken("Param/Expression/084A8C97", "A", TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
    UIDisplayMessage(gv_uIPlayergroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/084A8C97"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeft_Init () {
    gt_PlayerLeft = TriggerCreate("gt_PlayerLeft_Func");
    TriggerAddEventPlayerLeft(gt_PlayerLeft, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitChangeOwner2
//--------------------------------------------------------------------------------------------------
bool gt_UnitChangeOwner2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ReserveUnitCreation2(EventUnitOwnerOld(), FixedToInt(UnitGetCustomValue(EventUnit(), gv_customValuePhalanx)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitChangeOwner2_Init () {
    gt_UnitChangeOwner2 = TriggerCreate("gt_UnitChangeOwner2_Func");
    TriggerEnable(gt_UnitChangeOwner2, false);
    TriggerAddEventUnitChangeOwner(gt_UnitChangeOwner2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitDied2
//--------------------------------------------------------------------------------------------------
bool gt_UnitDied2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ReserveUnitCreation2(EventPlayer(), FixedToInt(UnitGetCustomValue(EventUnit(), gv_customValuePhalanx)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitDied2_Init () {
    gt_UnitDied2 = TriggerCreate("gt_UnitDied2_Func");
    TriggerEnable(gt_UnitDied2, false);
    TriggerAddEventUnitDied(gt_UnitDied2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_MapInizialization_Init();
    gt_PlayerInizialization_Init();
    gt_VenueInizialization_Init();
    gt_BuidingRegionInizialization_Init();
    gt_PreviewerPointInizialization_Init();
    gt_RoundInitialization_Init();
    gt_E69588E69E9CE58AA9E6898BE8A7A6E58F91E599A8E58AA8E4BD9C_Init();
    gt_E69588E69E9CE58AA9E6898BE5889DE5A78BE58C96_Init();
    gt_Pillage_Init();
    gt_AdefDefendInitRegister_Init();
    gt_AdefDefendDamaged_Init();
    gt_GameAttributeInizialization_Init();
    gt_AllianceInizialization_Init();
    gt_ScoreBoardInizialization_Init();
    gt_TimerInizialization_Init();
    gt_PlayerInizialization2_Init();
    gt_DebugControlPressed_Init();
    gt_DebugKeyPressed_Init();
    gt_DebugUnitRemove_Init();
    gt_UnitDied_Init();
    gt_CountUnit_Init();
    gt_CountUnitControl_Init();
    gt_CreateReserveUnit_Init();
    gt_IssueOrderPeriodic_Init();
    gt_PhalanxCreated_Init();
    gt_PortalCreated_Init();
    gt_PhalanxBuffChange_Init();
    gt_BuildingCreated_Init();
    gt_UnitAbilityMorph_Init();
    gt_PlayerLeft_Init();
    gt_UnitChangeOwner2_Init();
    gt_UnitDied2_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
