//==================================================================================================
// 
// Generated Map Script
// 
// Name:   ?????????
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "LibGAw3"
include "LibGAwX"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libGAw3_InitLib();
    libGAwX_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const fixed gv_minimumPeriod = 0.0625;
const int gv_customValuePhalanx = 1;
const string gv_unitTypeUserType = "ArmyTypeData";
const string gv_phalanxUserType = "PhalanxData";
const string gv_portalUserType = "PortalData";
const string gv_phalanxBuffUserType = "PhalanxBuffData";
const string gv_creepUnitTypeUserType = "CreepUnitTypeData";
const int gv_unitMaximumCountPerPhalanx = 72;
const int gv_portalMaximumCount = 2;
const int gv_phalanxMaximumCount = 3;
const int gv_venueMaximumCount = 8;
const int gv_roundMaximumCount = 10;
const int gv_teamRoundMaximumCount = 7;
const int gv_teamMemberMaximumCount = 2;
const int gv_teamMaximumCount = 8;
const int gv_playerCount = 8;
const int gv_playerMaximumIndex = 15;
const int gv_venueGroupMaximumCount = (gv_teamMaximumCount/2);

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
fixed gv_adefDamageTaken;
fixed gv_adefDeflectChance;
unitgroup gv_adefGroup;
int[gv_playerCount + 1] gv_userPlayer;
int[gv_playerCount + 1] gv_mirrorPlayer;
int gv_teamCount;
int gv_teamMemberCount;
int gv_teamRoundCount;
int gv_roundCount;
playergroup[gv_teamMaximumCount + 1] gv_teamGroup;
playergroup[gv_teamMaximumCount + 1] gv_mirrorTeamGroup;
region[gv_venueMaximumCount + 1] gv_venue;
fixed[gv_venueMaximumCount + 1] gv_venueFacing;
revealer[gv_venueMaximumCount + 1][gv_playerMaximumIndex + 1] gv_venueRevealer;
region[gv_venueMaximumCount + 1] gv_bonusVenue;
fixed[gv_venueMaximumCount + 1] gv_bonusVenueFacing;
revealer[gv_venueMaximumCount + 1][gv_playerMaximumIndex + 1] gv_bonusVenueRevealer;
region[gv_venueMaximumCount + 1] gv_venueInitial;
fixed[gv_venueMaximumCount + 1] gv_venueInitialFacing;
revealer[gv_venueMaximumCount + 1][gv_playerMaximumIndex + 1] gv_venueInitialRevealer;
region[gv_playerCount + 1][gv_phalanxMaximumCount + 1] gv_buildingRegion;
revealer[gv_playerMaximumIndex + 1][gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1] gv_buildingRegionRevealer;
revealer[gv_playerMaximumIndex + 1][gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1] gv_previewRegionRevealer;
int[gv_venueMaximumCount + 1][gv_teamRoundMaximumCount + 1] gv_teamAtVenue;
int[gv_venueMaximumCount + 1][gv_roundMaximumCount + 1] gv_playerAtVenue;
int[gv_venueMaximumCount + 1][gv_roundMaximumCount + 1] gv_creepPlayerAtVenue;
int[gv_playerCount + 1] gv_playerAtBuildingRegion;
string[gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1][gv_unitMaximumCountPerPhalanx + 1] gv_unitType;
int[gv_playerMaximumIndex + 1] gv_phalanxIndex;
actor[gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1][gv_unitMaximumCountPerPhalanx + 1] gv_previewModel;
unit[gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1] gv_previewer;
region[gv_playerCount + 1][gv_phalanxMaximumCount + 1] gv_previewRegion;
revealer[gv_playerMaximumIndex + 1] gv_battlefieldRevealer;
region gv_battlefield;
timer gv_timer;
int gv_timerWindow;
int[gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1] gv_reserveUnitIndex;
int[gv_playerMaximumIndex + 1] gv_killScore;
int[gv_playerMaximumIndex + 1] gv_buildingScore;
int gv_scoreBoard;
int[gv_roundMaximumCount + 1] gv_roundGold;
bool[gv_roundMaximumCount + 1] gv_bonusRoundIsOn;
int[gv_teamRoundMaximumCount + 1] gv_teamRoundRandomized;
int[gv_venueGroupMaximumCount + 1][gv_teamRoundMaximumCount + 1] gv_venueGroupRandomized;
point[gv_venueMaximumCount + 1] gv_creepPoint;
string[gv_venueMaximumCount + 1][gv_roundMaximumCount + 1] gv_creepUnitType;
playergroup gv_aIGroup;
int[gv_teamMaximumCount + 1] gv_teamAlive;
int[gv_roundMaximumCount + 1] gv_teamCountAlive;
int[gv_venueMaximumCount + 1][gv_roundMaximumCount + 1] gv_playerAtFinalVenue;
int gv_round;
int gv_finalRoundCount;
bool gv_testPassed;
fixed gv_searchRadiusInFinalRound;
unit[gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1] gv_phalanx;
string[gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1] gv_phalanxBuff;
playergroup gv_uIPlayergroup;
unitfilter gv_workerFilter;
unitfilter gv_phalanxFilter;
unitfilter gv_portalFilter;
unitfilter gv_buildingFilter;
unitfilter gv_creepFilter;
unitfilter gv_unitFilter;
unitfilter gv_unitAndCreepFilter;
unitfilter gv_pathBlockerFilter;

void InitGlobals () {
    int init_i;

    gv_adefDamageTaken = 0.5;
    gv_adefDeflectChance = 0.3;
    gv_adefGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= gv_teamMaximumCount; init_i += 1) {
        gv_teamGroup[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= gv_teamMaximumCount; init_i += 1) {
        gv_mirrorTeamGroup[init_i] = PlayerGroupEmpty();
    }
    gv_timer = TimerCreate();
    gv_timerWindow = c_timerWindowNone;
    gv_scoreBoard = c_boardNone;
    gv_aIGroup = PlayerGroupEmpty();
    for (init_i = 0; init_i <= gv_roundMaximumCount; init_i += 1) {
        gv_teamCountAlive[init_i] = 1;
    }
    gv_testPassed = true;
    gv_uIPlayergroup = PlayerGroupActive();
    gv_workerFilter = UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    gv_phalanxFilter = UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    gv_portalFilter = UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    gv_buildingFilter = UnitFilter(0, (1 << (c_targetFilterRadar - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    gv_creepFilter = UnitFilter(0, (1 << (c_targetFilterMapBoss - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    gv_unitFilter = UnitFilter(0, 0, (1 << c_targetFilterHover) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32)));
    gv_unitAndCreepFilter = UnitFilter(0, 0, (1 << c_targetFilterHover) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    gv_pathBlockerFilter = UnitFilter((1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
int gf_PlayerGetTeam (int lp_player);
void gf_ModInizialization (bool lp_debug);
void gf_RoundStartLoop (bool lp_debug);
void gf_RoundStart (int lp_round, bool lp_bonusRound, bool lp_debug);
void gf_TeamMemberSetAndTeamMemberCountSet ();
void gf_TeamRoundRandomize ();
void gf_VenueGroupRandomize ();
void gf_TeamAtVenueSet (bool lp_debug);
void gf_PlayerAtVenueSet (bool lp_debug);
void gf_PlayerCountTest ();
void gf_GameOverTestNotPassed ();
void gf_DebugEnable (bool lp_option);
void gf_KillScoreAndKillGoldAdd (int lp_player, string lp_unitType);
void gf_KillScoreUpdate ();
void gf_ScoreBoardRowColorUpdate (int lp_round);
void gf_ScoreBoardSetName (int lp_round, bool lp_bonusRound);
void gf_BuildingScoreUpdate ();
void gf_StartLocationCameraPan ();
void gf_VenueCameraPan (int lp_round);
bool gf_PlayerIsAlive (int lp_player, int lp_round);
void gf_CountUnitEnable (bool lp_option);
void gf_CountUnit (int lp_team, bool lp_wait);
void gf_GameOver (int lp_team);
void gf_DisplayMessageAll (int lp_round);
void gf_PlayerAtFinalVenueSet (int lp_round);
void gf_ReserveUnitIndexResetAll ();
void gf_ReserveUnitCreationEnable (bool lp_option);
void gf_ReserveUnitCreation (unit lp_unit, int lp_player, int lp_phalanx);
void gf_SearchRadiusInFinalRoundSet (fixed lp_radius);
void gf_TimerSet (fixed lp_duration, bool lp_debug);
void gf_AIPhalanxAndPortalPositionAll (int lp_round);
void gf_AIPhalanxBuffSetAll (int lp_round);
void gf_AIPhalanxAndPortalPosition (int lp_player, region lp_region, string lp_unitType, string lp_userType, unitfilter lp_unitFilter, int lp_count);
void gf_AIBuildingPosition ();
void gf_UnitPositionAll ();
void gf_UnitOrPreviewModelPosition (unit lp_unit, bool lp_preview);
void gf_CreepPosition (int lp_round);
void gf_UnitCreate (int lp_player, point lp_point, string lp_unitType, unit lp_unit);
bool gf_BehaviorIsPhalanxBuff (string lp_behavior);
void gf_PhalanxCounterEnable (bool lp_reset, bool lp_option);
void gf_PhalanxBuffSet (unit lp_unit, bool lp_preview);
void gf_PreviewUpdateAll ();
void gf_PreviewUpdate (int lp_player, int lp_phalanx);
void gf_PreviewerRegionSet (region lp_region, int lp_index, int lp_phalanx);
void gf_PreviewerRemoveAll ();
void gf_PreviewerAtBuildingRegionPositionAll ();
void gf_PreviewEnable (bool lp_option);
void gf_PreviewModelCreate (int lp_player, point lp_point, string lp_unitType, unit lp_unit);
void gf_UnitTypeSetAll ();
void gf_UnitTypeReset (int lp_player, int lp_phalanx);
void gf_UnitTypeSet (int lp_buildingRegion, int lp_phalanx);
void gf_CreepUnitTypeSetAll ();
int gf_PointInBuildingRegionGetBuildingRegion (point lp_point);
int gf_PointInBuildingRegionGetPhalanx (point lp_point);
void gf_PhalanxPlaceholderPositionAll ();
void gf_BuildingRegionSet (region lp_region, int lp_index, int lp_phalanx);
void gf_PlayerAtBuildingRegionSet ();
void gf_BuildingRegionRevealerEnable (bool lp_option, bool lp_debug);
bool gf_RegionContainsPointWithOffset (point lp_point, region lp_region, int lp_x, int lp_y);
void gf_CreepPointSet (point lp_point, int lp_index);
void gf_VenueInitialSet (region lp_region, int lp_index, fixed lp_facing);
void gf_BonusVenueSet (region lp_region, int lp_index, fixed lp_facing);
void gf_VenueRevealerEnable (int lp_round, bool lp_option);
void gf_BonusVenueReplace ();
void gf_VenueInitialReplace ();
void gf_PathingBlockerRemove (region lp_region);
void gf_ValidRegionFillHidden ();
void gf_BattlefieldSetAll (region lp_region);
void gf_BattlefieldRevealerEnable (bool lp_option);
void gf_BattlefieldReset ();
bool gf_IsFinalRound (int lp_round);
void gf_RoundGoldSet (int lp_round, int lp_value);
void gf_BonusRoundSet (bool lp_on, int lp_round);
void gf_GoldAdd (int lp_round);
void gf_UserPlayerSet (int lp_index, int lp_player);
void gf_TeamAlianceSet (int lp_option);
void gf_MirrorPlayerSet (int lp_index, int lp_player);
int gf_UnitTypeGetKillGold (string lp_unitType);
fixed gf_PointGetVenueFacing (point lp_point);
int gf_UnitTypeGetPhalanxCapacity (string lp_unitType);
string gf_RaceGetPhalanxType (string lp_race);
int gf_MirrorPlayerGetUserPlayer (int lp_player);
int gf_UserPlayerGetMirrorPlayer (int lp_player);
int gf_IndexGetUserPlayer (int lp_index);
region gf_IndexGetVenue (int lp_index);
void gf_ReserveUnitCreation2 (int lp_player, int lp_phalanx);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_MapInizialization;
trigger gt_PlayerInizialization;
trigger gt_VenueInizialization;
trigger gt_BuidingRegionInizialization;
trigger gt_PreviewerPointInizialization;
trigger gt_RoundInitialization;
trigger gt_Pillage;
trigger gt_AdefDefendInitRegister;
trigger gt_AdefDefendDamaged;
trigger gt_GameAttributeInizialization;
trigger gt_AllianceInizialization;
trigger gt_ScoreBoardInizialization;
trigger gt_TimerInizialization;
trigger gt_PlayerInizialization2;
trigger gt_DebugControlPressed;
trigger gt_DebugKeyPressed;
trigger gt_DebugUnitRemove;
trigger gt_UnitDied;
trigger gt_CountUnit;
trigger gt_CountUnitControl;
trigger gt_CreateReserveUnit;
trigger gt_IssueOrderPeriodic;
trigger gt_PhalanxCreated;
trigger gt_PortalCreated;
trigger gt_PhalanxBuffChange;
trigger gt_BuildingCreated;
trigger gt_UnitAbilityMorph;
trigger gt_PlayerLeft;
trigger gt_UnitChangeOwner2;
trigger gt_UnitDied2;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
int gf_PlayerGetTeam (int lp_player) {
    int autoBC80928B_ae;
    int autoBC80928B_ai;

    // Variable Declarations
    int lv_team;
    int lv_teamReturn;

    // Variable Initialization

    // Implementation
    autoBC80928B_ae = gv_teamCount;
    autoBC80928B_ai = 1;
    lv_team = 1;
    for ( ; ( (autoBC80928B_ai >= 0 && lv_team <= autoBC80928B_ae) || (autoBC80928B_ai <= 0 && lv_team >= autoBC80928B_ae) ) ; lv_team += autoBC80928B_ai ) {
        if ((PlayerGroupHasPlayer(gv_teamGroup[lv_team], lp_player) == true)) {
            lv_teamReturn = lv_team;
            break;
        }

    }
    return lv_teamReturn;
}

void gf_ModInizialization (bool lp_debug) {
    bool autoD83C5A64_val;

    // Implementation
    TriggerEnable(libGAw3_gt_ChangeOwerFromCreep, false);
    TriggerEnable(libGAw3_gt_ChangeOwerToCreep, false);
    TriggerEnable(libGAwX_gt_AdefDefendInitRegister, false);
    UISetResourceTradingAllowed(c_resourceTypeMinerals, false);
    UISetResourceTradingAllowed(c_resourceTypeVespene, false);
    UISetResourceTradingAllowed(c_resourceTypeTerrazine, false);
    UISetResourceTradingAllowed(c_resourceTypeCustom, false);
    TriggerExecute(gt_GameAttributeInizialization, true, false);
    if ((lp_debug == true)) {
        gf_DebugEnable(true);
    }
    else {
        gf_DebugEnable(false);
    }
    gf_TeamMemberSetAndTeamMemberCountSet();
    gf_PlayerCountTest();
    autoD83C5A64_val = gv_testPassed;
    if (autoD83C5A64_val == false) {
        gf_GameOverTestNotPassed();
    }
    else if (autoD83C5A64_val == true) {
        TriggerExecute(gt_AllianceInizialization, true, false);
        gf_PlayerAtVenueSet(lp_debug);
        TriggerExecute(gt_ScoreBoardInizialization, true, false);
        TriggerExecute(gt_TimerInizialization, true, false);
        TriggerExecute(gt_PlayerInizialization2, true, false);
        gf_PlayerAtBuildingRegionSet();
        gf_PhalanxPlaceholderPositionAll();
        gf_CreepUnitTypeSetAll();
        gf_ValidRegionFillHidden();
    }
    else {
    }
}

void gf_RoundStartLoop (bool lp_debug) {
    int autoD5795DE2_ae;
    int autoD5795DE2_ai;

    // Variable Declarations
    int lv_round;

    // Variable Initialization

    // Implementation
    if ((gv_testPassed == true)) {
        autoD5795DE2_ae = gv_roundCount;
        autoD5795DE2_ai = 1;
        lv_round = 1;
        for ( ; ( (autoD5795DE2_ai >= 0 && lv_round <= autoD5795DE2_ae) || (autoD5795DE2_ai <= 0 && lv_round >= autoD5795DE2_ae) ) ; lv_round += autoD5795DE2_ai ) {
            if ((lp_debug == true)) {
                lv_round = 1;
            }

            gf_VenueInitialReplace();
            gf_RoundStart(lv_round, false, lp_debug);
            if ((gv_bonusRoundIsOn[lv_round] == true)) {
                gf_BonusVenueReplace();
                gf_RoundStart(lv_round, true, lp_debug);
            }

        }
    }

}

void gf_RoundStart (int lp_round, bool lp_bonusRound, bool lp_debug) {
    // Implementation
    gv_round = lp_round;
    gf_BattlefieldReset();
    gf_BattlefieldRevealerEnable(false);
    gf_ScoreBoardSetName(lp_round, lp_bonusRound);
    if ((lp_round > (gv_roundCount-gv_finalRoundCount+1))) {
        gf_PlayerAtFinalVenueSet(lp_round);
    }
    else {
        gf_GoldAdd(lp_round);
        gf_BuildingRegionRevealerEnable(true, lp_debug);
        gf_PreviewEnable(true);
        gf_StartLocationCameraPan();
        gf_TimerSet((30.0+lp_round*5), lp_debug);
        gf_AIBuildingPosition();
        gf_BuildingRegionRevealerEnable(false, lp_debug);
        gf_PreviewEnable(false);
        gf_UnitTypeSetAll();
    }
    gf_VenueRevealerEnable(lp_round, true);
    gf_PhalanxCounterEnable(true, true);
    gf_VenueCameraPan(lp_round);
    gf_TimerSet((30.0), lp_debug);
    gf_AIPhalanxAndPortalPositionAll(lp_round);
    gf_PhalanxCounterEnable(false, false);
    gf_AIPhalanxBuffSetAll(lp_round);
    gf_VenueRevealerEnable(lp_round, false);
    gf_UnitPositionAll();
    if ((lp_bonusRound == true)) {
        gf_CreepPosition(lp_round);
    }

    gf_BattlefieldRevealerEnable(true);
    gf_PreviewerAtBuildingRegionPositionAll();
    gf_PreviewUpdateAll();
    gf_ReserveUnitCreationEnable(true);
    gf_CountUnitEnable(true);
    TriggerWaitForTrigger(gt_CountUnitControl, false);
    gf_ReserveUnitCreationEnable(false);
    Wait(2.0, c_timeGame);
}

void gf_TeamMemberSetAndTeamMemberCountSet () {
    int auto95AB7508_ae;
    int auto95AB7508_ai;
    int auto6B04DAFD_ae;
    int auto6B04DAFD_ai;
    int auto6D04020E_ae;
    int auto6D04020E_ai;
    int auto9EB29196_ae;
    int auto9EB29196_ai;
    int autoDD3737E4_ae;
    int autoDD3737E4_ai;
    int auto0D642B7C_ae;
    int auto0D642B7C_ai;

    // Variable Declarations
    int lv_player;
    int lv_team;
    int lv_teamMember;
    bool lv_virtualTeam;

    // Variable Initialization

    // Implementation
    auto95AB7508_ae = gv_teamCount;
    auto95AB7508_ai = 1;
    lv_team = 1;
    for ( ; ( (auto95AB7508_ai >= 0 && lv_team <= auto95AB7508_ae) || (auto95AB7508_ai <= 0 && lv_team >= auto95AB7508_ae) ) ; lv_team += auto95AB7508_ai ) {
        auto6B04DAFD_ae = gv_teamMemberCount;
        auto6B04DAFD_ai = 1;
        lv_teamMember = 1;
        for ( ; ( (auto6B04DAFD_ai >= 0 && lv_teamMember <= auto6B04DAFD_ae) || (auto6B04DAFD_ai <= 0 && lv_teamMember >= auto6B04DAFD_ae) ) ; lv_teamMember += auto6B04DAFD_ai ) {
            if ((PlayerGroupPlayer(GameAttributePlayersForTeam(lv_team), lv_teamMember) == -1)) {
                lv_virtualTeam = true;
            }

        }
    }
    lv_team = 0;
    lv_teamMember = 0;
    if ((lv_virtualTeam == false)) {
        auto6D04020E_ae = gv_teamCount;
        auto6D04020E_ai = 1;
        lv_team = 1;
        for ( ; ( (auto6D04020E_ai >= 0 && lv_team <= auto6D04020E_ae) || (auto6D04020E_ai <= 0 && lv_team >= auto6D04020E_ae) ) ; lv_team += auto6D04020E_ai ) {
            auto9EB29196_ae = gv_teamMemberCount;
            auto9EB29196_ai = 1;
            lv_teamMember = 1;
            for ( ; ( (auto9EB29196_ai >= 0 && lv_teamMember <= auto9EB29196_ae) || (auto9EB29196_ai <= 0 && lv_teamMember >= auto9EB29196_ae) ) ; lv_teamMember += auto9EB29196_ai ) {
                if ((PlayerGroupCount(GameAttributePlayersForTeam(lv_team)) == gv_teamMemberCount)) {
                    PlayerGroupAdd(gv_teamGroup[lv_team], PlayerGroupPlayer(GameAttributePlayersForTeam(lv_team), lv_teamMember));
                    PlayerGroupAdd(gv_mirrorTeamGroup[lv_team], gf_UserPlayerGetMirrorPlayer(PlayerGroupPlayer(GameAttributePlayersForTeam(lv_team), lv_teamMember)));
                }
                else {
                    gv_testPassed = false;
                }
            }
        }
    }
    else {
        autoDD3737E4_ae = gv_teamCount;
        autoDD3737E4_ai = 1;
        lv_team = 1;
        for ( ; ( (autoDD3737E4_ai >= 0 && lv_team <= autoDD3737E4_ae) || (autoDD3737E4_ai <= 0 && lv_team >= autoDD3737E4_ae) ) ; lv_team += autoDD3737E4_ai ) {
            auto0D642B7C_ae = gv_teamMemberCount;
            auto0D642B7C_ai = 1;
            lv_teamMember = 1;
            for ( ; ( (auto0D642B7C_ai >= 0 && lv_teamMember <= auto0D642B7C_ae) || (auto0D642B7C_ai <= 0 && lv_teamMember >= auto0D642B7C_ae) ) ; lv_teamMember += auto0D642B7C_ai ) {
                lv_player += 1;
                PlayerGroupAdd(gv_teamGroup[lv_team], gf_IndexGetUserPlayer(lv_player));
                PlayerGroupAdd(gv_mirrorTeamGroup[lv_team], gf_UserPlayerGetMirrorPlayer(gf_IndexGetUserPlayer(lv_player)));
            }
        }
    }
}

void gf_TeamRoundRandomize () {
    int autoA9A8E1AB_ae;
    int autoA9A8E1AB_ai;
    int autoBB5640AD_ae;
    int autoBB5640AD_ai;
    int autoC7BDBA83_ae;
    int autoC7BDBA83_ai;

    // Variable Declarations
    int lv_r1;
    int lv_r2;
    bool lv_repeated;
    int[gv_teamRoundMaximumCount + 1] lv_roundRandomized;

    // Variable Initialization

    // Implementation
    autoA9A8E1AB_ae = gv_teamRoundCount;
    autoA9A8E1AB_ai = 1;
    lv_r1 = 1;
    for ( ; ( (autoA9A8E1AB_ai >= 0 && lv_r1 <= autoA9A8E1AB_ae) || (autoA9A8E1AB_ai <= 0 && lv_r1 >= autoA9A8E1AB_ae) ) ; lv_r1 += autoA9A8E1AB_ai ) {
        gv_teamRoundRandomized[lv_r1] = 0;
    }
    autoBB5640AD_ae = gv_teamRoundCount;
    autoBB5640AD_ai = 1;
    lv_r1 = 1;
    for ( ; ( (autoBB5640AD_ai >= 0 && lv_r1 <= autoBB5640AD_ae) || (autoBB5640AD_ai <= 0 && lv_r1 >= autoBB5640AD_ae) ) ; lv_r1 += autoBB5640AD_ai ) {
        while (true) {
            lv_roundRandomized[lv_r1] = RandomInt(1, gv_teamRoundCount);
            lv_repeated = false;
            autoC7BDBA83_ae = gv_teamRoundCount;
            autoC7BDBA83_ai = 1;
            lv_r2 = 1;
            for ( ; ( (autoC7BDBA83_ai >= 0 && lv_r2 <= autoC7BDBA83_ae) || (autoC7BDBA83_ai <= 0 && lv_r2 >= autoC7BDBA83_ae) ) ; lv_r2 += autoC7BDBA83_ai ) {
                if ((lv_roundRandomized[lv_r1] == gv_teamRoundRandomized[lv_r2])) {
                    lv_repeated = true;
                }

            }
            if ((lv_repeated == false)) {
                gv_teamRoundRandomized[lv_r1] = lv_roundRandomized[lv_r1];
                break;
            }

        }
    }
}

void gf_VenueGroupRandomize () {
    int autoEB43FB5F_ae;
    int autoEB43FB5F_ai;
    int auto2992198F_ae;
    int auto2992198F_ai;
    int auto2DE80734_ae;
    int auto2DE80734_ai;
    int auto7D5F6288_ae;
    int auto7D5F6288_ai;
    int autoE4AF328C_ae;
    int autoE4AF328C_ai;

    // Variable Declarations
    int lv_g1;
    int lv_g2;
    bool lv_repeated;
    int[gv_venueGroupMaximumCount + 1] lv_venueGroupRandomized;
    int lv_round;

    // Variable Initialization

    // Implementation
    autoEB43FB5F_ae = gv_teamRoundCount;
    autoEB43FB5F_ai = 1;
    lv_round = 1;
    for ( ; ( (autoEB43FB5F_ai >= 0 && lv_round <= autoEB43FB5F_ae) || (autoEB43FB5F_ai <= 0 && lv_round >= autoEB43FB5F_ae) ) ; lv_round += autoEB43FB5F_ai ) {
        auto2992198F_ae = (gv_teamCount/2);
        auto2992198F_ai = 1;
        lv_g1 = 1;
        for ( ; ( (auto2992198F_ai >= 0 && lv_g1 <= auto2992198F_ae) || (auto2992198F_ai <= 0 && lv_g1 >= auto2992198F_ae) ) ; lv_g1 += auto2992198F_ai ) {
            gv_venueGroupRandomized[lv_g1][lv_round] = 0;
        }
    }
    auto2DE80734_ae = gv_teamRoundCount;
    auto2DE80734_ai = 1;
    lv_round = 1;
    for ( ; ( (auto2DE80734_ai >= 0 && lv_round <= auto2DE80734_ae) || (auto2DE80734_ai <= 0 && lv_round >= auto2DE80734_ae) ) ; lv_round += auto2DE80734_ai ) {
        auto7D5F6288_ae = (gv_teamCount/2);
        auto7D5F6288_ai = 1;
        lv_g1 = 1;
        for ( ; ( (auto7D5F6288_ai >= 0 && lv_g1 <= auto7D5F6288_ae) || (auto7D5F6288_ai <= 0 && lv_g1 >= auto7D5F6288_ae) ) ; lv_g1 += auto7D5F6288_ai ) {
            while (true) {
                lv_venueGroupRandomized[lv_g1] = RandomInt(1, (gv_teamCount/2));
                lv_repeated = false;
                autoE4AF328C_ae = gv_venueGroupMaximumCount;
                autoE4AF328C_ai = 1;
                lv_g2 = 1;
                for ( ; ( (autoE4AF328C_ai >= 0 && lv_g2 <= autoE4AF328C_ae) || (autoE4AF328C_ai <= 0 && lv_g2 >= autoE4AF328C_ae) ) ; lv_g2 += autoE4AF328C_ai ) {
                    if ((lv_venueGroupRandomized[lv_g1] == gv_venueGroupRandomized[lv_g2][lv_round])) {
                        lv_repeated = true;
                    }

                }
                if ((lv_repeated == false)) {
                    gv_venueGroupRandomized[lv_g1][lv_round] = lv_venueGroupRandomized[lv_g1];
                    break;
                }

            }
        }
    }
}

void gf_TeamAtVenueSet (bool lp_debug) {
    int auto37152BEE_ae;
    int auto37152BEE_ai;
    int auto2016259D_ae;
    int auto2016259D_ai;
    int auto95634F20_ae;
    int auto95634F20_ai;
    int autoD6198E6D_ae;
    int autoD6198E6D_ai;

    // Variable Declarations
    int lv_team;
    int lv_teamMember;
    int lv_round;
    int lv_venueGroup;
    int lv_cycle;
    int[gv_venueMaximumCount + 1] lv_teamCompetitor;

    // Variable Initialization
    lv_cycle = 1;

    // Implementation
    gf_TeamRoundRandomize();
    gf_VenueGroupRandomize();
    auto37152BEE_ae = gv_teamRoundCount;
    auto37152BEE_ai = 1;
    lv_round = 1;
    for ( ; ( (auto37152BEE_ai >= 0 && lv_round <= auto37152BEE_ae) || (auto37152BEE_ai <= 0 && lv_round >= auto37152BEE_ae) ) ; lv_round += auto37152BEE_ai ) {
        auto2016259D_ae = (gv_teamCount/2);
        auto2016259D_ai = 1;
        lv_team = 1;
        for ( ; ( (auto2016259D_ai >= 0 && lv_team <= auto2016259D_ae) || (auto2016259D_ai <= 0 && lv_team >= auto2016259D_ae) ) ; lv_team += auto2016259D_ai ) {
            if ((lv_team == 1)) {
                lv_teamCompetitor[lv_team] = 1;
            }
            else {
                if (lv_cycle >= gv_teamCount) {
                    lv_cycle = 2;
                }
                else {
                    lv_cycle = lv_cycle + 1;
                }
                lv_teamCompetitor[lv_team] = lv_cycle;
            }
        }
        auto95634F20_ae = (gv_teamCount/2+1);
        auto95634F20_ai = -1;
        lv_team = gv_teamCount;
        for ( ; ( (auto95634F20_ai >= 0 && lv_team <= auto95634F20_ae) || (auto95634F20_ai <= 0 && lv_team >= auto95634F20_ae) ) ; lv_team += auto95634F20_ai ) {
            if (lv_cycle >= gv_teamCount) {
                lv_cycle = 2;
            }
            else {
                lv_cycle = lv_cycle + 1;
            }
            lv_teamCompetitor[lv_team] = lv_cycle;
        }
        lv_venueGroup = 0;
        autoD6198E6D_ae = gv_teamCount;
        autoD6198E6D_ai = 1;
        lv_team = 1;
        for ( ; ( (autoD6198E6D_ai >= 0 && lv_team <= autoD6198E6D_ae) || (autoD6198E6D_ai <= 0 && lv_team >= autoD6198E6D_ae) ) ; lv_team += autoD6198E6D_ai ) {
            if ((ModI(lv_team, 2) == 1)) {
                lv_venueGroup += 1;
                if ((lp_debug == false)) {
                    gv_teamAtVenue[lv_team][gv_teamRoundRandomized[lv_round]] = lv_teamCompetitor[gv_venueGroupRandomized[lv_venueGroup][lv_round]];
                }
                else {
                    gv_teamAtVenue[lv_team][lv_round] = lv_teamCompetitor[lv_venueGroup];
                }
            }
            else {
                if ((lp_debug == false)) {
                    gv_teamAtVenue[lv_team][gv_teamRoundRandomized[lv_round]] = lv_teamCompetitor[(gv_venueGroupRandomized[lv_venueGroup][lv_round]+gv_teamCount/2)];
                }
                else {
                    gv_teamAtVenue[lv_team][lv_round] = lv_teamCompetitor[(lv_venueGroup+gv_teamCount/2)];
                }
            }
        }
        lv_cycle -= 1;
    }
}

void gf_PlayerAtVenueSet (bool lp_debug) {
    int autoA0B7181F_ae;
    int autoA0B7181F_ai;
    int auto033FEB3E_ae;
    int auto033FEB3E_ai;
    int auto16722873_ae;
    int auto16722873_ai;
    int auto30871C92_ae;
    int auto30871C92_ai;

    // Variable Declarations
    int lv_creepTeam;
    int lv_team;
    int lv_teamMember;
    int lv_round;
    int lv_teamRound;
    int lv_venue;

    // Variable Initialization

    // Implementation
    lv_creepTeam = RandomInt(1, (gv_teamCount-1));
    autoA0B7181F_ae = gv_roundCount;
    autoA0B7181F_ai = 1;
    lv_round = 1;
    for ( ; ( (autoA0B7181F_ai >= 0 && lv_round <= autoA0B7181F_ae) || (autoA0B7181F_ai <= 0 && lv_round >= autoA0B7181F_ae) ) ; lv_round += autoA0B7181F_ai ) {
        if (lv_teamRound >= gv_teamRoundCount) {
            lv_teamRound = 1;
        }
        else {
            lv_teamRound = lv_teamRound + 1;
        }
        if ((lv_teamRound == 1)) {
            gf_TeamAtVenueSet(lp_debug);
        }

        auto033FEB3E_ae = gv_teamCount;
        auto033FEB3E_ai = 1;
        lv_team = 1;
        for ( ; ( (auto033FEB3E_ai >= 0 && lv_team <= auto033FEB3E_ae) || (auto033FEB3E_ai <= 0 && lv_team >= auto033FEB3E_ae) ) ; lv_team += auto033FEB3E_ai ) {
            if (lv_creepTeam >= gv_teamCount) {
                lv_creepTeam = 1;
            }
            else {
                lv_creepTeam = lv_creepTeam + 1;
            }
            auto16722873_ae = gv_teamMemberCount;
            auto16722873_ai = 1;
            lv_teamMember = 1;
            for ( ; ( (auto16722873_ai >= 0 && lv_teamMember <= auto16722873_ae) || (auto16722873_ai <= 0 && lv_teamMember >= auto16722873_ae) ) ; lv_teamMember += auto16722873_ai ) {
                if (lv_venue >= gv_venueMaximumCount) {
                    lv_venue = 1;
                }
                else {
                    lv_venue = lv_venue + 1;
                }
                gv_playerAtVenue[lv_venue][lv_round] = PlayerGroupPlayer(gv_teamGroup[gv_teamAtVenue[lv_team][lv_teamRound]], lv_teamMember);
                gv_creepPlayerAtVenue[lv_venue][lv_round] = PlayerGroupPlayer(gv_teamGroup[gv_teamAtVenue[lv_creepTeam][lv_teamRound]], lv_teamMember);
            }
        }
    }
    auto30871C92_ae = gv_roundCount;
    auto30871C92_ai = 1;
    lv_round = 1;
    for ( ; ( (auto30871C92_ai >= 0 && lv_round <= auto30871C92_ae) || (auto30871C92_ai <= 0 && lv_round >= auto30871C92_ae) ) ; lv_round += auto30871C92_ai ) {
        if ((gv_bonusRoundIsOn[lv_round] == true)) {
        }

    }
}

void gf_PlayerCountTest () {
    int auto142701A9_ae;
    int auto142701A9_ai;

    // Variable Declarations
    int lv_player;
    int lv_playerCount;

    // Variable Initialization

    // Implementation
    auto142701A9_ae = gv_playerCount;
    auto142701A9_ai = 1;
    lv_player = 1;
    for ( ; ( (auto142701A9_ai >= 0 && lv_player <= auto142701A9_ae) || (auto142701A9_ai <= 0 && lv_player >= auto142701A9_ae) ) ; lv_player += auto142701A9_ai ) {
        if (((PlayerType(gf_IndexGetUserPlayer(lv_player)) == c_playerTypeUser) || (PlayerType(gf_IndexGetUserPlayer(lv_player)) == c_playerTypeComputer))) {
            lv_playerCount += 1;
        }

    }
    if ((lv_playerCount != gv_playerCount)) {
        gv_testPassed = false;
    }

}

void gf_GameOverTestNotPassed () {
    int autoA0735C0D_ae;
    int autoA0735C0D_ai;

    // Variable Declarations
    int lv_player;
    int lv_time;

    // Variable Initialization
    lv_time = 10;

    // Implementation
    TextExpressionSetToken("Param/Expression/2571A5B3", "A", IntToText(gv_playerCount));
    TextExpressionSetToken("Param/Expression/2571A5B3", "B", IntToText(gv_teamMemberCount));
    TextExpressionSetToken("Param/Expression/2571A5B3", "C", IntToText(lv_time));
    UIDisplayMessage(gv_uIPlayergroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/2571A5B3"));
    Wait(lv_time, c_timeGame);
    autoA0735C0D_ae = gv_playerCount;
    autoA0735C0D_ai = 1;
    lv_player = 1;
    for ( ; ( (autoA0735C0D_ai >= 0 && lv_player <= autoA0735C0D_ae) || (autoA0735C0D_ai <= 0 && lv_player >= autoA0735C0D_ae) ) ; lv_player += autoA0735C0D_ai ) {
        GameOver(gf_IndexGetUserPlayer(lv_player), c_gameOverTie, true, true);
    }
}

void gf_DebugEnable (bool lp_option) {
    // Variable Declarations
    int lv_player;
    int lv_team;

    // Variable Initialization

    // Implementation
    TriggerEnable(gt_DebugControlPressed, lp_option);
    TriggerEnable(gt_DebugKeyPressed, lp_option);
    TriggerEnable(gt_DebugUnitRemove, lp_option);
}

void gf_KillScoreAndKillGoldAdd (int lp_player, string lp_unitType) {
    // Implementation
    PlayerModifyPropertyInt(lp_player, c_playerPropTerrazine, c_playerPropOperAdd, gf_UnitTypeGetKillGold(lp_unitType));
    gv_killScore[lp_player] += gf_UnitTypeGetKillGold(lp_unitType);
    gf_KillScoreUpdate();
}

void gf_KillScoreUpdate () {
    int autoA5F3871C_ae;
    int autoA5F3871C_ai;
    int autoAA5D0725_ae;
    int autoAA5D0725_ai;

    // Variable Declarations
    int lv_maximumScore;
    int lv_row;
    int lv_column;
    color lv_color;

    // Variable Initialization
    lv_column = 3;
    lv_color = Color(0,0,0);

    // Implementation
    autoA5F3871C_ae = gv_playerCount;
    autoA5F3871C_ai = 1;
    lv_row = 1;
    for ( ; ( (autoA5F3871C_ai >= 0 && lv_row <= autoA5F3871C_ae) || (autoA5F3871C_ai <= 0 && lv_row >= autoA5F3871C_ae) ) ; lv_row += autoA5F3871C_ai ) {
        if ((gv_killScore[gf_IndexGetUserPlayer(lv_row)] >= lv_maximumScore)) {
            lv_maximumScore = gv_killScore[gf_IndexGetUserPlayer(lv_row)];
        }

    }
    autoAA5D0725_ae = gv_playerCount;
    autoAA5D0725_ai = 1;
    lv_row = 1;
    for ( ; ( (autoAA5D0725_ai >= 0 && lv_row <= autoAA5D0725_ae) || (autoAA5D0725_ai <= 0 && lv_row >= autoAA5D0725_ae) ) ; lv_row += autoAA5D0725_ai ) {
        BoardItemSetText(gv_scoreBoard, lv_column, lv_row, IntToText(gv_killScore[gf_IndexGetUserPlayer(lv_row)]));
        BoardItemSetProgressValue(gv_scoreBoard, lv_column, lv_row, gv_killScore[gf_IndexGetUserPlayer(lv_row)]);
        BoardItemSetProgressRange(gv_scoreBoard, lv_column, lv_row, 0.0, lv_maximumScore);
    }
}

void gf_ScoreBoardRowColorUpdate (int lp_round) {
    int auto7ACF05BF_ae;
    int auto7ACF05BF_ai;

    // Variable Declarations
    int lv_row;
    color lv_color;

    // Variable Initialization
    lv_color = Color(0,0,0);

    // Implementation
    auto7ACF05BF_ae = gv_playerCount;
    auto7ACF05BF_ai = 1;
    lv_row = 1;
    for ( ; ( (auto7ACF05BF_ai >= 0 && lv_row <= auto7ACF05BF_ae) || (auto7ACF05BF_ai <= 0 && lv_row >= auto7ACF05BF_ae) ) ; lv_row += auto7ACF05BF_ai ) {
        if ((gf_PlayerIsAlive(gf_IndexGetUserPlayer(lv_row), lp_round) == true)) {
            lv_color = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gf_IndexGetUserPlayer(lv_row), false));
        }
        else {
            lv_color = Color(0,0,0);
        }
        BoardItemSetProgressColor(gv_scoreBoard, 2, lv_row, lv_color, 1);
        BoardItemSetProgressColor(gv_scoreBoard, 3, lv_row, lv_color, 1);
    }
}

void gf_ScoreBoardSetName (int lp_round, bool lp_bonusRound) {
    // Variable Declarations
    text lv_text;

    // Variable Initialization

    // Implementation
    if ((lp_bonusRound == false)) {
        if ((gf_IsFinalRound(lp_round) == false)) {
            TextExpressionSetToken("Param/Expression/406164B1", "A", IntToText(lp_round));
            lv_text = TextExpressionAssemble("Param/Expression/406164B1");
        }
        else {
            lv_text = TextExpressionAssemble("Param/Expression/BF933866");
        }
    }
    else {
        TextExpressionSetToken("Param/Expression/61AEEFC9", "A", IntToText(lp_round));
        lv_text = TextExpressionAssemble("Param/Expression/61AEEFC9");
    }
    BoardSetName(gv_scoreBoard, lv_text, Color(100.00, 100.00, 100.00));
}

void gf_BuildingScoreUpdate () {
    int auto47128A6D_ae;
    int auto47128A6D_ai;
    int auto1D72404A_ae;
    int auto1D72404A_ai;

    // Variable Declarations
    int lv_maximumScore;
    int lv_row;
    int lv_column;

    // Variable Initialization
    lv_column = 2;

    // Implementation
    auto47128A6D_ae = gv_playerCount;
    auto47128A6D_ai = 1;
    lv_row = 1;
    for ( ; ( (auto47128A6D_ai >= 0 && lv_row <= auto47128A6D_ae) || (auto47128A6D_ai <= 0 && lv_row >= auto47128A6D_ae) ) ; lv_row += auto47128A6D_ai ) {
        if ((gv_buildingScore[gf_IndexGetUserPlayer(lv_row)] >= lv_maximumScore)) {
            lv_maximumScore = gv_buildingScore[gf_IndexGetUserPlayer(lv_row)];
        }

    }
    auto1D72404A_ae = gv_playerCount;
    auto1D72404A_ai = 1;
    lv_row = 1;
    for ( ; ( (auto1D72404A_ai >= 0 && lv_row <= auto1D72404A_ae) || (auto1D72404A_ai <= 0 && lv_row >= auto1D72404A_ae) ) ; lv_row += auto1D72404A_ai ) {
        BoardItemSetText(gv_scoreBoard, lv_column, lv_row, IntToText(gv_buildingScore[gf_IndexGetUserPlayer(lv_row)]));
        BoardItemSetProgressValue(gv_scoreBoard, lv_column, lv_row, gv_buildingScore[gf_IndexGetUserPlayer(lv_row)]);
        BoardItemSetProgressRange(gv_scoreBoard, lv_column, lv_row, 0.0, lv_maximumScore);
    }
}

void gf_StartLocationCameraPan () {
    int auto09DF953E_ae;
    int auto09DF953E_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    auto09DF953E_ae = gv_playerCount;
    auto09DF953E_ai = 1;
    lv_player = 1;
    for ( ; ( (auto09DF953E_ai >= 0 && lv_player <= auto09DF953E_ae) || (auto09DF953E_ai <= 0 && lv_player >= auto09DF953E_ae) ) ; lv_player += auto09DF953E_ai ) {
        CameraPan(gf_IndexGetUserPlayer(lv_player), PlayerStartLocation(gf_IndexGetUserPlayer(lv_player)), 0.0, -1, 10.0, false);
    }
}

void gf_VenueCameraPan (int lp_round) {
    int auto32DF37A8_ae;
    int auto32DF37A8_ai;

    // Variable Declarations
    int lv_venue;

    // Variable Initialization

    // Implementation
    auto32DF37A8_ae = gv_playerCount;
    auto32DF37A8_ai = 1;
    lv_venue = 1;
    for ( ; ( (auto32DF37A8_ai >= 0 && lv_venue <= auto32DF37A8_ae) || (auto32DF37A8_ai <= 0 && lv_venue >= auto32DF37A8_ae) ) ; lv_venue += auto32DF37A8_ai ) {
        if ((gv_playerAtVenue[lv_venue][lp_round] != -1)) {
            CameraPan(gv_playerAtVenue[lv_venue][lp_round], RegionGetCenter(gv_venue[lv_venue]), 0.0, -1, 10.0, false);
        }

    }
}

bool gf_PlayerIsAlive (int lp_player, int lp_round) {
    int autoD89BAC71_ae;
    int autoD89BAC71_ai;

    // Variable Declarations
    int lv_team;
    bool lv_playerIsAlive;

    // Variable Initialization

    // Implementation
    autoD89BAC71_ae = gv_teamCountAlive[lp_round];
    autoD89BAC71_ai = 1;
    lv_team = 1;
    for ( ; ( (autoD89BAC71_ai >= 0 && lv_team <= autoD89BAC71_ae) || (autoD89BAC71_ai <= 0 && lv_team >= autoD89BAC71_ae) ) ; lv_team += autoD89BAC71_ai ) {
        if ((PlayerGroupHasPlayer(gv_teamGroup[gv_teamAlive[lv_team]], lp_player) == true)) {
            lv_playerIsAlive = true;
            break;
        }

    }
    return lv_playerIsAlive;
}

void gf_CountUnitEnable (bool lp_option) {
    // Implementation
    TriggerEnable(gt_CountUnit, lp_option);
}

void gf_CountUnit (int lp_team, bool lp_wait) {
    int autoF81FCAFE_ae;
    int autoF81FCAFE_ai;
    unitgroup auto7F67E6FB_g;
    int auto7F67E6FB_u;

    // Variable Declarations
    int lv_team;
    int lv_teamMember;
    int lv_player;
    unit lv_unit;
    string lv_effect;

    // Variable Initialization
    lv_effect = "CountUnitRemove";

    // Implementation
    autoF81FCAFE_ae = gv_teamMemberCount;
    autoF81FCAFE_ai = 1;
    lv_teamMember = 1;
    for ( ; ( (autoF81FCAFE_ai >= 0 && lv_teamMember <= autoF81FCAFE_ae) || (autoF81FCAFE_ai <= 0 && lv_teamMember >= autoF81FCAFE_ae) ) ; lv_teamMember += autoF81FCAFE_ai ) {
        lv_player = PlayerGroupPlayer(gv_teamGroup[lp_team], lv_teamMember);
        while ((UnitGroupCount(UnitGroup(null, gf_UserPlayerGetMirrorPlayer(lv_player), gv_battlefield, gv_unitFilter, 0), c_unitCountAlive) > 0)) {
            auto7F67E6FB_g = UnitGroup(null, gf_UserPlayerGetMirrorPlayer(lv_player), gv_battlefield, gv_unitFilter, 0);
            auto7F67E6FB_u = 1;
            for ( ; auto7F67E6FB_u <= UnitGroupCount(auto7F67E6FB_g, c_unitCountAll) ; auto7F67E6FB_u += BoolToInt(lv_unit == UnitGroupUnit(auto7F67E6FB_g, auto7F67E6FB_u)) ) {
                lv_unit = UnitGroupUnit(auto7F67E6FB_g, auto7F67E6FB_u);
                PlayerCreateEffectUnit(gf_UserPlayerGetMirrorPlayer(lv_player), lv_effect, lv_unit);
                if ((lp_wait == true)) {
                    Wait(gv_minimumPeriod, c_timeGame);
                }

            }
        }
    }
}

void gf_GameOver (int lp_team) {
    int autoA4012997_ae;
    int autoA4012997_ai;
    int auto164208EA_ae;
    int auto164208EA_ai;
    int auto1F419721_ae;
    int auto1F419721_ai;

    // Variable Declarations
    int lv_teamMember;
    int lv_team;
    int lv_time;

    // Variable Initialization
    lv_time = 10;

    // Implementation
    TriggerEnable(gt_PlayerLeft, false);
    TextExpressionSetToken("Param/Expression/64A23BEA", "A", IntToText(lv_time));
    UIDisplayMessage(gv_uIPlayergroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/64A23BEA"));
    Wait(lv_time, c_timeGame);
    autoA4012997_ae = gv_teamMemberCount;
    autoA4012997_ai = 1;
    lv_teamMember = 1;
    for ( ; ( (autoA4012997_ai >= 0 && lv_teamMember <= autoA4012997_ae) || (autoA4012997_ai <= 0 && lv_teamMember >= autoA4012997_ae) ) ; lv_teamMember += autoA4012997_ai ) {
        GameOver(PlayerGroupPlayer(gv_teamGroup[lp_team], lv_teamMember), c_gameOverVictory, true, true);
    }
    auto164208EA_ae = gv_teamCount;
    auto164208EA_ai = 1;
    lv_team = 1;
    for ( ; ( (auto164208EA_ai >= 0 && lv_team <= auto164208EA_ae) || (auto164208EA_ai <= 0 && lv_team >= auto164208EA_ae) ) ; lv_team += auto164208EA_ai ) {
        if ((lv_team != lp_team)) {
            auto1F419721_ae = gv_teamMemberCount;
            auto1F419721_ai = 1;
            lv_teamMember = 1;
            for ( ; ( (auto1F419721_ai >= 0 && lv_teamMember <= auto1F419721_ae) || (auto1F419721_ai <= 0 && lv_teamMember >= auto1F419721_ae) ) ; lv_teamMember += auto1F419721_ai ) {
                GameOver(PlayerGroupPlayer(gv_teamGroup[lv_team], lv_teamMember), c_gameOverDefeat, true, true);
            }
        }

    }
}

void gf_DisplayMessageAll (int lp_round) {
    int auto7CCF1D8A_ae;
    int auto7CCF1D8A_ai;

    // Variable Declarations
    int lv_player;
    text lv_text;

    // Variable Initialization

    // Implementation
    if ((gv_round == gv_roundCount)) {
        lv_text = StringExternal("Param/Value/D56561A2");
    }
    else {
        lv_text = StringExternal("Param/Value/8F47A217");
    }
    auto7CCF1D8A_ae = gv_playerCount;
    auto7CCF1D8A_ai = 1;
    lv_player = 1;
    for ( ; ( (auto7CCF1D8A_ai >= 0 && lv_player <= auto7CCF1D8A_ae) || (auto7CCF1D8A_ai <= 0 && lv_player >= auto7CCF1D8A_ae) ) ; lv_player += auto7CCF1D8A_ai ) {
        if ((gf_PlayerIsAlive(gf_IndexGetUserPlayer(lv_player), lp_round) == true)) {
            TextExpressionSetToken("Param/Expression/A60D70B7", "A", TextWithColor(PlayerName(gf_IndexGetUserPlayer(lv_player)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gf_IndexGetUserPlayer(lv_player), false))));
            TextExpressionSetToken("Param/Expression/A60D70B7", "B", lv_text);
            UIDisplayMessage(gv_uIPlayergroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/A60D70B7"));
        }

    }
}

void gf_PlayerAtFinalVenueSet (int lp_round) {
    int auto023A2D95_ae;
    int auto023A2D95_ai;
    int auto3704941C_ae;
    int auto3704941C_ai;
    int autoC71910A6_ae;
    int autoC71910A6_ai;
    int auto610F6059_ae;
    int auto610F6059_ai;

    // Variable Declarations
    int lv_venue;
    int lv_team;
    int lv_teamMember;

    // Variable Initialization

    // Implementation
    auto023A2D95_ae = gv_venueMaximumCount;
    auto023A2D95_ai = 1;
    lv_venue = 1;
    for ( ; ( (auto023A2D95_ai >= 0 && lv_venue <= auto023A2D95_ae) || (auto023A2D95_ai <= 0 && lv_venue >= auto023A2D95_ae) ) ; lv_venue += auto023A2D95_ai ) {
        gv_playerAtFinalVenue[lv_venue][lp_round] = -1;
    }
    lv_venue = 0;
    auto3704941C_ae = gv_teamCountAlive[(lp_round-1)];
    auto3704941C_ai = 1;
    lv_team = 1;
    for ( ; ( (auto3704941C_ai >= 0 && lv_team <= auto3704941C_ae) || (auto3704941C_ai <= 0 && lv_team >= auto3704941C_ae) ) ; lv_team += auto3704941C_ai ) {
        autoC71910A6_ae = gv_teamMemberCount;
        autoC71910A6_ai = 1;
        lv_teamMember = 1;
        for ( ; ( (autoC71910A6_ai >= 0 && lv_teamMember <= autoC71910A6_ae) || (autoC71910A6_ai <= 0 && lv_teamMember >= autoC71910A6_ae) ) ; lv_teamMember += autoC71910A6_ai ) {
            lv_venue += 1;
            gv_playerAtFinalVenue[lv_venue][lp_round] = PlayerGroupPlayer(gv_teamGroup[gv_teamAlive[lv_team]], lv_teamMember);
        }
    }
    auto610F6059_ae = gv_venueMaximumCount;
    auto610F6059_ai = 1;
    lv_venue = 1;
    for ( ; ( (auto610F6059_ai >= 0 && lv_venue <= auto610F6059_ae) || (auto610F6059_ai <= 0 && lv_venue >= auto610F6059_ae) ) ; lv_venue += auto610F6059_ai ) {
        gv_playerAtVenue[lv_venue][lp_round] = gv_playerAtFinalVenue[lv_venue][lp_round];
    }
}

void gf_ReserveUnitIndexResetAll () {
    int autoDCDB3531_ae;
    int autoDCDB3531_ai;
    int auto425E482A_ae;
    int auto425E482A_ai;

    // Variable Declarations
    int lv_player;
    int lv_phalanx;

    // Variable Initialization

    // Implementation
    autoDCDB3531_ae = gv_playerCount;
    autoDCDB3531_ai = 1;
    lv_player = 1;
    for ( ; ( (autoDCDB3531_ai >= 0 && lv_player <= autoDCDB3531_ae) || (autoDCDB3531_ai <= 0 && lv_player >= autoDCDB3531_ae) ) ; lv_player += autoDCDB3531_ai ) {
        auto425E482A_ae = gv_phalanxMaximumCount;
        auto425E482A_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto425E482A_ai >= 0 && lv_phalanx <= auto425E482A_ae) || (auto425E482A_ai <= 0 && lv_phalanx >= auto425E482A_ae) ) ; lv_phalanx += auto425E482A_ai ) {
            gv_reserveUnitIndex[gf_IndexGetUserPlayer(lv_player)][lv_phalanx] = 0;
        }
    }
}

void gf_ReserveUnitCreationEnable (bool lp_option) {
    int auto88918C30_ae;
    int auto88918C30_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    auto88918C30_ae = gv_playerCount;
    auto88918C30_ai = 1;
    lv_player = 1;
    for ( ; ( (auto88918C30_ai >= 0 && lv_player <= auto88918C30_ae) || (auto88918C30_ai <= 0 && lv_player >= auto88918C30_ae) ) ; lv_player += auto88918C30_ai ) {
        if ((lp_option == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(gf_IndexGetUserPlayer(lv_player), "CountUnit", 1);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(gf_IndexGetUserPlayer(lv_player), "BuildArmy", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gf_IndexGetUserPlayer(lv_player), "BuildPhalanx", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gf_IndexGetUserPlayer(lv_player), "BuildPortal", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gf_IndexGetUserPlayer(lv_player), "CountUnit", 0);
        }
    }
    TriggerEnable(gt_CreateReserveUnit, lp_option);
    TriggerEnable(gt_UnitDied, lp_option);
    TriggerEnable(gt_IssueOrderPeriodic, lp_option);
}

void gf_ReserveUnitCreation (unit lp_unit, int lp_player, int lp_phalanx) {
    // Variable Declarations
    string lv_unitType;
    int lv_index;

    // Variable Initialization

    // Implementation
    lv_index = (gf_UnitTypeGetPhalanxCapacity(UnitGetType(lp_unit))+gv_reserveUnitIndex[lp_player][lp_phalanx]);
    if ((lv_index < gv_unitMaximumCountPerPhalanx)) {
        gv_reserveUnitIndex[lp_player][lp_phalanx] += 1;
        lv_unitType = gv_unitType[lp_player][lp_phalanx][lv_index];
        if ((lv_unitType != null)) {
            gf_UnitCreate(gf_UserPlayerGetMirrorPlayer(lp_player), UnitGetPosition(lp_unit), lv_unitType, lp_unit);
        }

    }

}

void gf_SearchRadiusInFinalRoundSet (fixed lp_radius) {
    // Implementation
    gv_searchRadiusInFinalRound = lp_radius;
}

void gf_TimerSet (fixed lp_duration, bool lp_debug) {
    // Implementation
    if ((lp_debug == true)) {
        TriggerWaitForTrigger(gt_DebugControlPressed, false);
    }
    else {
        TimerStart(gv_timer, lp_duration, false, c_timeGame);
        TimerWindowShow(gv_timerWindow, gv_uIPlayergroup, true);
        libNtve_gf_WaitForTimer(gv_timer, 0.0, false);
        TimerWindowShow(gv_timerWindow, gv_uIPlayergroup, false);
    }
    Wait(gv_minimumPeriod, c_timeGame);
}

void gf_AIPhalanxAndPortalPositionAll (int lp_round) {
    int autoF023DA71_ae;
    int autoF023DA71_ai;

    // Variable Declarations
    int lv_venue;
    string lv_unitType;

    // Variable Initialization

    // Implementation
    autoF023DA71_ae = gv_venueMaximumCount;
    autoF023DA71_ai = 1;
    lv_venue = 1;
    for ( ; ( (autoF023DA71_ai >= 0 && lv_venue <= autoF023DA71_ae) || (autoF023DA71_ai <= 0 && lv_venue >= autoF023DA71_ae) ) ; lv_venue += autoF023DA71_ai ) {
        if ((gv_playerAtVenue[lv_venue][lp_round] != -1)) {
            lv_unitType = gf_RaceGetPhalanxType(PlayerRace(gv_playerAtVenue[lv_venue][lp_round]));
            gf_AIPhalanxAndPortalPosition(gv_playerAtVenue[lv_venue][lp_round], gv_venue[lv_venue], lv_unitType, gv_phalanxUserType, gv_phalanxFilter, gv_phalanxMaximumCount);
            if ((PlayerGroupHasPlayer(gv_aIGroup, gv_playerAtVenue[lv_venue][lp_round]) == true)) {
                lv_unitType = "hprt";
                gf_AIPhalanxAndPortalPosition(gv_playerAtVenue[lv_venue][lp_round], gv_venue[lv_venue], lv_unitType, gv_portalUserType, gv_portalFilter, gv_portalMaximumCount);
            }

        }

    }
}

void gf_AIPhalanxBuffSetAll (int lp_round) {
    int auto178A28BB_ae;
    int auto178A28BB_ai;
    int autoB00D6803_ae;
    int autoB00D6803_ai;

    // Variable Declarations
    int lv_venue;
    int lv_phalanx;

    // Variable Initialization

    // Implementation
    auto178A28BB_ae = gv_venueMaximumCount;
    auto178A28BB_ai = 1;
    lv_venue = 1;
    for ( ; ( (auto178A28BB_ai >= 0 && lv_venue <= auto178A28BB_ae) || (auto178A28BB_ai <= 0 && lv_venue >= auto178A28BB_ae) ) ; lv_venue += auto178A28BB_ai ) {
        if ((gv_playerAtVenue[lv_venue][lp_round] != -1)) {
            autoB00D6803_ae = gv_phalanxMaximumCount;
            autoB00D6803_ai = 1;
            lv_phalanx = 1;
            for ( ; ( (autoB00D6803_ai >= 0 && lv_phalanx <= autoB00D6803_ae) || (autoB00D6803_ai <= 0 && lv_phalanx >= autoB00D6803_ae) ) ; lv_phalanx += autoB00D6803_ai ) {
                gf_PhalanxBuffSet(gv_phalanx[gv_playerAtVenue[lv_venue][lp_round]][lv_phalanx], false);
            }
        }

    }
}

void gf_AIPhalanxAndPortalPosition (int lp_player, region lp_region, string lp_unitType, string lp_userType, unitfilter lp_unitFilter, int lp_count) {
    // Variable Declarations
    string lv_unitTypeID;
    int lv_columnCount;
    int lv_rowCount;
    point lv_point;

    // Variable Initialization
    lv_unitTypeID = "";

    // Implementation
    lv_unitTypeID = (lp_unitType);
    lv_columnCount = UserDataGetInt(lp_userType, (lv_unitTypeID), "Row", 1);
    lv_rowCount = UserDataGetInt(lp_userType, (lv_unitTypeID), "Column", 1);
    while ((UnitGroupCount(UnitGroup(null, lp_player, lp_region, lp_unitFilter, 0), c_unitCountAlive) < lp_count)) {
        lv_point = RegionRandomPoint(lp_region);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unitType, 0, lp_player, lv_point);
        if ((UnitGetType(UnitLastCreated()) != null) && (gf_RegionContainsPointWithOffset(UnitGetPosition(UnitLastCreated()), lp_region, lv_rowCount, lv_columnCount) == true)) {
        }
        else {
            UnitRemove(UnitLastCreated());
        }
    }
}

void gf_AIBuildingPosition () {
    int auto43AF9385_ae;
    int auto43AF9385_ai;
    int auto88A00B64_ae;
    int auto88A00B64_ai;
    unitgroup auto2E5E384D_g;
    int auto2E5E384D_u;
    int autoD5710B0E_ae;
    int autoD5710B0E_ai;
    unitgroup autoE852C850_g;
    int autoE852C850_u;
    string auto4F989378_val;

    // Variable Declarations
    int lv_buildingRegion;
    unit lv_worker;
    unit lv_unit;
    string lv_buildAbility;
    abilcmd lv_abilityCommand;
    point lv_point;
    order lv_order;
    int lv_phalanx;
    int lv_index;
    string lv_ability;

    // Variable Initialization

    // Implementation
    auto43AF9385_ae = gv_playerCount;
    auto43AF9385_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (auto43AF9385_ai >= 0 && lv_buildingRegion <= auto43AF9385_ae) || (auto43AF9385_ai <= 0 && lv_buildingRegion >= auto43AF9385_ae) ) ; lv_buildingRegion += auto43AF9385_ai ) {
        if ((PlayerGroupHasPlayer(gv_aIGroup, gv_playerAtBuildingRegion[lv_buildingRegion]) == true)) {
            auto88A00B64_ae = gv_phalanxMaximumCount;
            auto88A00B64_ai = 1;
            lv_phalanx = 1;
            for ( ; ( (auto88A00B64_ai >= 0 && lv_phalanx <= auto88A00B64_ae) || (auto88A00B64_ai <= 0 && lv_phalanx >= auto88A00B64_ae) ) ; lv_phalanx += auto88A00B64_ai ) {
                auto2E5E384D_g = UnitGroup(null, gv_playerAtBuildingRegion[lv_buildingRegion], gv_buildingRegion[lv_buildingRegion][lv_phalanx], gv_buildingFilter, 0);
                auto2E5E384D_u = 1;
                for ( ; auto2E5E384D_u <= UnitGroupCount(auto2E5E384D_g, c_unitCountAll) ; auto2E5E384D_u += BoolToInt(lv_unit == UnitGroupUnit(auto2E5E384D_g, auto2E5E384D_u)) ) {
                    lv_unit = UnitGroupUnit(auto2E5E384D_g, auto2E5E384D_u);
                    autoD5710B0E_ae = UnitAbilityCount(lv_unit);
                    autoD5710B0E_ai = 1;
                    lv_index = 1;
                    for ( ; ( (autoD5710B0E_ai >= 0 && lv_index <= autoD5710B0E_ae) || (autoD5710B0E_ai <= 0 && lv_index >= autoD5710B0E_ae) ) ; lv_index += autoD5710B0E_ai ) {
                        lv_ability = UnitAbilityGet(lv_unit, lv_index);
                        if ((AbilityClass(lv_ability) == c_classIdCAbilMorph)) {
                            UnitIssueOrder(lv_unit, Order(AbilityCommand(lv_ability, 0)), c_orderQueueReplace);
                        }

                    }
                }
            }
            autoE852C850_g = UnitGroup(null, gv_playerAtBuildingRegion[lv_buildingRegion], null, gv_workerFilter, 0);
            autoE852C850_u = 1;
            for ( ; autoE852C850_u <= UnitGroupCount(autoE852C850_g, c_unitCountAll) ; autoE852C850_u += BoolToInt(lv_worker == UnitGroupUnit(autoE852C850_g, autoE852C850_u)) ) {
                lv_worker = UnitGroupUnit(autoE852C850_g, autoE852C850_u);
                auto4F989378_val = UnitGetType(lv_worker);
                if (auto4F989378_val == "hpea") {
                    lv_buildAbility = "AHbuArmy";
                }
                else if (auto4F989378_val == "ewsp") {
                    lv_buildAbility = "AEbuArmy";
                }
                else if (auto4F989378_val == "opeo") {
                    lv_buildAbility = "AObuArmy";
                }
                else if (auto4F989378_val == "uaco") {
                    lv_buildAbility = "AUbuArmy";
                }
                else {
                }
                while ((PlayerGetPropertyInt(gv_playerAtBuildingRegion[lv_buildingRegion], c_playerPropTerrazine) >= 150)) {
                    lv_abilityCommand = AbilityCommand(lv_buildAbility, RandomInt(0, 29));
                    lv_point = RegionRandomPoint(gv_buildingRegion[lv_buildingRegion][RandomInt(1, gv_phalanxMaximumCount)]);
                    lv_order = OrderTargetingPoint(lv_abilityCommand, lv_point);
                    UnitIssueOrder(lv_worker, lv_order, c_orderQueueReplace);
                }
            }
        }

    }
}

void gf_UnitPositionAll () {
    int autoCB9F3CA1_ae;
    int autoCB9F3CA1_ai;
    unitgroup autoB2398B92_g;
    int autoB2398B92_u;

    // Variable Declarations
    unit lv_unit;
    int lv_venue;
    int lv_phalanx;

    // Variable Initialization

    // Implementation
    autoCB9F3CA1_ae = gv_venueMaximumCount;
    autoCB9F3CA1_ai = 1;
    lv_venue = 1;
    for ( ; ( (autoCB9F3CA1_ai >= 0 && lv_venue <= autoCB9F3CA1_ae) || (autoCB9F3CA1_ai <= 0 && lv_venue >= autoCB9F3CA1_ae) ) ; lv_venue += autoCB9F3CA1_ai ) {
        autoB2398B92_g = UnitGroup(null, c_playerAny, gv_venue[lv_venue], gv_phalanxFilter, 0);
        autoB2398B92_u = 1;
        for ( ; autoB2398B92_u <= UnitGroupCount(autoB2398B92_g, c_unitCountAll) ; autoB2398B92_u += BoolToInt(lv_unit == UnitGroupUnit(autoB2398B92_g, autoB2398B92_u)) ) {
            lv_unit = UnitGroupUnit(autoB2398B92_g, autoB2398B92_u);
            lv_phalanx = FixedToInt(UnitGetCustomValue(lv_unit, gv_customValuePhalanx));
            gf_UnitOrPreviewModelPosition(lv_unit, false);
        }
    }
}

void gf_UnitOrPreviewModelPosition (unit lp_unit, bool lp_preview) {
    int auto0C24DFCB_ae;
    int auto0C24DFCB_ai;
    int auto2AC13896_ae;
    int auto2AC13896_ai;

    // Variable Declarations
    int lv_player;
    string lv_unitTypeID;
    point lv_position;
    int lv_phalanx;
    int lv_playerUnitCreated;
    int lv_column;
    int lv_columnCount;
    int lv_row;
    int lv_rowCount;
    point lv_pointInitial;
    point lv_pointColumn;
    point lv_pointRow;
    int lv_index;
    string lv_unitType;

    // Variable Initialization
    lv_player = UnitGetOwner(lp_unit);
    lv_unitTypeID = (UnitGetType(lp_unit));
    lv_position = UnitGetPosition(lp_unit);
    lv_phalanx = FixedToInt(UnitGetCustomValue(lp_unit, gv_customValuePhalanx));

    // Implementation
    if ((lp_preview == true)) {
        lv_playerUnitCreated = lv_player;
    }
    else {
        lv_playerUnitCreated = gf_UserPlayerGetMirrorPlayer(lv_player);
    }
    lv_columnCount = UserDataGetInt(gv_phalanxUserType, (lv_unitTypeID), "Row", 1);
    lv_rowCount = UserDataGetInt(gv_phalanxUserType, (lv_unitTypeID), "Column", 1);
    lv_pointInitial = PointWithOffsetPolar(PointWithOffsetPolar(lv_position, (lv_rowCount/2-0.5), PointGetFacing(lv_position)), (lv_columnCount/2-0.5), (UnitGetFacing(lp_unit)+90));
    lv_index = 0;
    auto0C24DFCB_ae = lv_columnCount;
    auto0C24DFCB_ai = 1;
    lv_column = 1;
    for ( ; ( (auto0C24DFCB_ai >= 0 && lv_column <= auto0C24DFCB_ae) || (auto0C24DFCB_ai <= 0 && lv_column >= auto0C24DFCB_ae) ) ; lv_column += auto0C24DFCB_ai ) {
        lv_pointColumn = PointWithOffsetPolar(lv_pointInitial, (lv_column-1), (UnitGetFacing(lp_unit)+180));
        auto2AC13896_ae = lv_rowCount;
        auto2AC13896_ai = 1;
        lv_row = 1;
        for ( ; ( (auto2AC13896_ai >= 0 && lv_row <= auto2AC13896_ae) || (auto2AC13896_ai <= 0 && lv_row >= auto2AC13896_ae) ) ; lv_row += auto2AC13896_ai ) {
            lv_pointRow = PointWithOffsetPolar(lv_pointColumn, (lv_row-1), (UnitGetFacing(lp_unit)-90));
            lv_index += 1;
            lv_unitType = gv_unitType[lv_player][lv_phalanx][lv_index];
            if ((lv_unitType != null)) {
                if ((lp_preview == true)) {
                    gf_PreviewModelCreate(lv_playerUnitCreated, lv_pointRow, lv_unitType, lp_unit);
                    gv_previewModel[lv_player][lv_phalanx][lv_index] = libNtve_gf_ActorLastCreated();
                }
                else {
                    gf_UnitCreate(lv_playerUnitCreated, lv_pointRow, lv_unitType, lp_unit);
                }
            }

        }
    }
}

void gf_CreepPosition (int lp_round) {
    int auto1BECF8F3_ae;
    int auto1BECF8F3_ai;

    // Variable Declarations
    int lv_venue;

    // Variable Initialization

    // Implementation
    auto1BECF8F3_ae = gv_venueMaximumCount;
    auto1BECF8F3_ai = 1;
    lv_venue = 1;
    for ( ; ( (auto1BECF8F3_ai >= 0 && lv_venue <= auto1BECF8F3_ae) || (auto1BECF8F3_ai <= 0 && lv_venue >= auto1BECF8F3_ae) ) ; lv_venue += auto1BECF8F3_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, gv_creepUnitType[lv_venue][lp_round], 0, gv_creepPlayerAtVenue[lv_venue][lp_round], gv_creepPoint[lv_venue]);
        UnitSetFacing(UnitLastCreated(), PointGetFacing(gv_creepPoint[lv_venue]), 0.0);
    }
}

void gf_UnitCreate (int lp_player, point lp_point, string lp_unitType, unit lp_unit) {
    int auto75047976_ae;
    int auto75047976_ai;

    // Variable Declarations
    int lv_index;
    string lv_behavior;

    // Variable Initialization

    // Implementation
    UnitCreate(1, lp_unitType, c_unitCreateIgnorePlacement, lp_player, lp_point, UnitGetFacing(lp_unit));
    UnitSetFacing(UnitLastCreated(), UnitGetFacing(lp_unit), 0.0);
    UnitSetCustomValue(UnitLastCreated(), gv_customValuePhalanx, UnitGetCustomValue(lp_unit, gv_customValuePhalanx));
    UnitBehaviorAdd(UnitLastCreated(), "PhalanxMarker", lp_unit, 1);
    auto75047976_ae = UnitBehaviorCountAll(lp_unit);
    auto75047976_ai = 1;
    lv_index = 1;
    for ( ; ( (auto75047976_ai >= 0 && lv_index <= auto75047976_ae) || (auto75047976_ai <= 0 && lv_index >= auto75047976_ae) ) ; lv_index += auto75047976_ai ) {
        lv_behavior = UnitBehaviorGet(lp_unit, lv_index);
        if (((lv_behavior) == (((lv_behavior))))) {
            UnitBehaviorAdd(UnitLastCreated(), UserDataGetGameLink(gv_phalanxBuffUserType, ((lv_behavior)), "Behavior", 1), UnitLastCreated(), 1);
        }

    }
}

bool gf_BehaviorIsPhalanxBuff (string lp_behavior) {
    int autoCECBD0E8_ae;
    int autoCECBD0E8_ai;

    // Variable Declarations
    int lv_index;
    bool lv_isPhalanxBuff;

    // Variable Initialization

    // Implementation
    autoCECBD0E8_ae = UserDataInstanceCount(gv_phalanxBuffUserType);
    autoCECBD0E8_ai = 1;
    lv_index = 1;
    for ( ; ( (autoCECBD0E8_ai >= 0 && lv_index <= autoCECBD0E8_ae) || (autoCECBD0E8_ai <= 0 && lv_index >= autoCECBD0E8_ae) ) ; lv_index += autoCECBD0E8_ai ) {
        if (((lp_behavior) == (UserDataInstance(gv_phalanxBuffUserType, lv_index)))) {
            lv_isPhalanxBuff = true;
            break;
        }

    }
    return lv_isPhalanxBuff;
}

void gf_PhalanxCounterEnable (bool lp_reset, bool lp_option) {
    int auto618A4209_ae;
    int auto618A4209_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    if ((lp_option == true)) {
    }
    else {
        Wait(gv_minimumPeriod, c_timeGame);
    }
    if ((lp_reset == true)) {
        auto618A4209_ae = gv_playerCount;
        auto618A4209_ai = 1;
        lv_player = 1;
        for ( ; ( (auto618A4209_ai >= 0 && lv_player <= auto618A4209_ae) || (auto618A4209_ai <= 0 && lv_player >= auto618A4209_ae) ) ; lv_player += auto618A4209_ai ) {
            gv_phalanxIndex[gf_IndexGetUserPlayer(lv_player)] = 0;
        }
    }

    TriggerEnable(gt_PhalanxCreated, lp_option);
    TriggerEnable(gt_PortalCreated, lp_option);
}

void gf_PhalanxBuffSet (unit lp_unit, bool lp_preview) {
    // Variable Declarations
    int lv_phalanx;
    int lv_player;
    string lv_behavior;
    string lv_ability;

    // Variable Initialization
    lv_phalanx = FixedToInt(UnitGetCustomValue(lp_unit, gv_customValuePhalanx));
    lv_player = UnitGetOwner(lp_unit);

    // Implementation
    lv_behavior = gv_phalanxBuff[lv_player][lv_phalanx];
    if ((lp_preview == false)) {
        while ((lv_behavior == null)) {
            lv_behavior = ((UserDataInstance(gv_phalanxBuffUserType, RandomInt(1, UserDataInstanceCount(gv_phalanxBuffUserType)))));
        }
    }

    lv_ability = UserDataGetGameLink(gv_phalanxBuffUserType, ((lv_behavior)), "Ability", 1);
    UnitIssueOrder(lp_unit, Order(AbilityCommand(lv_ability, 0)), c_orderQueueReplace);
}

void gf_PreviewUpdateAll () {
    int autoD7F29348_ae;
    int autoD7F29348_ai;
    int auto814164CF_ae;
    int auto814164CF_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    string lv_unitType;

    // Variable Initialization

    // Implementation
    autoD7F29348_ae = gv_playerCount;
    autoD7F29348_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (autoD7F29348_ai >= 0 && lv_buildingRegion <= autoD7F29348_ae) || (autoD7F29348_ai <= 0 && lv_buildingRegion >= autoD7F29348_ae) ) ; lv_buildingRegion += autoD7F29348_ai ) {
        auto814164CF_ae = gv_phalanxMaximumCount;
        auto814164CF_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto814164CF_ai >= 0 && lv_phalanx <= auto814164CF_ae) || (auto814164CF_ai <= 0 && lv_phalanx >= auto814164CF_ae) ) ; lv_phalanx += auto814164CF_ai ) {
            gf_PreviewUpdate(gv_playerAtBuildingRegion[lv_buildingRegion], lv_phalanx);
        }
    }
}

void gf_PreviewUpdate (int lp_player, int lp_phalanx) {
    int auto646B9536_ae;
    int auto646B9536_ai;

    // Variable Declarations
    string lv_unitTypeID;
    point lv_position;
    int lv_phalanx;
    int lv_index;

    // Variable Initialization

    // Implementation
    auto646B9536_ae = gv_unitMaximumCountPerPhalanx;
    auto646B9536_ai = 1;
    lv_index = 1;
    for ( ; ( (auto646B9536_ai >= 0 && lv_index <= auto646B9536_ae) || (auto646B9536_ai <= 0 && lv_index >= auto646B9536_ae) ) ; lv_index += auto646B9536_ai ) {
        ActorSend(gv_previewModel[lp_player][lp_phalanx][lv_index], libNtve_gf_Destroy());
    }
    gf_UnitOrPreviewModelPosition(gv_previewer[lp_player][lp_phalanx], true);
}

void gf_PreviewerRegionSet (region lp_region, int lp_index, int lp_phalanx) {
    // Implementation
    gv_previewRegion[lp_index][lp_phalanx] = lp_region;
}

void gf_PreviewerRemoveAll () {
    int auto89E27DEA_ae;
    int auto89E27DEA_ai;
    int auto2A35E6A6_ae;
    int auto2A35E6A6_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    string lv_unitType;

    // Variable Initialization

    // Implementation
    auto89E27DEA_ae = gv_playerCount;
    auto89E27DEA_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (auto89E27DEA_ai >= 0 && lv_buildingRegion <= auto89E27DEA_ae) || (auto89E27DEA_ai <= 0 && lv_buildingRegion >= auto89E27DEA_ae) ) ; lv_buildingRegion += auto89E27DEA_ai ) {
        auto2A35E6A6_ae = gv_phalanxMaximumCount;
        auto2A35E6A6_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto2A35E6A6_ai >= 0 && lv_phalanx <= auto2A35E6A6_ae) || (auto2A35E6A6_ai <= 0 && lv_phalanx >= auto2A35E6A6_ae) ) ; lv_phalanx += auto2A35E6A6_ai ) {
            UnitRemove(gv_previewer[gv_playerAtBuildingRegion[lv_buildingRegion]][lv_phalanx]);
        }
    }
}

void gf_PreviewerAtBuildingRegionPositionAll () {
    int autoC94DE9B6_ae;
    int autoC94DE9B6_ai;
    int auto9857E13C_ae;
    int auto9857E13C_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    string lv_unitType;

    // Variable Initialization

    // Implementation
    autoC94DE9B6_ae = gv_playerCount;
    autoC94DE9B6_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (autoC94DE9B6_ai >= 0 && lv_buildingRegion <= autoC94DE9B6_ae) || (autoC94DE9B6_ai <= 0 && lv_buildingRegion >= autoC94DE9B6_ae) ) ; lv_buildingRegion += autoC94DE9B6_ai ) {
        auto9857E13C_ae = gv_phalanxMaximumCount;
        auto9857E13C_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto9857E13C_ai >= 0 && lv_phalanx <= auto9857E13C_ae) || (auto9857E13C_ai <= 0 && lv_phalanx >= auto9857E13C_ae) ) ; lv_phalanx += auto9857E13C_ai ) {
            lv_unitType = gf_RaceGetPhalanxType(PlayerRace(gv_playerAtBuildingRegion[lv_buildingRegion]));
            libNtve_gf_CreateUnitsAtPoint2(1, lv_unitType, c_unitCreateIgnorePlacement, gv_playerAtBuildingRegion[lv_buildingRegion], RegionGetCenter(gv_previewRegion[lv_buildingRegion][lv_phalanx]));
            UnitSetFacing(UnitLastCreated(), 90.0, 0.0);
            UnitSetCustomValue(UnitLastCreated(), gv_customValuePhalanx, lv_phalanx);
            gv_previewer[gv_playerAtBuildingRegion[lv_buildingRegion]][lv_phalanx] = UnitLastCreated();
            gf_PhalanxBuffSet(UnitLastCreated(), true);
        }
    }
}

void gf_PreviewEnable (bool lp_option) {
    // Implementation
    if ((lp_option == true)) {
        gf_PreviewerAtBuildingRegionPositionAll();
    }
    else {
        Wait(gv_minimumPeriod, c_timeGame);
        gf_PreviewerRemoveAll();
    }
    TriggerEnable(gt_BuildingCreated, lp_option);
    TriggerEnable(gt_UnitAbilityMorph, lp_option);
}

void gf_PreviewModelCreate (int lp_player, point lp_point, string lp_unitType, unit lp_unit) {
    // Implementation
    libNtve_gf_CreateModelAtPoint(((lp_unitType)), lp_point);
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing((UnitGetFacing(lp_unit)+90)));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false))));
}

void gf_UnitTypeSetAll () {
    int auto7076D636_ae;
    int auto7076D636_ai;
    int autoFFA33FE6_ae;
    int autoFFA33FE6_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;

    // Variable Initialization

    // Implementation
    auto7076D636_ae = gv_playerCount;
    auto7076D636_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (auto7076D636_ai >= 0 && lv_buildingRegion <= auto7076D636_ae) || (auto7076D636_ai <= 0 && lv_buildingRegion >= auto7076D636_ae) ) ; lv_buildingRegion += auto7076D636_ai ) {
        gv_buildingScore[gv_playerAtBuildingRegion[lv_buildingRegion]] = 0;
        autoFFA33FE6_ae = gv_phalanxMaximumCount;
        autoFFA33FE6_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (autoFFA33FE6_ai >= 0 && lv_phalanx <= autoFFA33FE6_ae) || (autoFFA33FE6_ai <= 0 && lv_phalanx >= autoFFA33FE6_ae) ) ; lv_phalanx += autoFFA33FE6_ai ) {
            gf_UnitTypeSet(lv_buildingRegion, lv_phalanx);
        }
    }
    gf_BuildingScoreUpdate();
}

void gf_UnitTypeReset (int lp_player, int lp_phalanx) {
    int auto7EC067F6_ae;
    int auto7EC067F6_ai;

    // Variable Declarations
    int lv_unit;

    // Variable Initialization

    // Implementation
    auto7EC067F6_ae = gv_unitMaximumCountPerPhalanx;
    auto7EC067F6_ai = 1;
    lv_unit = 1;
    for ( ; ( (auto7EC067F6_ai >= 0 && lv_unit <= auto7EC067F6_ae) || (auto7EC067F6_ai <= 0 && lv_unit >= auto7EC067F6_ae) ) ; lv_unit += auto7EC067F6_ai ) {
        gv_unitType[lp_player][lp_phalanx][lv_unit] = null;
    }
}

void gf_UnitTypeSet (int lp_buildingRegion, int lp_phalanx) {
    int auto1FB420B7_ae;
    int auto1FB420B7_ai;
    int autoB581C470_ae;
    int autoB581C470_ai;
    int autoA9B7F0F9_ae;
    int autoA9B7F0F9_ai;
    int auto8DDB5E9F_ae;
    int auto8DDB5E9F_ai;

    // Variable Declarations
    region lv_buildingRegion;
    point lv_pointInitial;
    point lv_point;
    int lv_unitIndex;
    string lv_unitTypeID;
    int lv_unit;
    int lv_index;
    string lv_unitType;
    int lv_column;
    int lv_row;
    region lv_region;

    // Variable Initialization
    lv_buildingRegion = gv_buildingRegion[lp_buildingRegion][lp_phalanx];
    lv_unitTypeID = "";

    // Implementation
    gf_UnitTypeReset(gv_playerAtBuildingRegion[lp_buildingRegion], lp_phalanx);
    lv_pointInitial = PointWithOffset(RegionGetCenter(lv_buildingRegion), (-libNtve_gf_WidthOfRegion(lv_buildingRegion)/2+0.5), (libNtve_gf_HeightOfRegion(lv_buildingRegion)/2-0.5));
    auto1FB420B7_ae = FixedToInt(libNtve_gf_HeightOfRegion(lv_buildingRegion));
    auto1FB420B7_ai = 1;
    lv_row = 1;
    for ( ; ( (auto1FB420B7_ai >= 0 && lv_row <= auto1FB420B7_ae) || (auto1FB420B7_ai <= 0 && lv_row >= auto1FB420B7_ae) ) ; lv_row += auto1FB420B7_ai ) {
        autoB581C470_ae = FixedToInt(libNtve_gf_WidthOfRegion(lv_buildingRegion));
        autoB581C470_ai = 1;
        lv_column = 1;
        for ( ; ( (autoB581C470_ai >= 0 && lv_column <= autoB581C470_ae) || (autoB581C470_ai <= 0 && lv_column >= autoB581C470_ae) ) ; lv_column += autoB581C470_ai ) {
            lv_point = PointWithOffset(lv_pointInitial, (lv_column-1), (-lv_row+1));
            lv_region = RegionRect((PointGetX(lv_point)-0.5), (PointGetY(lv_point)-0.5), (PointGetX(lv_point)+0.5), (PointGetY(lv_point)+0.5));
            UnitGroupLoopBegin(UnitGroup(null, c_playerAny, lv_region, gv_buildingFilter, 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                lv_unitTypeID = (UnitGetType(UnitGroupLoopCurrent()));
                autoA9B7F0F9_ae = UserDataFieldValueCount(gv_unitTypeUserType, "UnitType");
                autoA9B7F0F9_ai = 1;
                lv_index = 1;
                for ( ; ( (autoA9B7F0F9_ai >= 0 && lv_index <= autoA9B7F0F9_ae) || (autoA9B7F0F9_ai <= 0 && lv_index >= autoA9B7F0F9_ae) ) ; lv_index += autoA9B7F0F9_ai ) {
                    auto8DDB5E9F_ae = UserDataGetInt(gv_unitTypeUserType, (lv_unitTypeID), "Count", lv_index);
                    auto8DDB5E9F_ai = 1;
                    lv_unit = 1;
                    for ( ; ( (auto8DDB5E9F_ai >= 0 && lv_unit <= auto8DDB5E9F_ae) || (auto8DDB5E9F_ai <= 0 && lv_unit >= auto8DDB5E9F_ae) ) ; lv_unit += auto8DDB5E9F_ai ) {
                        if ((lv_unitIndex < gv_unitMaximumCountPerPhalanx)) {
                            lv_unitType = UserDataGetUnit(gv_unitTypeUserType, (lv_unitTypeID), "UnitType", lv_index);
                            if ((lv_unitType != null)) {
                                lv_unitIndex += 1;
                                gv_unitType[gv_playerAtBuildingRegion[lp_buildingRegion]][lp_phalanx][lv_unitIndex] = lv_unitType;
                                gv_buildingScore[gv_playerAtBuildingRegion[lp_buildingRegion]] += gf_UnitTypeGetKillGold(lv_unitType);
                            }

                        }

                    }
                }
            }
            UnitGroupLoopEnd();
        }
    }
}

void gf_CreepUnitTypeSetAll () {
    int autoD3D69F86_ae;
    int autoD3D69F86_ai;
    int auto586D93DE_ae;
    int auto586D93DE_ai;

    // Variable Declarations
    int lv_round;
    int lv_venue;
    int lv_count;
    int lv_index;
    string lv_roundID;
    string lv_unitType;
    text lv_description;
    string lv_path;

    // Variable Initialization
    lv_roundID = "";
    lv_path = "";

    // Implementation
    lv_count = UserDataFieldValueCount(gv_creepUnitTypeUserType, "UnitType");
    autoD3D69F86_ae = gv_roundCount;
    autoD3D69F86_ai = 1;
    lv_round = 1;
    for ( ; ( (autoD3D69F86_ai >= 0 && lv_round <= autoD3D69F86_ae) || (autoD3D69F86_ai <= 0 && lv_round >= autoD3D69F86_ae) ) ; lv_round += autoD3D69F86_ai ) {
        if ((gv_bonusRoundIsOn[lv_round] == true)) {
            auto586D93DE_ae = gv_venueMaximumCount;
            auto586D93DE_ai = 1;
            lv_venue = 1;
            for ( ; ( (auto586D93DE_ai >= 0 && lv_venue <= auto586D93DE_ae) || (auto586D93DE_ai <= 0 && lv_venue >= auto586D93DE_ae) ) ; lv_venue += auto586D93DE_ai ) {
                while ((gv_creepUnitType[lv_venue][lv_round] == null)) {
                    lv_index = RandomInt(1, lv_count);
                    lv_roundID = IntToString(lv_round);
                    lv_unitType = UserDataGetUnit(gv_creepUnitTypeUserType, (lv_roundID), "UnitType", lv_index);
                    if ((lv_unitType != null)) {
                        gv_creepUnitType[lv_venue][lv_round] = lv_unitType;
                        lv_description = UserDataGetText(gv_creepUnitTypeUserType, (lv_roundID), "Description", lv_index);
                        lv_path = CatalogFieldValueGet(c_gameCatalogActor, (lv_unitType), "UnitIcon", gv_playerAtVenue[lv_venue][lv_round]);
                        TextExpressionSetToken("Param/Expression/1FF8225B", "A", IntToText(lv_round));
                        TextExpressionSetToken("Param/Expression/1FF8225B", "B", UnitTypeGetName(lv_unitType));
                        TextExpressionSetToken("Param/Expression/0CC6CC27", "A", IntToText(lv_round));
                        TextExpressionSetToken("Param/Expression/0CC6CC27", "B", UnitTypeGetName(lv_unitType));
                        HelpPanelAddTip(PlayerGroupSingle(gv_playerAtVenue[lv_venue][lv_round]), TextExpressionAssemble("Param/Expression/1FF8225B"), lv_description, TextExpressionAssemble("Param/Expression/0CC6CC27"), (lv_path));
                    }

                }
            }
        }

    }
}

int gf_PointInBuildingRegionGetBuildingRegion (point lp_point) {
    int auto445667ED_ae;
    int auto445667ED_ai;
    int auto56E83FEC_ae;
    int auto56E83FEC_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    int lv_index;

    // Variable Initialization

    // Implementation
    auto445667ED_ae = gv_playerCount;
    auto445667ED_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (auto445667ED_ai >= 0 && lv_buildingRegion <= auto445667ED_ae) || (auto445667ED_ai <= 0 && lv_buildingRegion >= auto445667ED_ae) ) ; lv_buildingRegion += auto445667ED_ai ) {
        auto56E83FEC_ae = gv_phalanxMaximumCount;
        auto56E83FEC_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto56E83FEC_ai >= 0 && lv_phalanx <= auto56E83FEC_ae) || (auto56E83FEC_ai <= 0 && lv_phalanx >= auto56E83FEC_ae) ) ; lv_phalanx += auto56E83FEC_ai ) {
            if ((RegionContainsPoint(gv_buildingRegion[lv_buildingRegion][lv_phalanx], lp_point) == true)) {
                lv_index = lv_buildingRegion;
                break;
            }

        }
    }
    return lv_index;
}

int gf_PointInBuildingRegionGetPhalanx (point lp_point) {
    int auto55DA962B_ae;
    int auto55DA962B_ai;
    int auto85FB89EA_ae;
    int auto85FB89EA_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    int lv_index;

    // Variable Initialization

    // Implementation
    auto55DA962B_ae = gv_playerCount;
    auto55DA962B_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (auto55DA962B_ai >= 0 && lv_buildingRegion <= auto55DA962B_ae) || (auto55DA962B_ai <= 0 && lv_buildingRegion >= auto55DA962B_ae) ) ; lv_buildingRegion += auto55DA962B_ai ) {
        auto85FB89EA_ae = gv_phalanxMaximumCount;
        auto85FB89EA_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto85FB89EA_ai >= 0 && lv_phalanx <= auto85FB89EA_ae) || (auto85FB89EA_ai <= 0 && lv_phalanx >= auto85FB89EA_ae) ) ; lv_phalanx += auto85FB89EA_ai ) {
            if ((RegionContainsPoint(gv_buildingRegion[lv_buildingRegion][lv_phalanx], lp_point) == true)) {
                lv_index = lv_phalanx;
                break;
            }

        }
    }
    return lv_index;
}

void gf_PhalanxPlaceholderPositionAll () {
    int autoAC9475E9_ae;
    int autoAC9475E9_ai;
    string autoD69565C6_val;
    int auto89937CB2_ae;
    int auto89937CB2_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    string lv_unitType;

    // Variable Initialization

    // Implementation
    autoAC9475E9_ae = gv_playerCount;
    autoAC9475E9_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (autoAC9475E9_ai >= 0 && lv_buildingRegion <= autoAC9475E9_ae) || (autoAC9475E9_ai <= 0 && lv_buildingRegion >= autoAC9475E9_ae) ) ; lv_buildingRegion += autoAC9475E9_ai ) {
        autoD69565C6_val = PlayerRace(gv_playerAtBuildingRegion[lv_buildingRegion]);
        if (autoD69565C6_val == "Human") {
            lv_unitType = "HumanPhalanxPlaceholder";
        }
        else if (autoD69565C6_val == "NightElf") {
            lv_unitType = "NightElfPhalanxPlaceholder";
        }
        else if (autoD69565C6_val == "Orc") {
            lv_unitType = "OrcPhalanxPlaceholder";
        }
        else if (autoD69565C6_val == "Undead") {
            lv_unitType = "UndeadPhalanxPlaceholder";
        }
        else {
        }
        auto89937CB2_ae = gv_phalanxMaximumCount;
        auto89937CB2_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto89937CB2_ai >= 0 && lv_phalanx <= auto89937CB2_ae) || (auto89937CB2_ai <= 0 && lv_phalanx >= auto89937CB2_ae) ) ; lv_phalanx += auto89937CB2_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_unitType, c_unitCreateIgnorePlacement, gv_playerAtBuildingRegion[lv_buildingRegion], RegionGetCenter(gv_previewRegion[lv_buildingRegion][lv_phalanx]));
        }
    }
}

void gf_BuildingRegionSet (region lp_region, int lp_index, int lp_phalanx) {
    // Implementation
    gv_buildingRegion[lp_index][lp_phalanx] = lp_region;
}

void gf_PlayerAtBuildingRegionSet () {
    int auto7BA2738D_ae;
    int auto7BA2738D_ai;
    int autoAFA08525_ae;
    int autoAFA08525_ai;
    int autoCC12BC39_ae;
    int autoCC12BC39_ai;
    int auto675227E5_ae;
    int auto675227E5_ai;
    int auto84299E02_ae;
    int auto84299E02_ai;
    int auto66806086_ae;
    int auto66806086_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_targetBuildingRegion;
    int lv_phalanx;
    int lv_player;

    // Variable Initialization

    // Implementation
    auto7BA2738D_ae = gv_playerCount;
    auto7BA2738D_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (auto7BA2738D_ai >= 0 && lv_buildingRegion <= auto7BA2738D_ae) || (auto7BA2738D_ai <= 0 && lv_buildingRegion >= auto7BA2738D_ae) ) ; lv_buildingRegion += auto7BA2738D_ai ) {
        autoAFA08525_ae = gv_phalanxMaximumCount;
        autoAFA08525_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (autoAFA08525_ai >= 0 && lv_phalanx <= autoAFA08525_ae) || (autoAFA08525_ai <= 0 && lv_phalanx >= autoAFA08525_ae) ) ; lv_phalanx += autoAFA08525_ai ) {
            autoCC12BC39_ae = gv_playerCount;
            autoCC12BC39_ai = 1;
            lv_targetBuildingRegion = 1;
            for ( ; ( (autoCC12BC39_ai >= 0 && lv_targetBuildingRegion <= autoCC12BC39_ae) || (autoCC12BC39_ai <= 0 && lv_targetBuildingRegion >= autoCC12BC39_ae) ) ; lv_targetBuildingRegion += autoCC12BC39_ai ) {
                if ((RegionContainsPoint(gv_buildingRegion[lv_buildingRegion][lv_phalanx], PlayerStartLocation(gf_IndexGetUserPlayer(lv_targetBuildingRegion))) == true)) {
                    lv_player = gf_IndexGetUserPlayer(lv_targetBuildingRegion);
                }

            }
        }
        gv_playerAtBuildingRegion[lv_buildingRegion] = lv_player;
    }
    auto675227E5_ae = gv_playerCount;
    auto675227E5_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (auto675227E5_ai >= 0 && lv_buildingRegion <= auto675227E5_ae) || (auto675227E5_ai <= 0 && lv_buildingRegion >= auto675227E5_ae) ) ; lv_buildingRegion += auto675227E5_ai ) {
        auto84299E02_ae = gv_playerCount;
        auto84299E02_ai = 1;
        lv_targetBuildingRegion = 1;
        for ( ; ( (auto84299E02_ai >= 0 && lv_targetBuildingRegion <= auto84299E02_ae) || (auto84299E02_ai <= 0 && lv_targetBuildingRegion >= auto84299E02_ae) ) ; lv_targetBuildingRegion += auto84299E02_ai ) {
            auto66806086_ae = gv_phalanxMaximumCount;
            auto66806086_ai = 1;
            lv_phalanx = 1;
            for ( ; ( (auto66806086_ai >= 0 && lv_phalanx <= auto66806086_ae) || (auto66806086_ai <= 0 && lv_phalanx >= auto66806086_ae) ) ; lv_phalanx += auto66806086_ai ) {
                VisRevealerCreate(gv_playerAtBuildingRegion[lv_buildingRegion], gv_buildingRegion[lv_targetBuildingRegion][lv_phalanx]);
                VisRevealerEnable(VisRevealerLastCreated(), false);
                gv_buildingRegionRevealer[gv_playerAtBuildingRegion[lv_buildingRegion]][gv_playerAtBuildingRegion[lv_targetBuildingRegion]][lv_phalanx] = VisRevealerLastCreated();
                VisRevealerCreate(gv_playerAtBuildingRegion[lv_buildingRegion], gv_previewRegion[lv_targetBuildingRegion][lv_phalanx]);
                VisRevealerEnable(VisRevealerLastCreated(), false);
                gv_previewRegionRevealer[gv_playerAtBuildingRegion[lv_buildingRegion]][gv_playerAtBuildingRegion[lv_targetBuildingRegion]][lv_phalanx] = VisRevealerLastCreated();
            }
        }
    }
}

void gf_BuildingRegionRevealerEnable (bool lp_option, bool lp_debug) {
    int auto7A205652_ae;
    int auto7A205652_ai;
    int autoC6464245_ae;
    int autoC6464245_ai;
    int auto0BE29D09_ae;
    int auto0BE29D09_ai;
    int autoD7C6C14E_ae;
    int autoD7C6C14E_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    int lv_targetBuildingRegion;

    // Variable Initialization

    // Implementation
    gf_TeamAlianceSet(libNtve_ge_AllianceSetting_AllyWithSharedVision);
    auto7A205652_ae = gv_playerCount;
    auto7A205652_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (auto7A205652_ai >= 0 && lv_buildingRegion <= auto7A205652_ae) || (auto7A205652_ai <= 0 && lv_buildingRegion >= auto7A205652_ae) ) ; lv_buildingRegion += auto7A205652_ai ) {
        if ((lp_option == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "BuildArmy", 1);
            if ((gv_round > (gv_roundCount-gv_finalRoundCount))) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "BuildArmyFinal", 1);
            }
            else {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "BuildArmyFinal", 0);
            }
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "BuildArmy", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "BuildArmyFinal", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "BuildPhalanx", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "BuildPortal", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "CountUnit", 0);
        }
        autoC6464245_ae = gv_phalanxMaximumCount;
        autoC6464245_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (autoC6464245_ai >= 0 && lv_phalanx <= autoC6464245_ae) || (autoC6464245_ai <= 0 && lv_phalanx >= autoC6464245_ae) ) ; lv_phalanx += autoC6464245_ai ) {
            VisRevealerEnable(gv_buildingRegionRevealer[gv_playerAtBuildingRegion[lv_buildingRegion]][gv_playerAtBuildingRegion[lv_buildingRegion]][lv_phalanx], lp_option);
            VisRevealerEnable(gv_previewRegionRevealer[gv_playerAtBuildingRegion[lv_buildingRegion]][gv_playerAtBuildingRegion[lv_buildingRegion]][lv_phalanx], lp_option);
        }
        if ((lp_debug == true)) {
            auto0BE29D09_ae = gv_playerCount;
            auto0BE29D09_ai = 1;
            lv_targetBuildingRegion = 1;
            for ( ; ( (auto0BE29D09_ai >= 0 && lv_targetBuildingRegion <= auto0BE29D09_ae) || (auto0BE29D09_ai <= 0 && lv_targetBuildingRegion >= auto0BE29D09_ae) ) ; lv_targetBuildingRegion += auto0BE29D09_ai ) {
                autoD7C6C14E_ae = gv_phalanxMaximumCount;
                autoD7C6C14E_ai = 1;
                lv_phalanx = 1;
                for ( ; ( (autoD7C6C14E_ai >= 0 && lv_phalanx <= autoD7C6C14E_ae) || (autoD7C6C14E_ai <= 0 && lv_phalanx >= autoD7C6C14E_ae) ) ; lv_phalanx += autoD7C6C14E_ai ) {
                    VisRevealerEnable(gv_buildingRegionRevealer[gv_playerAtBuildingRegion[lv_buildingRegion]][gv_playerAtBuildingRegion[lv_targetBuildingRegion]][lv_phalanx], lp_option);
                    VisRevealerEnable(gv_previewRegionRevealer[gv_playerAtBuildingRegion[lv_buildingRegion]][gv_playerAtBuildingRegion[lv_targetBuildingRegion]][lv_phalanx], lp_option);
                }
            }
        }

    }
}

bool gf_RegionContainsPointWithOffset (point lp_point, region lp_region, int lp_x, int lp_y) {
    // Implementation
    if ((RegionContainsPoint(lp_region, PointWithOffsetPolar(lp_point, (lp_x/2-0.5), (0.0+0))) == true) && (RegionContainsPoint(lp_region, PointWithOffsetPolar(lp_point, (lp_x/2-0.5), (0.0+180))) == true) && (RegionContainsPoint(lp_region, PointWithOffsetPolar(lp_point, (lp_y/2-0.5), (0.0+90))) == true) && (RegionContainsPoint(lp_region, PointWithOffsetPolar(lp_point, (lp_y/2-0.5), (0.0+270))) == true)) {
        return true;
    }
    else {
        return false;
    }
}

void gf_CreepPointSet (point lp_point, int lp_index) {
    // Implementation
    gv_creepPoint[lp_index] = lp_point;
}

void gf_VenueInitialSet (region lp_region, int lp_index, fixed lp_facing) {
    int auto4F71C440_ae;
    int auto4F71C440_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    gv_venueInitial[lp_index] = lp_region;
    gv_venueInitialFacing[lp_index] = lp_facing;
    auto4F71C440_ae = gv_playerCount;
    auto4F71C440_ai = 1;
    lv_player = 1;
    for ( ; ( (auto4F71C440_ai >= 0 && lv_player <= auto4F71C440_ae) || (auto4F71C440_ai <= 0 && lv_player >= auto4F71C440_ae) ) ; lv_player += auto4F71C440_ai ) {
        VisRevealerCreate(gf_IndexGetUserPlayer(lv_player), gv_venueInitial[lp_index]);
        VisRevealerEnable(VisRevealerLastCreated(), false);
        gv_venueInitialRevealer[lp_index][gf_IndexGetUserPlayer(lv_player)] = VisRevealerLastCreated();
    }
}

void gf_BonusVenueSet (region lp_region, int lp_index, fixed lp_facing) {
    int auto70428F3A_ae;
    int auto70428F3A_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    gv_bonusVenue[lp_index] = lp_region;
    gv_bonusVenueFacing[lp_index] = lp_facing;
    auto70428F3A_ae = gv_playerCount;
    auto70428F3A_ai = 1;
    lv_player = 1;
    for ( ; ( (auto70428F3A_ai >= 0 && lv_player <= auto70428F3A_ae) || (auto70428F3A_ai <= 0 && lv_player >= auto70428F3A_ae) ) ; lv_player += auto70428F3A_ai ) {
        VisRevealerCreate(gf_IndexGetUserPlayer(lv_player), gv_bonusVenue[lp_index]);
        VisRevealerEnable(VisRevealerLastCreated(), false);
        gv_bonusVenueRevealer[lp_index][gf_IndexGetUserPlayer(lv_player)] = VisRevealerLastCreated();
    }
}

void gf_VenueRevealerEnable (int lp_round, bool lp_option) {
    int auto9938AF12_ae;
    int auto9938AF12_ai;

    // Variable Declarations
    int lv_venue;

    // Variable Initialization

    // Implementation
    gf_TeamAlianceSet(libNtve_ge_AllianceSetting_Ally);
    auto9938AF12_ae = gv_venueMaximumCount;
    auto9938AF12_ai = 1;
    lv_venue = 1;
    for ( ; ( (auto9938AF12_ai >= 0 && lv_venue <= auto9938AF12_ae) || (auto9938AF12_ai <= 0 && lv_venue >= auto9938AF12_ae) ) ; lv_venue += auto9938AF12_ai ) {
        if ((gv_playerAtVenue[lv_venue][lp_round] != -1)) {
            if ((lp_option == true)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtVenue[lv_venue][lp_round], "BuildPhalanx", 1);
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtVenue[lv_venue][lp_round], "BuildPortal", 1);
            }
            else {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtVenue[lv_venue][lp_round], "BuildArmy", 0);
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtVenue[lv_venue][lp_round], "BuildPhalanx", 0);
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtVenue[lv_venue][lp_round], "BuildPortal", 0);
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtVenue[lv_venue][lp_round], "CountUnit", 0);
            }
            VisRevealerEnable(gv_venueRevealer[lv_venue][gv_playerAtVenue[lv_venue][lp_round]], lp_option);
        }

    }
}

void gf_BonusVenueReplace () {
    int auto71E26CD0_ae;
    int auto71E26CD0_ai;
    int autoC7B8D634_ae;
    int autoC7B8D634_ai;

    // Variable Declarations
    int lv_venue;
    int lv_index;

    // Variable Initialization

    // Implementation
    auto71E26CD0_ae = gv_venueMaximumCount;
    auto71E26CD0_ai = 1;
    lv_venue = 1;
    for ( ; ( (auto71E26CD0_ai >= 0 && lv_venue <= auto71E26CD0_ae) || (auto71E26CD0_ai <= 0 && lv_venue >= auto71E26CD0_ae) ) ; lv_venue += auto71E26CD0_ai ) {
        gv_venue[lv_venue] = gv_bonusVenue[lv_venue];
        gv_venueFacing[lv_venue] = gv_bonusVenueFacing[lv_venue];
        autoC7B8D634_ae = gv_playerMaximumIndex;
        autoC7B8D634_ai = 1;
        lv_index = 0;
        for ( ; ( (autoC7B8D634_ai >= 0 && lv_index <= autoC7B8D634_ae) || (autoC7B8D634_ai <= 0 && lv_index >= autoC7B8D634_ae) ) ; lv_index += autoC7B8D634_ai ) {
            gv_venueRevealer[lv_venue][lv_index] = gv_bonusVenueRevealer[lv_venue][lv_index];
        }
    }
}

void gf_VenueInitialReplace () {
    int autoF5493130_ae;
    int autoF5493130_ai;
    int auto5D7B6D3C_ae;
    int auto5D7B6D3C_ai;

    // Variable Declarations
    int lv_venue;
    int lv_index;

    // Variable Initialization

    // Implementation
    autoF5493130_ae = gv_venueMaximumCount;
    autoF5493130_ai = 1;
    lv_venue = 1;
    for ( ; ( (autoF5493130_ai >= 0 && lv_venue <= autoF5493130_ae) || (autoF5493130_ai <= 0 && lv_venue >= autoF5493130_ae) ) ; lv_venue += autoF5493130_ai ) {
        gv_venue[lv_venue] = gv_venueInitial[lv_venue];
        gv_venueFacing[lv_venue] = gv_venueInitialFacing[lv_venue];
        auto5D7B6D3C_ae = gv_playerMaximumIndex;
        auto5D7B6D3C_ai = 1;
        lv_index = 0;
        for ( ; ( (auto5D7B6D3C_ai >= 0 && lv_index <= auto5D7B6D3C_ae) || (auto5D7B6D3C_ai <= 0 && lv_index >= auto5D7B6D3C_ae) ) ; lv_index += auto5D7B6D3C_ai ) {
            gv_venueRevealer[lv_venue][lv_index] = gv_venueInitialRevealer[lv_venue][lv_index];
        }
    }
}

void gf_PathingBlockerRemove (region lp_region) {
    unitgroup autoB49813FC_g;
    int autoB49813FC_u;

    // Variable Declarations
    unit lv_unit;

    // Variable Initialization

    // Implementation
    autoB49813FC_g = UnitGroup(null, c_playerAny, lp_region, gv_pathBlockerFilter, 0);
    autoB49813FC_u = 1;
    for ( ; autoB49813FC_u <= UnitGroupCount(autoB49813FC_g, c_unitCountAll) ; autoB49813FC_u += BoolToInt(lv_unit == UnitGroupUnit(autoB49813FC_g, autoB49813FC_u)) ) {
        lv_unit = UnitGroupUnit(autoB49813FC_g, autoB49813FC_u);
        UnitRemove(lv_unit);
    }
}

void gf_ValidRegionFillHidden () {
    int autoE9757E3F_ae;
    int autoE9757E3F_ai;
    int auto17BA70F9_ae;
    int auto17BA70F9_ai;
    int auto5E9A4BF1_ae;
    int auto5E9A4BF1_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_targetBuildingRegion;
    int lv_phalanx;

    // Variable Initialization

    // Implementation
    autoE9757E3F_ae = gv_playerCount;
    autoE9757E3F_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (autoE9757E3F_ai >= 0 && lv_buildingRegion <= autoE9757E3F_ae) || (autoE9757E3F_ai <= 0 && lv_buildingRegion >= autoE9757E3F_ae) ) ; lv_buildingRegion += autoE9757E3F_ai ) {
        VisFillArea(gv_playerAtBuildingRegion[lv_buildingRegion], RegionEntireMap(), c_fillTypeHidden, false);
        VisRevealArea(gv_playerAtBuildingRegion[lv_buildingRegion], gv_battlefield, gv_minimumPeriod, false);
        auto17BA70F9_ae = gv_playerCount;
        auto17BA70F9_ai = 1;
        lv_targetBuildingRegion = 1;
        for ( ; ( (auto17BA70F9_ai >= 0 && lv_targetBuildingRegion <= auto17BA70F9_ae) || (auto17BA70F9_ai <= 0 && lv_targetBuildingRegion >= auto17BA70F9_ae) ) ; lv_targetBuildingRegion += auto17BA70F9_ai ) {
            auto5E9A4BF1_ae = gv_phalanxMaximumCount;
            auto5E9A4BF1_ai = 1;
            lv_phalanx = 1;
            for ( ; ( (auto5E9A4BF1_ai >= 0 && lv_phalanx <= auto5E9A4BF1_ae) || (auto5E9A4BF1_ai <= 0 && lv_phalanx >= auto5E9A4BF1_ae) ) ; lv_phalanx += auto5E9A4BF1_ai ) {
                VisRevealArea(gv_playerAtBuildingRegion[lv_buildingRegion], gv_buildingRegion[lv_targetBuildingRegion][lv_phalanx], gv_minimumPeriod, false);
                VisRevealArea(gv_playerAtBuildingRegion[lv_buildingRegion], gv_previewRegion[lv_targetBuildingRegion][lv_phalanx], gv_minimumPeriod, false);
            }
        }
    }
}

void gf_BattlefieldSetAll (region lp_region) {
    int autoD3AB0CCB_ae;
    int autoD3AB0CCB_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    gv_battlefield = lp_region;
    autoD3AB0CCB_ae = gv_playerCount;
    autoD3AB0CCB_ai = 1;
    lv_player = 1;
    for ( ; ( (autoD3AB0CCB_ai >= 0 && lv_player <= autoD3AB0CCB_ae) || (autoD3AB0CCB_ai <= 0 && lv_player >= autoD3AB0CCB_ae) ) ; lv_player += autoD3AB0CCB_ai ) {
        VisRevealerCreate(gf_IndexGetUserPlayer(lv_player), gv_battlefield);
        VisRevealerEnable(VisRevealerLastCreated(), false);
        gv_battlefieldRevealer[gf_IndexGetUserPlayer(lv_player)] = VisRevealerLastCreated();
        VisRevealerCreate(gf_UserPlayerGetMirrorPlayer(gf_IndexGetUserPlayer(lv_player)), gv_battlefield);
        VisRevealerEnable(VisRevealerLastCreated(), false);
        gv_battlefieldRevealer[gf_UserPlayerGetMirrorPlayer(gf_IndexGetUserPlayer(lv_player))] = VisRevealerLastCreated();
    }
}

void gf_BattlefieldRevealerEnable (bool lp_option) {
    int auto2F01600A_ae;
    int auto2F01600A_ai;
    int auto8E8C97C1_ae;
    int auto8E8C97C1_ai;
    int autoB0A25901_ae;
    int autoB0A25901_ai;

    // Variable Declarations
    int lv_player;
    int lv_targetPlayer;
    int lv_phalanx;

    // Variable Initialization

    // Implementation
    auto2F01600A_ae = gv_playerCount;
    auto2F01600A_ai = 1;
    lv_player = 1;
    for ( ; ( (auto2F01600A_ai >= 0 && lv_player <= auto2F01600A_ae) || (auto2F01600A_ai <= 0 && lv_player >= auto2F01600A_ae) ) ; lv_player += auto2F01600A_ai ) {
        if ((lp_option == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(gf_IndexGetUserPlayer(lv_player), "BuildArmy", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gf_IndexGetUserPlayer(lv_player), "BuildPhalanx", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gf_IndexGetUserPlayer(lv_player), "BuildPortal", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gf_IndexGetUserPlayer(lv_player), "CountUnit", 0);
        }

        VisRevealerEnable(gv_battlefieldRevealer[gf_IndexGetUserPlayer(lv_player)], lp_option);
        VisRevealerEnable(gv_battlefieldRevealer[gf_UserPlayerGetMirrorPlayer(gf_IndexGetUserPlayer(lv_player))], lp_option);
        auto8E8C97C1_ae = gv_playerCount;
        auto8E8C97C1_ai = 1;
        lv_targetPlayer = 1;
        for ( ; ( (auto8E8C97C1_ai >= 0 && lv_targetPlayer <= auto8E8C97C1_ae) || (auto8E8C97C1_ai <= 0 && lv_targetPlayer >= auto8E8C97C1_ae) ) ; lv_targetPlayer += auto8E8C97C1_ai ) {
            autoB0A25901_ae = gv_phalanxMaximumCount;
            autoB0A25901_ai = 1;
            lv_phalanx = 1;
            for ( ; ( (autoB0A25901_ai >= 0 && lv_phalanx <= autoB0A25901_ae) || (autoB0A25901_ai <= 0 && lv_phalanx >= autoB0A25901_ae) ) ; lv_phalanx += autoB0A25901_ai ) {
                VisRevealerEnable(gv_buildingRegionRevealer[gf_IndexGetUserPlayer(lv_player)][gf_IndexGetUserPlayer(lv_targetPlayer)][lv_phalanx], lp_option);
                VisRevealerEnable(gv_previewRegionRevealer[gf_IndexGetUserPlayer(lv_player)][gf_IndexGetUserPlayer(lv_targetPlayer)][lv_phalanx], lp_option);
            }
        }
    }
}

void gf_BattlefieldReset () {
    unitgroup auto496ACF5B_g;
    int auto496ACF5B_u;
    unitgroup auto14C85347_g;
    int auto14C85347_u;
    unitgroup auto6C30F1AF_g;
    int auto6C30F1AF_u;
    unitgroup auto7B84B02D_g;
    int auto7B84B02D_u;
    unitgroup auto33EFD775_g;
    int auto33EFD775_u;
    unitgroup auto007C6EBD_g;
    int auto007C6EBD_u;

    // Variable Declarations
    unit lv_unit;

    // Variable Initialization

    // Implementation
    gf_ReserveUnitIndexResetAll();
    auto496ACF5B_g = UnitGroup(null, c_playerAny, gv_battlefield, gv_phalanxFilter, 0);
    auto496ACF5B_u = 1;
    for ( ; auto496ACF5B_u <= UnitGroupCount(auto496ACF5B_g, c_unitCountAll) ; auto496ACF5B_u += BoolToInt(lv_unit == UnitGroupUnit(auto496ACF5B_g, auto496ACF5B_u)) ) {
        lv_unit = UnitGroupUnit(auto496ACF5B_g, auto496ACF5B_u);
        UnitRemove(lv_unit);
    }
    auto14C85347_g = UnitGroup(null, c_playerAny, gv_battlefield, gv_portalFilter, 0);
    auto14C85347_u = 1;
    for ( ; auto14C85347_u <= UnitGroupCount(auto14C85347_g, c_unitCountAll) ; auto14C85347_u += BoolToInt(lv_unit == UnitGroupUnit(auto14C85347_g, auto14C85347_u)) ) {
        lv_unit = UnitGroupUnit(auto14C85347_g, auto14C85347_u);
        UnitRemove(lv_unit);
    }
    auto6C30F1AF_g = UnitGroup(null, c_playerAny, gv_battlefield, gv_creepFilter, 0);
    auto6C30F1AF_u = 1;
    for ( ; auto6C30F1AF_u <= UnitGroupCount(auto6C30F1AF_g, c_unitCountAll) ; auto6C30F1AF_u += BoolToInt(lv_unit == UnitGroupUnit(auto6C30F1AF_g, auto6C30F1AF_u)) ) {
        lv_unit = UnitGroupUnit(auto6C30F1AF_g, auto6C30F1AF_u);
        UnitRemove(lv_unit);
    }
    auto7B84B02D_g = UnitGroup(null, c_playerAny, gv_battlefield, gv_unitFilter, 0);
    auto7B84B02D_u = 1;
    for ( ; auto7B84B02D_u <= UnitGroupCount(auto7B84B02D_g, c_unitCountAll) ; auto7B84B02D_u += BoolToInt(lv_unit == UnitGroupUnit(auto7B84B02D_g, auto7B84B02D_u)) ) {
        lv_unit = UnitGroupUnit(auto7B84B02D_g, auto7B84B02D_u);
        UnitRemove(lv_unit);
    }
    auto33EFD775_g = UnitGroup(null, c_playerAny, gv_battlefield, UnitFilter((1 << c_targetFilterMissile), 0, 0, 0), 0);
    auto33EFD775_u = 1;
    for ( ; auto33EFD775_u <= UnitGroupCount(auto33EFD775_g, c_unitCountAll) ; auto33EFD775_u += BoolToInt(lv_unit == UnitGroupUnit(auto33EFD775_g, auto33EFD775_u)) ) {
        lv_unit = UnitGroupUnit(auto33EFD775_g, auto33EFD775_u);
        UnitRemove(lv_unit);
    }
    auto007C6EBD_g = UnitGroup(null, c_playerAny, gv_battlefield, UnitFilter(0, (1 << (c_targetFilterDead - 32)), 0, 0), 0);
    auto007C6EBD_u = 1;
    for ( ; auto007C6EBD_u <= UnitGroupCount(auto007C6EBD_g, c_unitCountAll) ; auto007C6EBD_u += BoolToInt(lv_unit == UnitGroupUnit(auto007C6EBD_g, auto007C6EBD_u)) ) {
        lv_unit = UnitGroupUnit(auto007C6EBD_g, auto007C6EBD_u);
        UnitRemove(lv_unit);
    }
}

bool gf_IsFinalRound (int lp_round) {
    // Implementation
    if ((lp_round > (gv_roundCount-gv_finalRoundCount))) {
        return true;
    }
    else {
        return false;
    }
}

void gf_RoundGoldSet (int lp_round, int lp_value) {
    // Implementation
    gv_roundGold[lp_round] = lp_value;
}

void gf_BonusRoundSet (bool lp_on, int lp_round) {
    // Implementation
    gv_bonusRoundIsOn[lp_round] = lp_on;
}

void gf_GoldAdd (int lp_round) {
    int auto5502A803_ae;
    int auto5502A803_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    auto5502A803_ae = gv_playerCount;
    auto5502A803_ai = 1;
    lv_player = 1;
    for ( ; ( (auto5502A803_ai >= 0 && lv_player <= auto5502A803_ae) || (auto5502A803_ai <= 0 && lv_player >= auto5502A803_ae) ) ; lv_player += auto5502A803_ai ) {
        PlayerModifyPropertyInt(gf_IndexGetUserPlayer(lv_player), c_playerPropTerrazine, c_playerPropOperAdd, gv_buildingScore[gf_IndexGetUserPlayer(lv_player)]);
        PlayerModifyPropertyInt(gf_IndexGetUserPlayer(lv_player), c_playerPropTerrazine, c_playerPropOperAdd, gv_roundGold[lp_round]);
        gv_buildingScore[gf_IndexGetUserPlayer(lv_player)] = 0;
        gv_killScore[gf_IndexGetUserPlayer(lv_player)] = 0;
    }
}

void gf_UserPlayerSet (int lp_index, int lp_player) {
    // Implementation
    gv_userPlayer[lp_index] = lp_player;
}

void gf_TeamAlianceSet (int lp_option) {
    int auto8C52CAEB_ae;
    int auto8C52CAEB_ai;

    // Variable Declarations
    int lv_team;

    // Variable Initialization

    // Implementation
    auto8C52CAEB_ae = gv_teamCount;
    auto8C52CAEB_ai = 1;
    lv_team = 1;
    for ( ; ( (auto8C52CAEB_ai >= 0 && lv_team <= auto8C52CAEB_ae) || (auto8C52CAEB_ai <= 0 && lv_team >= auto8C52CAEB_ae) ) ; lv_team += auto8C52CAEB_ai ) {
        libNtve_gf_SetPlayerGroupAlliance(gv_teamGroup[lv_team], lp_option);
    }
}

void gf_MirrorPlayerSet (int lp_index, int lp_player) {
    // Implementation
    gv_mirrorPlayer[lp_index] = lp_player;
}

int gf_UnitTypeGetKillGold (string lp_unitType) {
    // Variable Declarations
    int lv_value;

    // Variable Initialization

    // Implementation
    lv_value = CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "KillResource[" + IntToString(2) + "]", c_playerAny);
    return lv_value;
}

fixed gf_PointGetVenueFacing (point lp_point) {
    int auto4511ACF1_ae;
    int auto4511ACF1_ai;

    // Variable Declarations
    int lv_venue;
    fixed lv_facing;

    // Variable Initialization

    // Implementation
    auto4511ACF1_ae = gv_venueMaximumCount;
    auto4511ACF1_ai = 1;
    lv_venue = 1;
    for ( ; ( (auto4511ACF1_ai >= 0 && lv_venue <= auto4511ACF1_ae) || (auto4511ACF1_ai <= 0 && lv_venue >= auto4511ACF1_ae) ) ; lv_venue += auto4511ACF1_ai ) {
        if ((RegionContainsPoint(gv_venue[lv_venue], lp_point) == true)) {
            lv_facing = gv_venueFacing[lv_venue];
        }

    }
    return lv_facing;
}

int gf_UnitTypeGetPhalanxCapacity (string lp_unitType) {
    // Variable Declarations
    int lv_capacity;
    int lv_columnCount;
    int lv_rowCount;

    // Variable Initialization
    lv_columnCount = UserDataGetInt(gv_phalanxUserType, ((lp_unitType)), "Column", 1);
    lv_rowCount = UserDataGetInt(gv_phalanxUserType, ((lp_unitType)), "Row", 1);

    // Implementation
    lv_capacity = (lv_columnCount*lv_rowCount);
    return lv_capacity;
}

string gf_RaceGetPhalanxType (string lp_race) {
    string auto8472057B_val;

    // Variable Declarations
    string lv_unitType;

    // Variable Initialization

    // Implementation
    auto8472057B_val = lp_race;
    if (auto8472057B_val == "Human") {
        lv_unitType = "flag";
    }
    else if (auto8472057B_val == "NightElf") {
        lv_unitType = "nflg";
    }
    else if (auto8472057B_val == "Orc") {
        lv_unitType = "oflg";
    }
    else if (auto8472057B_val == "Undead") {
        lv_unitType = "uflg";
    }
    else {
    }
    return lv_unitType;
}

int gf_MirrorPlayerGetUserPlayer (int lp_player) {
    int auto6B7EA45B_ae;
    int auto6B7EA45B_ai;

    // Variable Declarations
    int lv_player;
    int lv_userPlayer;

    // Variable Initialization

    // Implementation
    auto6B7EA45B_ae = gv_playerCount;
    auto6B7EA45B_ai = 1;
    lv_player = 1;
    for ( ; ( (auto6B7EA45B_ai >= 0 && lv_player <= auto6B7EA45B_ae) || (auto6B7EA45B_ai <= 0 && lv_player >= auto6B7EA45B_ae) ) ; lv_player += auto6B7EA45B_ai ) {
        if ((gv_mirrorPlayer[lv_player] == lp_player)) {
            lv_userPlayer = gv_userPlayer[lv_player];
        }

    }
    return lv_userPlayer;
}

int gf_UserPlayerGetMirrorPlayer (int lp_player) {
    int auto3DFDF622_ae;
    int auto3DFDF622_ai;

    // Variable Declarations
    int lv_player;
    int lv_mirrorPlayer;

    // Variable Initialization

    // Implementation
    auto3DFDF622_ae = gv_playerCount;
    auto3DFDF622_ai = 1;
    lv_player = 1;
    for ( ; ( (auto3DFDF622_ai >= 0 && lv_player <= auto3DFDF622_ae) || (auto3DFDF622_ai <= 0 && lv_player >= auto3DFDF622_ae) ) ; lv_player += auto3DFDF622_ai ) {
        if ((gv_userPlayer[lv_player] == lp_player)) {
            lv_mirrorPlayer = gv_mirrorPlayer[lv_player];
        }

    }
    return lv_mirrorPlayer;
}

int gf_IndexGetUserPlayer (int lp_index) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    lv_player = gv_userPlayer[lp_index];
    return lv_player;
}

region gf_IndexGetVenue (int lp_index) {
    // Implementation
    return gv_venue[lp_index];
}

void gf_ReserveUnitCreation2 (int lp_player, int lp_phalanx) {
    unitgroup auto3A9CB436_g;
    int auto3A9CB436_u;

    // Variable Declarations
    unit lv_phalanxUnit;
    int lv_phalanx;
    string lv_unitType;
    int lv_index;

    // Variable Initialization

    // Implementation
    auto3A9CB436_g = UnitGroup(null, gf_MirrorPlayerGetUserPlayer(lp_player), gv_battlefield, gv_phalanxFilter, 0);
    auto3A9CB436_u = 1;
    for ( ; auto3A9CB436_u <= UnitGroupCount(auto3A9CB436_g, c_unitCountAll) ; auto3A9CB436_u += BoolToInt(lv_phalanxUnit == UnitGroupUnit(auto3A9CB436_g, auto3A9CB436_u)) ) {
        lv_phalanxUnit = UnitGroupUnit(auto3A9CB436_g, auto3A9CB436_u);
        lv_phalanx = FixedToInt(UnitGetCustomValue(lv_phalanxUnit, gv_customValuePhalanx));
        if ((lp_phalanx == lv_phalanx)) {
            lv_index = (gf_UnitTypeGetPhalanxCapacity(UnitGetType(lv_phalanxUnit))+gv_reserveUnitIndex[gf_MirrorPlayerGetUserPlayer(lp_player)][lv_phalanx]);
            if ((lv_index < gv_unitMaximumCountPerPhalanx)) {
                gv_reserveUnitIndex[gf_MirrorPlayerGetUserPlayer(lp_player)][lv_phalanx] += 1;
                lv_unitType = gv_unitType[gf_MirrorPlayerGetUserPlayer(lp_player)][lv_phalanx][lv_index];
                TextExpressionSetToken("Param/Expression/399DFBF3", "A", IntToText(gv_reserveUnitIndex[0][1]));
                TextExpressionSetToken("Param/Expression/399DFBF3", "B", IntToText(gv_reserveUnitIndex[1][1]));
                TextExpressionSetToken("Param/Expression/399DFBF3", "C", IntToText(gv_reserveUnitIndex[2][1]));
                TextExpressionSetToken("Param/Expression/399DFBF3", "D", IntToText(gv_reserveUnitIndex[3][1]));
                TextExpressionSetToken("Param/Expression/399DFBF3", "E", IntToText(gv_reserveUnitIndex[4][1]));
                TextExpressionSetToken("Param/Expression/399DFBF3", "F", IntToText(gv_reserveUnitIndex[5][1]));
                TextExpressionSetToken("Param/Expression/399DFBF3", "G", IntToText(gv_reserveUnitIndex[6][1]));
                TextExpressionSetToken("Param/Expression/399DFBF3", "H", IntToText(gv_reserveUnitIndex[7][1]));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextExpressionAssemble("Param/Expression/399DFBF3"));
                TextExpressionSetToken("Param/Expression/FC06C74D", "A", IntToText(lv_phalanx));
                TextExpressionSetToken("Param/Expression/FC06C74D", "B", UnitTypeGetName(lv_unitType));
                TextExpressionSetToken("Param/Expression/FC06C74D", "C", IntToText(lv_index));
                UIDisplayMessage(PlayerGroupSingle(gf_MirrorPlayerGetUserPlayer(lp_player)), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/FC06C74D"));
                if ((lv_unitType != null)) {
                    gf_UnitCreate(lp_player, UnitGetPosition(lv_phalanxUnit), lv_unitType, lv_phalanxUnit);
                }

            }

        }

    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: MapInizialization
//--------------------------------------------------------------------------------------------------
bool gt_MapInizialization_Func (bool testConds, bool runActions) {
    playergroup autoE8E91B19_g;
    int autoE8E91B19_p;

    // Variable Declarations
    bool lv_debug;
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libGAwX_gt_AOmiMarker, false);
    TriggerExecute(gt_PlayerInizialization, true, false);
    TriggerExecute(gt_VenueInizialization, true, false);
    TriggerExecute(gt_BuidingRegionInizialization, true, false);
    TriggerExecute(gt_PreviewerPointInizialization, true, false);
    TriggerExecute(gt_RoundInitialization, true, false);
    gf_ModInizialization(lv_debug);
    autoE8E91B19_g = PlayerGroupActive(); 
    autoE8E91B19_p = 1;
    for ( ; autoE8E91B19_p <= PlayerGroupCount(autoE8E91B19_g) ; autoE8E91B19_p += BoolToInt(lv_player == PlayerGroupPlayer(autoE8E91B19_g, autoE8E91B19_p)) ) {
        lv_player = PlayerGroupPlayer(autoE8E91B19_g, autoE8E91B19_p);
        VisRevealArea(lv_player, RegionFromId(70), 0.0625, false);
        VisRevealArea(lv_player, RegionFromId(71), 0.0625, false);
    }
    libGAwX_gf_SetWar3TimeOfDay("13:00:00");
    libGAwX_gf_PauseUnpauseTimeOfDayWar3(true);
    MeleeInitUnits();
    gf_RoundStartLoop(lv_debug);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInizialization_Init () {
    gt_MapInizialization = TriggerCreate("gt_MapInizialization_Func");
    TriggerAddEventMapInit(gt_MapInizialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlayerInizialization
//--------------------------------------------------------------------------------------------------
bool gt_PlayerInizialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UserPlayerSet(1, 0);
    gf_MirrorPlayerSet(1, 8);
    gf_UserPlayerSet(2, 1);
    gf_MirrorPlayerSet(2, 9);
    gf_UserPlayerSet(3, 2);
    gf_MirrorPlayerSet(3, 10);
    gf_UserPlayerSet(4, 3);
    gf_MirrorPlayerSet(4, 11);
    gf_UserPlayerSet(5, 4);
    gf_MirrorPlayerSet(5, 12);
    gf_UserPlayerSet(6, 5);
    gf_MirrorPlayerSet(6, 13);
    gf_UserPlayerSet(7, 6);
    gf_MirrorPlayerSet(7, 14);
    gf_UserPlayerSet(8, 7);
    gf_MirrorPlayerSet(8, 15);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerInizialization_Init () {
    gt_PlayerInizialization = TriggerCreate("gt_PlayerInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: VenueInizialization
//--------------------------------------------------------------------------------------------------
bool gt_VenueInizialization_Func (bool testConds, bool runActions) {
    string auto480E4CF2_val;

    // Variable Declarations
    string lv_gameValue;

    // Variable Initialization
    lv_gameValue = GameAttributeGameValue("2");

    // Actions
    if (!runActions) {
        return true;
    }

    auto480E4CF2_val = lv_gameValue;
    if (auto480E4CF2_val == "0001") {
        gf_VenueInitialSet(RegionFromId(25), 1, 90.0);
        gf_VenueInitialSet(RegionFromId(27), 2, 270.0);
        gf_VenueInitialSet(RegionFromId(29), 3, 270.0);
        gf_VenueInitialSet(RegionFromId(31), 4, 90.0);
        gf_VenueInitialSet(RegionFromId(33), 5, 0.0);
        gf_VenueInitialSet(RegionFromId(34), 6, 180.0);
        gf_VenueInitialSet(RegionFromId(35), 7, 180.0);
        gf_VenueInitialSet(RegionFromId(36), 8, 0.0);
        gf_BonusVenueSet(RegionFromId(25), 1, 90.0);
        gf_BonusVenueSet(RegionFromId(29), 2, 270.0);
        gf_BonusVenueSet(RegionFromId(33), 3, 0.0);
        gf_BonusVenueSet(RegionFromId(35), 4, 180.0);
        gf_BonusVenueSet(RegionFromId(38), 5, 0.0);
        gf_BonusVenueSet(RegionFromId(39), 6, 180.0);
        gf_BonusVenueSet(RegionFromId(40), 7, 0.0);
        gf_BonusVenueSet(RegionFromId(41), 8, 180.0);
        gf_CreepPointSet(PointFromId(1622943121), 1);
        gf_CreepPointSet(PointFromId(9096037), 2);
        gf_CreepPointSet(PointFromId(914766699), 3);
        gf_CreepPointSet(PointFromId(2024075559), 4);
        gf_CreepPointSet(PointFromId(1413534366), 5);
        gf_CreepPointSet(PointFromId(775643380), 6);
        gf_CreepPointSet(PointFromId(1844541176), 7);
        gf_CreepPointSet(PointFromId(1335332667), 8);
    }
    else if (auto480E4CF2_val == "0002") {
        gf_VenueInitialSet(RegionFromId(25), 1, 90.0);
        gf_VenueInitialSet(RegionFromId(26), 2, 90.0);
        gf_PathingBlockerRemove(RegionFromId(26));
        gf_VenueInitialSet(RegionFromId(27), 3, 270.0);
        gf_VenueInitialSet(RegionFromId(28), 4, 270.0);
        gf_PathingBlockerRemove(RegionFromId(28));
        gf_VenueInitialSet(RegionFromId(29), 5, 270.0);
        gf_VenueInitialSet(RegionFromId(30), 6, 270.0);
        gf_PathingBlockerRemove(RegionFromId(30));
        gf_VenueInitialSet(RegionFromId(31), 7, 90.0);
        gf_VenueInitialSet(RegionFromId(32), 8, 90.0);
        gf_PathingBlockerRemove(RegionFromId(32));
        gf_PathingBlockerRemove(RegionFromId(42));
        gf_PathingBlockerRemove(RegionFromId(43));
        gf_PathingBlockerRemove(RegionFromId(44));
        gf_PathingBlockerRemove(RegionFromId(45));
        gf_BonusVenueSet(RegionFromId(25), 1, 90.0);
        gf_BonusVenueSet(RegionFromId(26), 2, 90.0);
        gf_BonusVenueSet(RegionFromId(29), 3, 270.0);
        gf_BonusVenueSet(RegionFromId(30), 4, 270.0);
        gf_BonusVenueSet(RegionFromId(33), 5, 0.0);
        gf_BonusVenueSet(RegionFromId(42), 6, 0.0);
        gf_BonusVenueSet(RegionFromId(35), 7, 180.0);
        gf_BonusVenueSet(RegionFromId(44), 8, 180.0);
        gf_CreepPointSet(PointFromId(1622943121), 1);
        gf_CreepPointSet(PointFromId(529173248), 2);
        gf_CreepPointSet(PointFromId(9096037), 3);
        gf_CreepPointSet(PointFromId(537789621), 4);
        gf_CreepPointSet(PointFromId(914766699), 5);
        gf_CreepPointSet(PointFromId(924364117), 6);
        gf_CreepPointSet(PointFromId(2024075559), 7);
        gf_CreepPointSet(PointFromId(478594730), 8);
    }
    else {
    }
    gf_BattlefieldSetAll(RegionFromId(37));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VenueInizialization_Init () {
    gt_VenueInizialization = TriggerCreate("gt_VenueInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BuidingRegionInizialization
//--------------------------------------------------------------------------------------------------
bool gt_BuidingRegionInizialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_BuildingRegionSet(RegionFromId(1), 1, 1);
    gf_BuildingRegionSet(RegionFromId(2), 1, 2);
    gf_BuildingRegionSet(RegionFromId(3), 1, 3);
    gf_BuildingRegionSet(RegionFromId(4), 2, 1);
    gf_BuildingRegionSet(RegionFromId(5), 2, 2);
    gf_BuildingRegionSet(RegionFromId(6), 2, 3);
    gf_BuildingRegionSet(RegionFromId(7), 3, 1);
    gf_BuildingRegionSet(RegionFromId(8), 3, 2);
    gf_BuildingRegionSet(RegionFromId(9), 3, 3);
    gf_BuildingRegionSet(RegionFromId(10), 4, 1);
    gf_BuildingRegionSet(RegionFromId(11), 4, 2);
    gf_BuildingRegionSet(RegionFromId(12), 4, 3);
    gf_BuildingRegionSet(RegionFromId(13), 5, 1);
    gf_BuildingRegionSet(RegionFromId(14), 5, 2);
    gf_BuildingRegionSet(RegionFromId(15), 5, 3);
    gf_BuildingRegionSet(RegionFromId(16), 6, 1);
    gf_BuildingRegionSet(RegionFromId(17), 6, 2);
    gf_BuildingRegionSet(RegionFromId(18), 6, 3);
    gf_BuildingRegionSet(RegionFromId(19), 7, 1);
    gf_BuildingRegionSet(RegionFromId(20), 7, 2);
    gf_BuildingRegionSet(RegionFromId(21), 7, 3);
    gf_BuildingRegionSet(RegionFromId(22), 8, 1);
    gf_BuildingRegionSet(RegionFromId(23), 8, 2);
    gf_BuildingRegionSet(RegionFromId(24), 8, 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuidingRegionInizialization_Init () {
    gt_BuidingRegionInizialization = TriggerCreate("gt_BuidingRegionInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PreviewerPointInizialization
//--------------------------------------------------------------------------------------------------
bool gt_PreviewerPointInizialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreviewerRegionSet(RegionFromId(46), 1, 1);
    gf_PreviewerRegionSet(RegionFromId(47), 1, 2);
    gf_PreviewerRegionSet(RegionFromId(48), 1, 3);
    gf_PreviewerRegionSet(RegionFromId(49), 2, 1);
    gf_PreviewerRegionSet(RegionFromId(50), 2, 2);
    gf_PreviewerRegionSet(RegionFromId(51), 2, 3);
    gf_PreviewerRegionSet(RegionFromId(52), 3, 1);
    gf_PreviewerRegionSet(RegionFromId(53), 3, 2);
    gf_PreviewerRegionSet(RegionFromId(54), 3, 3);
    gf_PreviewerRegionSet(RegionFromId(55), 4, 1);
    gf_PreviewerRegionSet(RegionFromId(56), 4, 2);
    gf_PreviewerRegionSet(RegionFromId(57), 4, 3);
    gf_PreviewerRegionSet(RegionFromId(58), 5, 1);
    gf_PreviewerRegionSet(RegionFromId(59), 5, 2);
    gf_PreviewerRegionSet(RegionFromId(60), 5, 3);
    gf_PreviewerRegionSet(RegionFromId(61), 6, 1);
    gf_PreviewerRegionSet(RegionFromId(62), 6, 2);
    gf_PreviewerRegionSet(RegionFromId(63), 6, 3);
    gf_PreviewerRegionSet(RegionFromId(64), 7, 1);
    gf_PreviewerRegionSet(RegionFromId(65), 7, 2);
    gf_PreviewerRegionSet(RegionFromId(66), 7, 3);
    gf_PreviewerRegionSet(RegionFromId(67), 8, 1);
    gf_PreviewerRegionSet(RegionFromId(68), 8, 2);
    gf_PreviewerRegionSet(RegionFromId(69), 8, 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PreviewerPointInizialization_Init () {
    gt_PreviewerPointInizialization = TriggerCreate("gt_PreviewerPointInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: RoundInitialization
//--------------------------------------------------------------------------------------------------
bool gt_RoundInitialization_Func (bool testConds, bool runActions) {
    string autoB7B0BFE0_val;

    // Variable Declarations
    string lv_gameValue;

    // Variable Initialization
    lv_gameValue = GameAttributeGameValue("2");

    // Actions
    if (!runActions) {
        return true;
    }

    autoB7B0BFE0_val = lv_gameValue;
    if (autoB7B0BFE0_val == "0001") {
        gf_RoundGoldSet(1, 750);
        gf_RoundGoldSet(2, 750);
        gf_RoundGoldSet(3, 750);
        gf_BonusRoundSet(true, 3);
        gf_RoundGoldSet(4, 1500);
        gf_RoundGoldSet(5, 1500);
        gf_RoundGoldSet(6, 1500);
        gf_RoundGoldSet(7, 1500);
        gf_BonusRoundSet(true, 7);
        gf_RoundGoldSet(8, 1500);
    }
    else if (autoB7B0BFE0_val == "0002") {
        gf_RoundGoldSet(1, 750);
        gf_RoundGoldSet(2, 750);
        gf_RoundGoldSet(3, 750);
        gf_BonusRoundSet(true, 3);
        gf_RoundGoldSet(4, 1500);
        gf_RoundGoldSet(5, 1500);
        gf_RoundGoldSet(6, 1500);
        gf_BonusRoundSet(true, 6);
        gf_RoundGoldSet(7, 1500);
    }
    else {
    }
    gf_SearchRadiusInFinalRoundSet(60.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoundInitialization_Init () {
    gt_RoundInitialization = TriggerCreate("gt_RoundInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pillage
//--------------------------------------------------------------------------------------------------
bool gt_Pillage_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(gf_MirrorPlayerGetUserPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_playerPropTerrazine, c_playerPropOperSubtract, CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "Asal", "DamageResponse.Cost.Resource[" + IntToString(2) + "]", gf_MirrorPlayerGetUserPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Pillage_Init () {
    gt_Pillage = TriggerCreate("gt_Pillage_Func");
    TriggerAddEventPlayerEffectUsed(gt_Pillage, c_playerAny, "AsalTriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adef - Defend - Init Register
//--------------------------------------------------------------------------------------------------
bool gt_AdefDefendInitRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_adefGroup, lv_unit) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GAw3_AddEventUnitDamaged(gt_AdefDefendDamaged, lv_unit, c_unitDamageTypeRanged, c_unitDamageNonFatal, null);
    UnitGroupAdd(gv_adefGroup, lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdefDefendInitRegister_Init () {
    gt_AdefDefendInitRegister = TriggerCreate("gt_AdefDefendInitRegister_Func");
    TriggerAddEventUnitBehaviorChange(gt_AdefDefendInitRegister, null, "Adef", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adef - Defend - Damaged
//--------------------------------------------------------------------------------------------------
bool gt_AdefDefendDamaged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_weapon;
    string lv_lM;
    string lv_atkType;
    fixed lv_triggerDamge;
    fixed lv_actualDamge;
    fixed lv_attemptedDamage;
    unit lv_footman;
    unit lv_source;
    unit lv_triggerAttaker;

    // Variable Initialization
    lv_weapon = ((EventUnitDamageEffect()));
    lv_lM = (((lv_weapon) + "LM"));
    lv_atkType = GAw3_WeaponAtkType(lv_weapon);
    lv_actualDamge = EventUnitDamageAmount();
    lv_attemptedDamage = EventUnitDamageAbsorbed();
    lv_footman = EventUnit();
    lv_source = EventUnitDamageSourceUnit();
    lv_triggerAttaker = lv_source;

    // Conditions
    if (testConds) {
        if (!((lv_actualDamge == 0.0))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_footman, "Adef") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(lv_source) == false)) {
        lv_triggerAttaker = lv_footman;
    }

    if (((lv_atkType == "DAMAGE_PIERCE") || (lv_atkType == "DAMAGE_CHAOS") || (lv_atkType == "DAMAGE_MAGIC") || (lv_atkType == "DAMAGE_SIEGE") || (lv_atkType == "spells"))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/4A3012AC"), true);
        if ((RandomFixed(0.0, 1.0) <= gv_adefDeflectChance)) {
            UnitCreateEffectUnit(lv_footman, "AdefVisualDummy", lv_footman);
            if ((lv_source != lv_footman) && (UnitTypeTestFlag(UnitGetType(lv_triggerAttaker), c_unitFlagPreventDefeat) == false)) {
                if ((CatalogEntryIsValid(c_gameCatalogEffect, lv_lM) == false)) {
                    lv_lM = ((lv_weapon));
                }

                UnitCreateEffectUnit(lv_footman, lv_lM, lv_source);
            }

        }
        else {
            lv_triggerDamge = (lv_attemptedDamage * gv_adefDamageTaken);
            UnitDamage(lv_triggerAttaker, "TriggerRangedDamge", lv_footman, lv_triggerDamge);
        }
    }
    else {
        lv_triggerDamge = lv_attemptedDamage;
        UnitDamage(lv_triggerAttaker, "TriggerRangedDamge", lv_footman, lv_triggerDamge);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdefDefendDamaged_Init () {
    gt_AdefDefendDamaged = TriggerCreate("gt_AdefDefendDamaged_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameAttributeInizialization
//--------------------------------------------------------------------------------------------------
bool gt_GameAttributeInizialization_Func (bool testConds, bool runActions) {
    string auto212C1D14_val;
    int auto5B9F364D_ae;
    int auto5B9F364D_ai;

    // Variable Declarations
    int lv_round;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto212C1D14_val = GameAttributeGameValue("2");
    if (auto212C1D14_val == "0001") {
        gv_teamCount = 8;
    }
    else if (auto212C1D14_val == "0002") {
        gv_teamCount = 4;
    }
    else {
    }
    gv_teamRoundCount = (gv_teamCount-1);
    gv_teamMemberCount = (gv_playerCount/gv_teamCount);
    gv_finalRoundCount = Log2I(gv_teamCount);
    gv_roundCount = (gv_playerCount-gv_teamMemberCount+gv_finalRoundCount);
    auto5B9F364D_ae = gv_finalRoundCount;
    auto5B9F364D_ai = 1;
    lv_round = 1;
    for ( ; ( (auto5B9F364D_ai >= 0 && lv_round <= auto5B9F364D_ae) || (auto5B9F364D_ai <= 0 && lv_round >= auto5B9F364D_ae) ) ; lv_round += auto5B9F364D_ai ) {
        gv_teamCountAlive[(gv_playerCount-gv_teamMemberCount+lv_round)] = (gv_teamCount/Pow2I(lv_round));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameAttributeInizialization_Init () {
    gt_GameAttributeInizialization = TriggerCreate("gt_GameAttributeInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AllianceInizialization
//--------------------------------------------------------------------------------------------------
bool gt_AllianceInizialization_Func (bool testConds, bool runActions) {
    int auto08C1CB82_ae;
    int auto08C1CB82_ai;
    int auto601CE801_ae;
    int auto601CE801_ai;
    int autoB3862A75_ae;
    int autoB3862A75_ai;

    // Variable Declarations
    int lv_team;
    int lv_teamMember;
    int lv_targetTeamMember;
    int lv_player;
    int lv_targetPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TeamAlianceSet(libNtve_ge_AllianceSetting_AllyWithSharedVision);
    auto08C1CB82_ae = gv_teamCount;
    auto08C1CB82_ai = 1;
    lv_team = 1;
    for ( ; ( (auto08C1CB82_ai >= 0 && lv_team <= auto08C1CB82_ae) || (auto08C1CB82_ai <= 0 && lv_team >= auto08C1CB82_ae) ) ; lv_team += auto08C1CB82_ai ) {
        libNtve_gf_SetPlayerGroupAlliance(gv_mirrorTeamGroup[lv_team], libNtve_ge_AllianceSetting_AllyWithSharedVision);
        auto601CE801_ae = gv_teamMemberCount;
        auto601CE801_ai = 1;
        lv_teamMember = 1;
        for ( ; ( (auto601CE801_ai >= 0 && lv_teamMember <= auto601CE801_ae) || (auto601CE801_ai <= 0 && lv_teamMember >= auto601CE801_ae) ) ; lv_teamMember += auto601CE801_ai ) {
            PlayerSetColorIndex(PlayerGroupPlayer(gv_mirrorTeamGroup[lv_team], lv_teamMember), PlayerGetColorIndex(PlayerGroupPlayer(gv_teamGroup[lv_team], lv_teamMember), false), true);
            autoB3862A75_ae = gv_teamMemberCount;
            autoB3862A75_ai = 1;
            lv_targetTeamMember = 1;
            for ( ; ( (autoB3862A75_ai >= 0 && lv_targetTeamMember <= autoB3862A75_ae) || (autoB3862A75_ai <= 0 && lv_targetTeamMember >= autoB3862A75_ae) ) ; lv_targetTeamMember += autoB3862A75_ai ) {
                libNtve_gf_SetAllianceOneWay(PlayerGroupPlayer(gv_mirrorTeamGroup[lv_team], lv_teamMember), PlayerGroupPlayer(gv_teamGroup[lv_team], lv_targetTeamMember), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
                libNtve_gf_SetAllianceOneWay(PlayerGroupPlayer(gv_teamGroup[lv_team], lv_teamMember), PlayerGroupPlayer(gv_mirrorTeamGroup[lv_team], lv_targetTeamMember), libNtve_ge_AllianceSetting_Ally);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AllianceInizialization_Init () {
    gt_AllianceInizialization = TriggerCreate("gt_AllianceInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ScoreBoardInizialization
//--------------------------------------------------------------------------------------------------
bool gt_ScoreBoardInizialization_Func (bool testConds, bool runActions) {
    int auto4D515329_ae;
    int auto4D515329_ai;
    int autoDD597A48_ae;
    int autoDD597A48_ai;
    int auto88B58956_ae;
    int auto88B58956_ai;

    // Variable Declarations
    int lv_column;
    int lv_row;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    BoardCreate(3, gv_playerCount, StringExternal("Param/Value/E25D915D"), Color(100.00, 100.00, 100.00));
    gv_scoreBoard = BoardLastCreated();
    BoardSetGroupCount(gv_scoreBoard, gv_teamCount);
    BoardItemSetText(gv_scoreBoard, 1, c_boardRowHeader, StringExternal("Param/Value/2A1862D6"));
    BoardItemSetText(gv_scoreBoard, 2, c_boardRowHeader, StringExternal("Param/Value/34CB2A3F"));
    BoardItemSetText(gv_scoreBoard, 3, c_boardRowHeader, StringExternal("Param/Value/11DBEEBD"));
    auto4D515329_ae = 3;
    auto4D515329_ai = 1;
    lv_column = 1;
    for ( ; ( (auto4D515329_ai >= 0 && lv_column <= auto4D515329_ae) || (auto4D515329_ai <= 0 && lv_column >= auto4D515329_ae) ) ; lv_column += auto4D515329_ai ) {
        BoardItemSetFontSize(gv_scoreBoard, lv_column, c_boardRowHeader, 20);
    }
    BoardSetPlayerColumn(gv_scoreBoard, 1, true);
    autoDD597A48_ae = gv_playerCount;
    autoDD597A48_ai = 1;
    lv_row = 1;
    for ( ; ( (autoDD597A48_ai >= 0 && lv_row <= autoDD597A48_ae) || (autoDD597A48_ai <= 0 && lv_row >= autoDD597A48_ae) ) ; lv_row += autoDD597A48_ai ) {
        BoardPlayerAdd(gv_scoreBoard, gf_IndexGetUserPlayer(lv_row));
        BoardRowSetGroup(gv_scoreBoard, lv_row, gf_PlayerGetTeam(gf_IndexGetUserPlayer(lv_row)));
        auto88B58956_ae = 3;
        auto88B58956_ai = 1;
        lv_column = 1;
        for ( ; ( (auto88B58956_ai >= 0 && lv_column <= auto88B58956_ae) || (auto88B58956_ai <= 0 && lv_column >= auto88B58956_ae) ) ; lv_column += auto88B58956_ai ) {
            if ((lv_column == 1)) {
                BoardItemSetFontSize(gv_scoreBoard, lv_column, lv_row, 20);
                BoardItemSetTextColor(gv_scoreBoard, lv_column, lv_row, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gf_IndexGetUserPlayer(lv_row), false)));
            }
            else if (((lv_column == 2) || (lv_column == 3))) {
                BoardItemSetFontSize(gv_scoreBoard, lv_column, lv_row, 16);
                BoardItemSetTextColor(gv_scoreBoard, lv_column, lv_row, Color(100.00, 100.00, 100.00));
                BoardItemSetProgressShow(gv_scoreBoard, lv_column, lv_row, true);
                BoardItemSetProgressColor(gv_scoreBoard, lv_column, lv_row, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gf_IndexGetUserPlayer(lv_row), false)), 1);
            }
        }
    }
    libNtve_gf_ShowHideLeaderboard(gv_scoreBoard, true, gv_uIPlayergroup);
    gf_BuildingScoreUpdate();
    gf_KillScoreUpdate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScoreBoardInizialization_Init () {
    gt_ScoreBoardInizialization = TriggerCreate("gt_ScoreBoardInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TimerInizialization
//--------------------------------------------------------------------------------------------------
bool gt_TimerInizialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TimerWindowCreate(gv_timer, StringExternal("Param/Value/00B60AA2"), false, false);
    gv_timerWindow = TimerWindowLastCreated();
    TimerWindowSetTimer(gv_timerWindow, gv_timer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerInizialization_Init () {
    gt_TimerInizialization = TriggerCreate("gt_TimerInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlayerInizialization 2
//--------------------------------------------------------------------------------------------------
bool gt_PlayerInizialization2_Func (bool testConds, bool runActions) {
    int auto9F3F8527_ae;
    int auto9F3F8527_ai;
    int auto6FEF6218_ae;
    int auto6FEF6218_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto9F3F8527_ae = gv_playerCount;
    auto9F3F8527_ai = 1;
    lv_player = 1;
    for ( ; ( (auto9F3F8527_ai >= 0 && lv_player <= auto9F3F8527_ae) || (auto9F3F8527_ai <= 0 && lv_player >= auto9F3F8527_ae) ) ; lv_player += auto9F3F8527_ai ) {
        libGAwX_gf_SetPlayerUIRace(gf_IndexGetUserPlayer(lv_player), libGAwX_gf_GenerateRaceFromRaceAttribute(GameAttributePlayerValue("[bnet:War3 Extra (GA)/0.0/60618,file:Mods\\WarCraft\\WarCraftDataAbil.SC2Mod]1", gf_IndexGetUserPlayer(lv_player))));
        PlayerSetState(gf_IndexGetUserPlayer(lv_player), c_playerStateFoodIgnored, true);
        PlayerSetState(gf_IndexGetUserPlayer(lv_player), c_playerStateShowWorldTip, true);
        PlayerOptionOverride(gf_IndexGetUserPlayer(lv_player), "simplecommandcard", "0");
        PlayerOptionOverride(gf_IndexGetUserPlayer(lv_player), "buildgridhint", "1");
        PlayerOptionOverride(gf_IndexGetUserPlayer(lv_player), "gametooltips", "1");
        PlayerOptionOverride(gf_IndexGetUserPlayer(lv_player), "selectuncontrolable", "1");
        if ((PlayerType(gf_IndexGetUserPlayer(lv_player)) == c_playerTypeComputer)) {
            PlayerGroupAdd(gv_aIGroup, gf_IndexGetUserPlayer(lv_player));
        }

    }
    auto6FEF6218_ae = gv_playerCount;
    auto6FEF6218_ai = 1;
    lv_player = 1;
    for ( ; ( (auto6FEF6218_ai >= 0 && lv_player <= auto6FEF6218_ae) || (auto6FEF6218_ai <= 0 && lv_player >= auto6FEF6218_ae) ) ; lv_player += auto6FEF6218_ai ) {
        AIStart(gf_UserPlayerGetMirrorPlayer(gf_IndexGetUserPlayer(lv_player)), false, 1000);
        TechTreeRequirementsEnable(gf_UserPlayerGetMirrorPlayer(gf_IndexGetUserPlayer(lv_player)), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerInizialization2_Init () {
    gt_PlayerInizialization2 = TriggerCreate("gt_PlayerInizialization2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DebugControlPressed
//--------------------------------------------------------------------------------------------------
bool gt_DebugControlPressed_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugControlPressed_Init () {
    gt_DebugControlPressed = TriggerCreate("gt_DebugControlPressed_Func");
    TriggerEnable(gt_DebugControlPressed, false);
    TriggerAddEventKeyPressed(gt_DebugControlPressed, c_playerAny, c_keyF5, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DebugKeyPressed
//--------------------------------------------------------------------------------------------------
bool gt_DebugKeyPressed_Func (bool testConds, bool runActions) {
    int auto67EB4C86_val;

    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    auto67EB4C86_val = EventKeyPressed();
    if (auto67EB4C86_val == c_keyF7) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "hpea", c_unitCreateIgnorePlacement, lv_player, PlayerStartLocation(lv_player));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ewsp", c_unitCreateIgnorePlacement, lv_player, PlayerStartLocation(lv_player));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "opeo", c_unitCreateIgnorePlacement, lv_player, PlayerStartLocation(lv_player));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "uaco", c_unitCreateIgnorePlacement, lv_player, PlayerStartLocation(lv_player));
        PlayerModifyPropertyInt(lv_player, c_playerPropTerrazine, c_playerPropOperSetTo, 100000);
        PlayerModifyPropertyInt(lv_player, c_playerPropCustom, c_playerPropOperSetTo, 100000);
        PlayerGroupClear(gv_aIGroup);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugKeyPressed_Init () {
    gt_DebugKeyPressed = TriggerCreate("gt_DebugKeyPressed_Func");
    TriggerEnable(gt_DebugKeyPressed, false);
    TriggerAddEventKeyPressed(gt_DebugKeyPressed, c_playerAny, c_keyNone, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DebugUnitRemove
//--------------------------------------------------------------------------------------------------
bool gt_DebugUnitRemove_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroupSelected(EventPlayer()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugUnitRemove_Init () {
    gt_DebugUnitRemove = TriggerCreate("gt_DebugUnitRemove_Func");
    TriggerEnable(gt_DebugUnitRemove, false);
    TriggerAddEventKeyPressed(gt_DebugUnitRemove, c_playerAny, c_keyR, true, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitDied
//--------------------------------------------------------------------------------------------------
bool gt_UnitDied_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(libNtve_gf_KillingUnit()) == true)) {
        if (((UnitFilterMatch(libNtve_gf_KillingUnit(), libNtve_gf_KillingPlayer(), gv_unitFilter) == true) || (UnitFilterMatch(libNtve_gf_KillingUnit(), libNtve_gf_KillingPlayer(), gv_creepFilter) == true))) {
            if ((UnitFilterMatch(libNtve_gf_KillingUnit(), libNtve_gf_KillingPlayer(), gv_creepFilter) == false)) {
                gf_KillScoreAndKillGoldAdd(gf_MirrorPlayerGetUserPlayer(libNtve_gf_KillingPlayer()), UnitGetType(EventUnit()));
            }
            else {
                PlayerModifyPropertyInt(libNtve_gf_KillingPlayer(), c_playerPropTerrazine, c_playerPropOperSubtract, gf_UnitTypeGetKillGold(UnitGetType(EventUnit())));
            }
        }

    }
    else {
        gf_KillScoreAndKillGoldAdd(gf_MirrorPlayerGetUserPlayer(libNtve_gf_KillingPlayer()), UnitGetType(EventUnit()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitDied_Init () {
    gt_UnitDied = TriggerCreate("gt_UnitDied_Func");
    TriggerEnable(gt_UnitDied, false);
    TriggerAddEventUnitDied(gt_UnitDied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CountUnit
//--------------------------------------------------------------------------------------------------
bool gt_CountUnit_Func (bool testConds, bool runActions) {
    int autoCC4D9D85_ae;
    int autoCC4D9D85_ai;
    int auto34F2A6B6_ae;
    int auto34F2A6B6_ai;
    int autoB9ACDFF3_ae;
    int autoB9ACDFF3_ai;
    int auto58451E01_ae;
    int auto58451E01_ai;
    int auto97749E16_ae;
    int auto97749E16_ai;
    int autoCB273F19_ae;
    int autoCB273F19_ai;
    int autoF6F70AFB_ae;
    int autoF6F70AFB_ai;

    // Variable Declarations
    unit lv_unit;
    int lv_player;
    int lv_team;
    int lv_teamMember;
    int[gv_teamMaximumCount + 1] lv_teamMemberCountAlive;
    int lv_teamCountAlive;
    int[gv_teamMaximumCount + 1] lv_teamAlive;
    bool lv_wait;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoCC4D9D85_ae = gv_teamCount;
    autoCC4D9D85_ai = 1;
    lv_team = 1;
    for ( ; ( (autoCC4D9D85_ai >= 0 && lv_team <= autoCC4D9D85_ae) || (autoCC4D9D85_ai <= 0 && lv_team >= autoCC4D9D85_ae) ) ; lv_team += autoCC4D9D85_ai ) {
        auto34F2A6B6_ae = gv_teamMemberCount;
        auto34F2A6B6_ai = 1;
        lv_teamMember = 1;
        for ( ; ( (auto34F2A6B6_ai >= 0 && lv_teamMember <= auto34F2A6B6_ae) || (auto34F2A6B6_ai <= 0 && lv_teamMember >= auto34F2A6B6_ae) ) ; lv_teamMember += auto34F2A6B6_ai ) {
            lv_player = PlayerGroupPlayer(gv_teamGroup[lv_team], lv_teamMember);
            if ((UnitGroupCount(UnitGroup(null, lv_player, gv_battlefield, gv_phalanxFilter, 0), c_unitCountAlive) > 0)) {
                lv_teamMemberCountAlive[lv_team] += 1;
            }

        }
    }
    autoB9ACDFF3_ae = gv_teamCount;
    autoB9ACDFF3_ai = 1;
    lv_team = 1;
    for ( ; ( (autoB9ACDFF3_ai >= 0 && lv_team <= autoB9ACDFF3_ae) || (autoB9ACDFF3_ai <= 0 && lv_team >= autoB9ACDFF3_ae) ) ; lv_team += autoB9ACDFF3_ai ) {
        if ((lv_teamMemberCountAlive[lv_team] > 0)) {
            lv_teamCountAlive += 1;
            lv_teamAlive[lv_teamCountAlive] = lv_team;
        }

    }
    if ((lv_teamCountAlive == gv_teamCountAlive[gv_round])) {
        auto58451E01_ae = gv_teamMaximumCount;
        auto58451E01_ai = 1;
        lv_team = 1;
        for ( ; ( (auto58451E01_ai >= 0 && lv_team <= auto58451E01_ae) || (auto58451E01_ai <= 0 && lv_team >= auto58451E01_ae) ) ; lv_team += auto58451E01_ai ) {
            gv_teamAlive[lv_team] = 0;
        }
        auto97749E16_ae = lv_teamCountAlive;
        auto97749E16_ai = 1;
        lv_team = 1;
        for ( ; ( (auto97749E16_ai >= 0 && lv_team <= auto97749E16_ae) || (auto97749E16_ai <= 0 && lv_team >= auto97749E16_ae) ) ; lv_team += auto97749E16_ai ) {
            gv_teamAlive[lv_team] = lv_teamAlive[lv_team];
        }
        gf_DisplayMessageAll(gv_round);
        if ((gf_IsFinalRound(gv_round) == true)) {
            lv_wait = false;
            gf_ScoreBoardRowColorUpdate(gv_round);
        }
        else {
            lv_wait = true;
        }
        if ((gv_round == gv_roundCount)) {
            autoCB273F19_ae = lv_teamCountAlive;
            autoCB273F19_ai = 1;
            lv_team = 1;
            for ( ; ( (autoCB273F19_ai >= 0 && lv_team <= autoCB273F19_ae) || (autoCB273F19_ai <= 0 && lv_team >= autoCB273F19_ae) ) ; lv_team += autoCB273F19_ai ) {
                gf_GameOver(lv_teamAlive[lv_team]);
            }
        }
        else {
            autoF6F70AFB_ae = lv_teamCountAlive;
            autoF6F70AFB_ai = 1;
            lv_team = 1;
            for ( ; ( (autoF6F70AFB_ai >= 0 && lv_team <= autoF6F70AFB_ae) || (autoF6F70AFB_ai <= 0 && lv_team >= autoF6F70AFB_ae) ) ; lv_team += autoF6F70AFB_ai ) {
                gf_CountUnitEnable(false);
                gf_CountUnit(lv_teamAlive[lv_team], lv_wait);
            }
            TriggerExecute(gt_CountUnitControl, true, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CountUnit_Init () {
    gt_CountUnit = TriggerCreate("gt_CountUnit_Func");
    TriggerEnable(gt_CountUnit, false);
    TriggerAddEventPlayerEffectUsed(gt_CountUnit, c_playerAny, "CountUnitTriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CountUnitControl
//--------------------------------------------------------------------------------------------------
bool gt_CountUnitControl_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CountUnitControl_Init () {
    gt_CountUnitControl = TriggerCreate("gt_CountUnitControl_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreateReserveUnit
//--------------------------------------------------------------------------------------------------
bool gt_CreateReserveUnit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ReserveUnitCreation(EventPlayerEffectUsedUnit(c_effectUnitCaster), EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), gv_customValuePhalanx)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateReserveUnit_Init () {
    gt_CreateReserveUnit = TriggerCreate("gt_CreateReserveUnit_Func");
    TriggerEnable(gt_CreateReserveUnit, false);
    TriggerAddEventPlayerEffectUsed(gt_CreateReserveUnit, c_playerAny, "CreateReserveUnitTriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: IssueOrderPeriodic
//--------------------------------------------------------------------------------------------------
bool gt_IssueOrderPeriodic_Func (bool testConds, bool runActions) {
    unitgroup autoE95D6307_g;
    int autoE95D6307_u;

    // Variable Declarations
    unit lv_unit;
    unit lv_targetUnit;
    unitgroup lv_targetUnitgroup;
    point lv_targetPoint;
    fixed lv_range;
    fixed lv_radius;
    region lv_region;

    // Variable Initialization
    lv_targetUnitgroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoE95D6307_g = UnitGroup(null, c_playerAny, gv_battlefield, gv_unitFilter, 0);
    autoE95D6307_u = 1;
    for ( ; autoE95D6307_u <= UnitGroupCount(autoE95D6307_g, c_unitCountAll) ; autoE95D6307_u += BoolToInt(lv_unit == UnitGroupUnit(autoE95D6307_g, autoE95D6307_u)) ) {
        lv_unit = UnitGroupUnit(autoE95D6307_g, autoE95D6307_u);
        lv_targetUnit = null;
        lv_targetPoint = null;
        UnitGroupClear(lv_targetUnitgroup);
        if ((gv_round > (gv_roundCount-gv_finalRoundCount))) {
            lv_region = RegionCircle(UnitGetPosition(lv_unit), gv_searchRadiusInFinalRound);
        }
        else {
            lv_region = gv_battlefield;
        }
        lv_targetUnitgroup = UnitGroupAlliance(UnitGetOwner(lv_unit), c_unitAllianceEnemy, lv_region, gv_unitAndCreepFilter, 0);
        while ((UnitGroupCount(lv_targetUnitgroup, c_unitCountAlive) > 0)) {
            lv_targetUnit = UnitGroupClosestToPoint(lv_targetUnitgroup, UnitGetPosition(lv_unit));
            if (true) {
                lv_targetPoint = UnitGetPosition(lv_targetUnit);
                break;
            }
            else {
                UnitGroupRemove(lv_targetUnitgroup, lv_targetUnit);
            }
        }
        if ((lv_targetPoint != null)) {
            lv_range = UnitWeaponRange(lv_unit, 1);
            if ((lv_range > 3.9062)) {
                lv_radius = (UnitWeaponRange(lv_unit, 1)+UnitGetPropertyFixed(lv_unit, c_unitPropRadius, c_unitPropNormal)+UnitGetPropertyFixed(lv_targetUnit, c_unitPropRadius, c_unitPropNormal));
            }
            else {
                lv_radius = (3.9062+UnitGetPropertyFixed(lv_unit, c_unitPropRadius, c_unitPropNormal)+UnitGetPropertyFixed(lv_targetUnit, c_unitPropRadius, c_unitPropNormal));
            }
            if ((RegionContainsPoint(RegionCircle(lv_targetPoint, lv_radius), UnitGetPosition(lv_unit)) == false)) {
                UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("Amov", 3), libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, UnitWeaponRange(lv_unit, 1), UnitGetPosition(lv_unit))), c_orderQueueReplace);
            }

        }
        else {
            UnitIssueOrder(lv_unit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IssueOrderPeriodic_Init () {
    gt_IssueOrderPeriodic = TriggerCreate("gt_IssueOrderPeriodic_Func");
    TriggerEnable(gt_IssueOrderPeriodic, false);
    TriggerAddEventTimePeriodic(gt_IssueOrderPeriodic, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PhalanxCreated
//--------------------------------------------------------------------------------------------------
bool gt_PhalanxCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_behavior;
    string lv_ability;
    int lv_player;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(EventUnitCreatedUnit()) == true) && (UnitFilterMatch(EventUnitCreatedUnit(), lv_player, gv_phalanxFilter) == true)) {
        gv_phalanxIndex[lv_player] += 1;
        UnitSetCustomValue(EventUnitCreatedUnit(), gv_customValuePhalanx, gv_phalanxIndex[lv_player]);
        UnitSetFacing(EventUnitCreatedUnit(), gf_PointGetVenueFacing(UnitGetPosition(EventUnitCreatedUnit())), 0.0);
        gv_previewer[lv_player][gv_phalanxIndex[lv_player]] = EventUnitCreatedUnit();
        gf_PreviewUpdate(lv_player, gv_phalanxIndex[lv_player]);
        gv_phalanx[lv_player][gv_phalanxIndex[lv_player]] = EventUnitCreatedUnit();
        gf_PhalanxBuffSet(EventUnitCreatedUnit(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PhalanxCreated_Init () {
    gt_PhalanxCreated = TriggerCreate("gt_PhalanxCreated_Func");
    TriggerEnable(gt_PhalanxCreated, false);
    TriggerAddEventUnitCreated(gt_PhalanxCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PortalCreated
//--------------------------------------------------------------------------------------------------
bool gt_PortalCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(EventUnitCreatedUnit()) == true) && (UnitFilterMatch(EventUnitCreatedUnit(), lv_player, gv_portalFilter) == true)) {
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PortalCreated_Init () {
    gt_PortalCreated = TriggerCreate("gt_PortalCreated_Func");
    TriggerEnable(gt_PortalCreated, false);
    TriggerAddEventUnitCreated(gt_PortalCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PhalanxBuffChange
//--------------------------------------------------------------------------------------------------
bool gt_PhalanxBuffChange_Func (bool testConds, bool runActions) {
    int auto43D96391_val;

    // Variable Declarations
    int lv_player;
    int lv_phalanx;
    int lv_change;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());
    lv_phalanx = FixedToInt(UnitGetCustomValue(EventUnit(), gv_customValuePhalanx));
    lv_change = EventUnitBehaviorChange();

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), lv_player, gv_phalanxFilter) == true))) {
            return false;
        }

        if (!((gf_BehaviorIsPhalanxBuff(EventUnitBehavior()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto43D96391_val = lv_change;
    if (auto43D96391_val == c_unitBehaviorChangeActivate) {
        gv_phalanxBuff[lv_player][lv_phalanx] = EventUnitBehavior();
    }
    else if (auto43D96391_val == c_unitBehaviorChangeDeactivate) {
        gv_phalanxBuff[lv_player][lv_phalanx] = null;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PhalanxBuffChange_Init () {
    gt_PhalanxBuffChange = TriggerCreate("gt_PhalanxBuffChange_Func");
    TriggerAddEventUnitBehaviorChange(gt_PhalanxBuffChange, null, null, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_PhalanxBuffChange, null, null, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BuildingCreated
//--------------------------------------------------------------------------------------------------
bool gt_BuildingCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_abil;
    unit lv_unit;

    // Variable Initialization
    lv_abil = EventUnitCreatedAbil();
    lv_unit = EventUnitCreatedUnit();

    // Conditions
    if (testConds) {
        if (!((AbilityClass(lv_abil) == c_classIdCAbilBuild))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetFacing(lv_unit, 270.0, 0.0);
    Wait(gv_minimumPeriod, c_timeGame);
    gf_UnitTypeSet(gf_PointInBuildingRegionGetBuildingRegion(UnitGetPosition(lv_unit)), gf_PointInBuildingRegionGetPhalanx(UnitGetPosition(lv_unit)));
    gf_PreviewUpdate(gv_playerAtBuildingRegion[gf_PointInBuildingRegionGetBuildingRegion(UnitGetPosition(lv_unit))], gf_PointInBuildingRegionGetPhalanx(UnitGetPosition(lv_unit)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildingCreated_Init () {
    gt_BuildingCreated = TriggerCreate("gt_BuildingCreated_Func");
    TriggerEnable(gt_BuildingCreated, false);
    TriggerAddEventUnitCreated(gt_BuildingCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitAbilityMorph
//--------------------------------------------------------------------------------------------------
bool gt_UnitAbilityMorph_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_abil;
    unit lv_unit;

    // Variable Initialization
    lv_abil = AbilityCommandGetAbility(EventUnitAbility());
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(gv_minimumPeriod, c_timeGame);
    gf_UnitTypeSet(gf_PointInBuildingRegionGetBuildingRegion(UnitGetPosition(lv_unit)), gf_PointInBuildingRegionGetPhalanx(UnitGetPosition(lv_unit)));
    gf_PreviewUpdate(gv_playerAtBuildingRegion[gf_PointInBuildingRegionGetBuildingRegion(UnitGetPosition(lv_unit))], gf_PointInBuildingRegionGetPhalanx(UnitGetPosition(lv_unit)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitAbilityMorph_Init () {
    gt_UnitAbilityMorph = TriggerCreate("gt_UnitAbilityMorph_Func");
    TriggerEnable(gt_UnitAbilityMorph, false);
    TriggerAddEventUnitAbility(gt_UnitAbilityMorph, null, null, c_abilMorphStageAbilsEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlayerLeft
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeft_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_aIGroup, EventPlayer());
    TextExpressionSetToken("Param/Expression/E02397E6", "A", TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
    UIDisplayMessage(gv_uIPlayergroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/E02397E6"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeft_Init () {
    gt_PlayerLeft = TriggerCreate("gt_PlayerLeft_Func");
    TriggerAddEventPlayerLeft(gt_PlayerLeft, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitChangeOwner2
//--------------------------------------------------------------------------------------------------
bool gt_UnitChangeOwner2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ReserveUnitCreation2(EventUnitOwnerOld(), FixedToInt(UnitGetCustomValue(EventUnit(), gv_customValuePhalanx)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitChangeOwner2_Init () {
    gt_UnitChangeOwner2 = TriggerCreate("gt_UnitChangeOwner2_Func");
    TriggerEnable(gt_UnitChangeOwner2, false);
    TriggerAddEventUnitChangeOwner(gt_UnitChangeOwner2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitDied2
//--------------------------------------------------------------------------------------------------
bool gt_UnitDied2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ReserveUnitCreation2(EventPlayer(), FixedToInt(UnitGetCustomValue(EventUnit(), gv_customValuePhalanx)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitDied2_Init () {
    gt_UnitDied2 = TriggerCreate("gt_UnitDied2_Func");
    TriggerEnable(gt_UnitDied2, false);
    TriggerAddEventUnitDied(gt_UnitDied2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_MapInizialization_Init();
    gt_PlayerInizialization_Init();
    gt_VenueInizialization_Init();
    gt_BuidingRegionInizialization_Init();
    gt_PreviewerPointInizialization_Init();
    gt_RoundInitialization_Init();
    gt_Pillage_Init();
    gt_AdefDefendInitRegister_Init();
    gt_AdefDefendDamaged_Init();
    gt_GameAttributeInizialization_Init();
    gt_AllianceInizialization_Init();
    gt_ScoreBoardInizialization_Init();
    gt_TimerInizialization_Init();
    gt_PlayerInizialization2_Init();
    gt_DebugControlPressed_Init();
    gt_DebugKeyPressed_Init();
    gt_DebugUnitRemove_Init();
    gt_UnitDied_Init();
    gt_CountUnit_Init();
    gt_CountUnitControl_Init();
    gt_CreateReserveUnit_Init();
    gt_IssueOrderPeriodic_Init();
    gt_PhalanxCreated_Init();
    gt_PortalCreated_Init();
    gt_PhalanxBuffChange_Init();
    gt_BuildingCreated_Init();
    gt_UnitAbilityMorph_Init();
    gt_PlayerLeft_Init();
    gt_UnitChangeOwner2_Init();
    gt_UnitDied2_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
