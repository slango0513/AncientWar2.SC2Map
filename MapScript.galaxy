//==================================================================================================
// 
// Generated Map Script
// 
// Name:   ????????????II - ????????????III Mod (GA)
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "LibGAw3"
include "LibGAwX"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libGAw3_InitLib();
    libGAwX_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const fixed gv_asplRadius = 7.0312;
const int gv_asplMaxTargets = 8;
const fixed gv_asplSplitFactor = 0.1;
const string gv_dreamUnitType = "ngrd";
const string gv_aOmiAbilEntry = "AOmi";
const string gv_aOmiPrecursorBuffEntry = "AOmiPrecursor";
const string gv_aOmiBuffEntry = "BOmi";
const string gv_aOmiMissileEffectEntry = "AOmiMissile";
const string gv_aOmiNonMirrorMissileEffectEntry = "AOmiMissileNonMirror";
const fixed gv_aOmiRange = 1.0;
const string gv_aOmiMarker = "AOmiUniqueSummon";
const string gv_aOmiExtraBuff = "MirrorImageExtra";
const fixed gv_moonstoneDuration = 30.0;
const fixed gv_callTideDuration = 30.0;
const fixed gv_minimumPeriod = 0.0625;
const int gv_customValuePhalanx = 1;
const string gv_workerBuildAbilityDataUserType = "WorkerBuildAbilityData";
const string gv_raceUnitTypeUserType = "RaceUnitTypeMapping";
const string gv_unitTypeUserType = "ArmyTypeData";
const string gv_phalanxUserType = "PhalanxData";
const string gv_portalUserType = "PortalData";
const string gv_phalanxBuffUserType = "PhalanxBuffData";
const string gv_creepUnitTypeUserType = "CreepUnitTypeData";
const int gv_itemMaximumCountPerUnit = 6;
const int gv_unitMaximumCountPerPhalanx = 1296;
const int gv_portalMaximumCount = 2;
const int gv_phalanxMaximumCount = 3;
const int gv_venueMaximumCount = 8;
const int gv_roundMaximumCount = 14;
const int gv_teamRoundMaximumCount = 7;
const int gv_teamMemberMaximumCount = 2;
const int gv_teamMaximumCount = 8;
const int gv_playerCount = 8;
const int gv_playerMaximumIndex = 15;
const int gv_venueGroupMaximumCount = (gv_teamMaximumCount/2);

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_debugRound;
bool gv_debugBonusRound;
bool gv_isBonusRound;
text gv_infoAtBuildRegion;
text gv_infoAtBattleField;
text gv_infoVenue;
text[4] gv_objectiveTextSeparator;
int[gv_roundMaximumCount + 1] gv_objective;
string[gv_playerCount + 1] gv_secondRace;
text gv_tip1;
text gv_tip2;
text gv_tip3;
bool gv_dreamDisabled;
int gv_aOmiBaseImages;
int gv_aOmiExtraImagePerLevel;
unitgroup gv_adefGroup;
unitgroup gv_amdfGroup;
timer gv_moonstoneTimer;
int gv_moonstoneTimmerWindow;
timer gv_callTideTimer;
int gv_callTideTimmerWindow;
unitgroup[gv_playerMaximumIndex + 1] gv_workers;
int gv_teamCount;
int gv_teamMemberCount;
int gv_teamRoundCount;
int gv_roundCount;
playergroup[gv_teamMaximumCount + 1] gv_teamGroup;
point[gv_venueMaximumCount + 1][gv_phalanxMaximumCount + 1] gv_phalanxPoint;
region[gv_venueMaximumCount + 1] gv_venue;
fixed[gv_venueMaximumCount + 1] gv_venueFacing;
revealer[gv_venueMaximumCount + 1][gv_playerMaximumIndex + 1] gv_venueRevealer;
region[gv_venueMaximumCount + 1] gv_bonusVenue;
point[gv_venueMaximumCount + 1][gv_phalanxMaximumCount + 1] gv_bonusPhalanxPoint;
fixed[gv_venueMaximumCount + 1] gv_bonusVenueFacing;
revealer[gv_venueMaximumCount + 1][gv_playerMaximumIndex + 1] gv_bonusVenueRevealer;
point[gv_venueMaximumCount + 1][gv_phalanxMaximumCount + 1] gv_finalPhalanxPoint;
region[gv_venueMaximumCount + 1] gv_finalVenue;
fixed[gv_venueMaximumCount + 1] gv_finalVenueFacing;
revealer[gv_venueMaximumCount + 1][gv_playerMaximumIndex + 1] gv_finalVenueRevealer;
region[gv_venueMaximumCount + 1] gv_venueInitial;
point[gv_venueMaximumCount + 1][gv_phalanxMaximumCount + 1] gv_phalanxPointInitial;
fixed[gv_venueMaximumCount + 1] gv_venueInitialFacing;
revealer[gv_venueMaximumCount + 1][gv_playerMaximumIndex + 1] gv_venueInitialRevealer;
region[gv_playerCount + 1][gv_phalanxMaximumCount + 1] gv_buildingRegion;
revealer[gv_playerMaximumIndex + 1][gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1] gv_buildingRegionRevealer;
revealer[gv_playerMaximumIndex + 1][gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1] gv_previewRegionRevealer;
int[gv_venueMaximumCount + 1][gv_teamRoundMaximumCount + 1] gv_teamAtVenue;
int[gv_venueMaximumCount + 1][gv_roundMaximumCount + 1] gv_playerAtVenue;
int[gv_venueMaximumCount + 1][gv_roundMaximumCount + 1] gv_playerAtFinalVenue;
int[gv_venueMaximumCount + 1][gv_roundMaximumCount + 1] gv_creepPlayerAtVenue;
int[gv_playerCount + 1] gv_playerAtBuildingRegion;
string[gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1][gv_unitMaximumCountPerPhalanx + 1] gv_unitType;
string[gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1][gv_unitMaximumCountPerPhalanx + 1][gv_itemMaximumCountPerUnit + 1] gv_itemType;
int[gv_playerMaximumIndex + 1] gv_phalanxIndex;
actor[gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1][gv_unitMaximumCountPerPhalanx + 1] gv_previewModel;
unit[gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1] gv_previewer;
region[gv_playerCount + 1][gv_phalanxMaximumCount + 1] gv_previewRegion;
revealer[gv_playerMaximumIndex + 1] gv_battlefieldRevealer;
region gv_battlefield;
timer gv_timer;
int gv_timerWindow;
int[gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1] gv_reserveUnitIndex;
int[gv_playerMaximumIndex + 1] gv_killScore;
int[gv_playerMaximumIndex + 1] gv_buildingScore;
int gv_scoreBoard;
int[gv_roundMaximumCount + 1] gv_roundGold;
int[gv_roundMaximumCount + 1] gv_roundNumber;
bool[gv_roundMaximumCount + 1] gv_bonusRoundIsOn;
int[gv_teamRoundMaximumCount + 1] gv_teamRoundRandomized;
int[gv_venueGroupMaximumCount + 1][gv_teamRoundMaximumCount + 1] gv_venueGroupRandomized;
point[gv_venueMaximumCount + 1] gv_creepPoint;
string[gv_venueMaximumCount + 1][gv_roundMaximumCount + 1] gv_creepUnitType;
playergroup gv_aIGroup;
int[gv_teamMaximumCount + 1] gv_teamAlive;
int gv_round;
int gv_finalRoundCount;
bool gv_testPassed;
fixed gv_searchRadiusInFinalRound;
fixed gv_searchRadius;
unit[gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1] gv_phalanx;
string[gv_playerMaximumIndex + 1][gv_phalanxMaximumCount + 1] gv_phalanxBuff;
playergroup gv_uIPlayergroup;
unitfilter gv_workerFilter;
unitfilter gv_phalanxFilter;
unitfilter gv_portalFilter;
unitfilter gv_buildingFilter;
unitfilter gv_creepFilter;
unitfilter gv_creepFilterCcore;
unitfilter gv_unitFilter;
unitfilter gv_unitFilterScore;
unitfilter gv_unitAndCreepFilter;
unitfilter gv_villagerFilter;
region gv_battlefieldHighland;
int gv_venueFinalEnd;
int[gv_playerCount + 1][gv_phalanxMaximumCount + 1] gv_unitIndexCount;
int gv_venueFinal;
int gv_finalRound;

void InitGlobals () {
    int init_i;

    gv_debugRound = 1;
    gv_infoAtBuildRegion = StringExternal("Param/Value/BB55835D");
    gv_infoAtBattleField = StringExternal("Param/Value/D03089AF");
    gv_infoVenue = StringExternal("Param/Value/84A7D743");
    for (init_i = 0; init_i <= gv_roundMaximumCount; init_i += 1) {
        gv_objective[init_i] = c_invalidObjectiveId;
    }
    gv_tip1 = StringExternal("Param/Value/E286B000");
    gv_tip2 = StringExternal("Param/Value/64EFDAFF");
    gv_tip3 = StringExternal("Param/Value/191E7488");
    gv_aOmiBaseImages = 1;
    gv_aOmiExtraImagePerLevel = 1;
    gv_adefGroup = UnitGroupEmpty();
    gv_amdfGroup = UnitGroupEmpty();
    gv_moonstoneTimer = TimerCreate();
    gv_moonstoneTimmerWindow = c_timerWindowNone;
    gv_callTideTimer = TimerCreate();
    gv_callTideTimmerWindow = c_timerWindowNone;
    for (init_i = 0; init_i <= gv_playerMaximumIndex; init_i += 1) {
        gv_workers[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= gv_teamMaximumCount; init_i += 1) {
        gv_teamGroup[init_i] = PlayerGroupEmpty();
    }
    gv_timer = TimerCreate();
    gv_timerWindow = c_timerWindowNone;
    gv_scoreBoard = c_boardNone;
    gv_aIGroup = PlayerGroupEmpty();
    gv_testPassed = true;
    gv_uIPlayergroup = PlayerGroupActive();
    gv_workerFilter = UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    gv_phalanxFilter = UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    gv_portalFilter = UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    gv_buildingFilter = UnitFilter(0, (1 << (c_targetFilterRadar - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    gv_creepFilter = UnitFilter(0, (1 << (c_targetFilterMapBoss - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    gv_creepFilterCcore = UnitFilter(0, (1 << (c_targetFilterMapBoss - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)));
    gv_unitFilter = UnitFilter(0, 0, (1 << c_targetFilterHover) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32)));
    gv_unitFilterScore = UnitFilter(0, 0, (1 << c_targetFilterHover) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32)));
    gv_unitAndCreepFilter = UnitFilter(0, 0, (1 << c_targetFilterHover) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    gv_villagerFilter = UnitFilter((1 << c_targetFilterDestructible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_ModInizialization (bool lp_debug);
void gf_RoundStartLoop (bool lp_debug);
void gf_RoundStart (int lp_round, bool lp_bonusRound, bool lp_debug, bool lp_automatically);
void gf_CreateRandomItem (int lp_round, bool lp_finalRound);
void gf_UserSkinSet ();
void gf_AddInfoAtBuildRegion (bool lp_clear);
void gf_AddInfoAtBattleField (bool lp_clear);
void gf_AddInfoVenue (bool lp_clear);
void gf_PhalanxPositionAutomaticallyAll (int lp_round);
void gf_TeamMemberSetAndTeamMemberCountSet ();
void gf_TeamRoundRandomize ();
void gf_VenueGroupRandomize ();
void gf_TeamAtVenueSet ();
void gf_PlayerAtVenueSet ();
void gf_ObjectiveTextSeparatorSet (text lp_objectiveTextSeparator1, text lp_objectiveTextSeparator2, text lp_objectiveTextSeparator3);
void gf_ObjectiveSetState (int lp_round, int lp_state);
void gf_ObjectiveHideAll ();
void gf_PlayerAtFinalVenueReplace (int lp_round);
void gf_PlayerAtFinalVenueSet ();
void gf_PlayerCountTest ();
void gf_GameOverTestNotPassed ();
string gf_GenerateSecondRace (int lp_player, string lp_secondRaceFromRaceAttribute);
void gf_AddTip ();
int gf_PlayerGetCompetitor (int lp_player);
void gf_ChangeTOD ();
void gf_RestoreTOD ();
void gf_ChangeWaterState ();
void gf_RestoreWaterState (bool lp_wait);
void gf_ReserveUnitCreation2 (int lp_player, int lp_phalanx);
unitgroup gf_PlayerGetWorkers (int lp_player);
int gf_PlayerGetTeam (int lp_player);
region gf_IndexGetVenue (int lp_index);
string gf_RaceGetWarcry (string lp_race);
string gf_RaceGetHorn (string lp_race);
abilcmd gf_RaceGetBuildPhalanxCommand (string lp_race);
string gf_RaceGetPhalanxType (string lp_race);
string gf_RaceGetPreviewerPhalanxType (string lp_race);
string gf_RaceGetPreviewerType (string lp_race);
string gf_RaceGetWorkerType (string lp_race);
string gf_WorkerTypeGetAbility (string lp_unitType);
int gf_UnitTypeGetPhalanxCapacity (string lp_unitType);
fixed gf_PointGetVenueFacing (point lp_point);
int gf_UnitTypeGetKillResource (string lp_unitType);
int gf_ItemTypeGetCostResource (string lp_unitType);
string gf_EffectAttackType (string lp_effect);
void gf_SetTeamAlianceAll (int lp_option);
void gf_WorkersSave (int lp_player);
void gf_WorkerExchangeSetAutoCast (int lp_player, bool lp_onOff);
bool gf_IsFinalRound (int lp_round);
void gf_RoundGoldSet (int lp_round, int lp_value);
void gf_RoundNumberSet (int lp_round, int lp_value);
void gf_BonusRoundSet (bool lp_on, int lp_round);
void gf_ResourceAdd (int lp_round);
void gf_ValidRegionFillHidden ();
void gf_BattlefieldSetAll (region lp_region);
void gf_BattlefieldHighlandSet (region lp_region);
void gf_BattlefieldRevealerEnable (bool lp_option);
void gf_BattlefieldRemoveAll ();
void gf_BattlefieldRemoveAllItems ();
bool gf_RegionContainsPointWithOffset (point lp_point, region lp_region, int lp_x, int lp_y);
void gf_CreepPointSet (point lp_point, int lp_index);
void gf_VenueInitialSet (region lp_region, int lp_index, fixed lp_facing);
void gf_PhalanxPointInitialSet (point lp_point, int lp_venueIndex, int lp_phalanxIndex);
void gf_BonusVenueSet (region lp_region, int lp_index, fixed lp_facing);
void gf_BonusPhalanxPointSet (point lp_point, int lp_venueIndex, int lp_phalanxIndex);
void gf_FinalVenueSet (region lp_region, int lp_index, fixed lp_facing);
void gf_FinalPhalanxPointSet (point lp_point, int lp_venueIndex, int lp_phalanxIndex);
void gf_VenueRevealerEnable (int lp_round, bool lp_option);
void gf_BonusVenueReplace ();
void gf_BonusPhalanxPointReplace ();
void gf_FinalVenueReplace ();
void gf_FinalPhalanxPointReplace ();
void gf_VenueInitialReplace ();
void gf_PhalanxPointInitialReplace ();
void gf_VenueAndPhalanxPointInitialReplace ();
void gf_BonusVenueAndPhalanxPointInitialReplace ();
void gf_FinalVenueAndPhalanxPointInitialReplace ();
int gf_PointInBuildingRegionGetBuildingRegion (point lp_point);
int gf_PointInBuildingRegionGetPhalanx (point lp_point);
void gf_PreviewerPositionAll ();
void gf_BuildingRegionSet (region lp_region, int lp_index, int lp_phalanx);
void gf_PlayerAtBuildingRegionSet ();
void gf_BuildingRegionRevealerEnable (bool lp_option, bool lp_debug);
void gf_UnitTypeReset (int lp_player, int lp_phalanx);
void gf_UnitTypeSetAll ();
void gf_DreamUpdateAll ();
int gf_PlayerGetBuidingRegion (int lp_player);
void gf_UnitTypeSet (int lp_buildingRegion, int lp_phalanx, int lp_player);
void gf_CreepUnitTypeSetAll ();
void gf_PreviewUpdateAll ();
void gf_PreviewUpdate (int lp_player, int lp_phalanx);
void gf_PreviewerRegionSet (region lp_region, int lp_index, int lp_phalanx);
void gf_PreviewerRemoveAll ();
void gf_PreviewerAtBuildingRegionPositionAll ();
void gf_PreviewEnable (bool lp_option);
void gf_PreviewModelCreate (int lp_player, point lp_point, string lp_unitType, unit lp_unit);
int gf_PointGetPlayerAtBuidingRegion (point lp_point);
bool gf_BehaviorIsPhalanxBuff (string lp_behavior);
void gf_PhalanxCounterEnable (bool lp_reset, bool lp_option);
void gf_PhalanxBuffSet (unit lp_unit, bool lp_preview);
void gf_UnitPositionAll ();
void gf_UnitOrPreviewModelPosition (unit lp_unit, bool lp_preview);
void gf_CreepPosition (int lp_round);
void gf_UnitCreate (int lp_player, point lp_point, string lp_unitType, unit lp_unit);
void gf_AIPhalanxAndPortalPositionAll (int lp_round);
void gf_AIPhalanxBuffSetAll (int lp_round);
void gf_AIPhalanxAndPortalPosition (int lp_player, region lp_region, string lp_unitType, string lp_userType, unitfilter lp_unitFilter, int lp_count);
void gf_AIBuildingPosition ();
void gf_TimerSet (fixed lp_duration, bool lp_debug);
void gf_ReserveUnitIndexResetAll ();
void gf_ReserveUnitCreationEnable (bool lp_option);
void gf_ReserveUnitCreation (unit lp_unit, int lp_player, int lp_phalanx);
void gf_SearchRadiusInFinalRoundSet (fixed lp_radius);
void gf_SearchRadiusSet (fixed lp_radius);
void gf_IssueOrderAll (bool lp_periodic);
void gf_IssueOrder (bool lp_periodic, int lp_player);
unit gf_UnitGroupClosestPathingCostToPoint (point lp_point, unitgroup lp_unitGroup);
bool gf_PlayerIsAlive (int lp_player, int lp_round);
void gf_CountUnitEnable (bool lp_option);
void gf_CountUnit (int lp_team, bool lp_wait);
void gf_GameOver (int lp_team);
void gf_DisplayMessageAll (int lp_round);
void gf_PlayerAtFinalVenueUpdate (int lp_player);
void gf_StartLocationCameraPan ();
void gf_VenueCameraPan (int lp_round);
void gf_SetPhalanxHighlighted (int lp_player, bool lp_highlighted);
void gf_KillScoreUnitAndItemAdd (int lp_player, unit lp_unit);
void gf_KillResourceItemAdd (int lp_player, unit lp_unit);
void gf_KillScoreAdd (int lp_player, int lp_value);
void gf_KillScoreUpdateAll ();
void gf_KillScoreResetAll ();
void gf_ScoreBoardRowColorUpdate (int lp_round);
void gf_ScoreBoardSetName (int lp_round, bool lp_bonusRound);
void gf_BuildingScoreUpdateAll ();
void gf_DebugEnable (bool lp_option);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_MapInizialization;
trigger gt_VenueInizialization;
trigger gt_BuidingRegionInizialization;
trigger gt_PreviewerPointInizialization;
trigger gt_RoundInitialization;
trigger gt_PlayerColorInitialization;
trigger gt_ShowPlayerHandle;
trigger gt_ShowPlayerDifficultyAll;
trigger gt_GameAttributeInizialization;
trigger gt_AllianceInizialization;
trigger gt_ScoreBoardInizialization;
trigger gt_TimerInizialization;
trigger gt_PlayerInizialization;
trigger gt_AsplSearch;
trigger gt_AsplSplit;
trigger gt_AimpImpact;
trigger gt_AbofImpact;
trigger gt_TimedLifeFateTower;
trigger gt_DreamIllusion;
trigger gt_Transmute;
trigger gt_AOmiRemoveAllNonPermanent;
trigger gt_AOmiLaunch;
trigger gt_AOmiMarker;
trigger gt_Harvest;
trigger gt_Pillage;
trigger gt_Pillage2;
trigger gt_AdefDefendInitRegister;
trigger gt_AdefDefendDamaged;
trigger gt_AmdfInitRegister;
trigger gt_AmdfDamaged;
trigger gt_MoonstoneInit;
trigger gt_MoonstoneChangeTOD;
trigger gt_MoonstoneRestoreTOD;
trigger gt_CallTideInit;
trigger gt_CallTideChangeWaterState;
trigger gt_CallTideRestoreWaterState;
trigger gt_TideAddRemoveSwimmingPeriodic;
trigger gt_UnitChangeOwner2;
trigger gt_UnitDied2;
trigger gt_PlayerLeft;
trigger gt_BuildingCreated;
trigger gt_UnitAbilityMorph;
trigger gt_PhalanxCreated;
trigger gt_PortalCreated;
trigger gt_PhalanxBuffChange;
trigger gt_CreateReserveUnit;
trigger gt_IssueOrderPeriodic;
trigger gt_AutoCastAlwaysOnEnable;
trigger gt_CountUnit;
trigger gt_CountUnitControl;
trigger gt_UnitDied;
trigger gt_DebugControlPressed;
trigger gt_DebugKeyPressed;
trigger gt_DebugUnitRemove;
trigger gt_DebugUnitRemoveAll;
trigger gt_DebugRoundPressed;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_ModInizialization (bool lp_debug) {
    // Automatic Variable Declarations
    bool auto0BE103AA_val;

    // Implementation
    TriggerEnable(libGAwX_gt_NonHeroItemDeathDrop, false);
    TriggerEnable(libGAw3_gt_ChangeOwerFromCreep, false);
    TriggerEnable(libGAw3_gt_ChangeOwerToCreep, false);
    TriggerEnable(libGAwX_gt_RegisterChannelingUnits, false);
    TriggerEnable(libGAwX_gt_ChannelStopCancel, false);
    TriggerEnable(libGAwX_gt_AbilClassDefendDamageAbosorbed, false);
    TriggerEnable(libGAwX_gt_moonMoonstoneChangeTOD, false);
    TriggerEnable(libGAwX_gt_AOmiRemoveAllNonPermanent, false);
    TriggerEnable(libGAwX_gt_AOmiLaunch, false);
    TriggerEnable(libGAwX_gt_AOmiMarker, false);
    TriggerEnable(libGAwX_gt_AsplSearch, false);
    TriggerEnable(libGAwX_gt_AsplSplit, false);
    TriggerEnable(libGAwX_gt_ArplArpmSeach, false);
    TriggerEnable(libGAwX_gt_AraiSummonCount, false);
    TriggerEnable(libGAwX_gt_AIrmRegen, false);
    TriggerEnable(libGAwX_gt_AIrnRegen, false);
    UISetResourceTradingAllowed(c_resourceTypeMinerals, false);
    UISetResourceTradingAllowed(c_resourceTypeVespene, false);
    UISetResourceTradingAllowed(c_resourceTypeTerrazine, false);
    UISetResourceTradingAllowed(c_resourceTypeCustom, false);
    HelpPanelEnableTechGlossaryButton(PlayerGroupAll(), true);
    TriggerExecute(gt_GameAttributeInizialization, true, false);
    if ((lp_debug == true)) {
        gf_DebugEnable(true);
    }
    else {
        gf_DebugEnable(false);
    }
    gf_TeamMemberSetAndTeamMemberCountSet();
    gf_PlayerCountTest();
    auto0BE103AA_val = gv_testPassed;
    if (auto0BE103AA_val == false) {
        gf_GameOverTestNotPassed();
    }
    else if (auto0BE103AA_val == true) {
        TriggerExecute(gt_AllianceInizialization, true, false);
        gf_PlayerAtVenueSet();
        TriggerExecute(gt_ScoreBoardInizialization, true, false);
        TriggerExecute(gt_TimerInizialization, true, false);
        TriggerExecute(gt_PlayerInizialization, true, false);
        gf_PlayerAtBuildingRegionSet();
        gf_PreviewerPositionAll();
        gf_CreepUnitTypeSetAll();
        gf_ValidRegionFillHidden();
    }
    else {
    }
}

void gf_RoundStartLoop (bool lp_debug) {
    // Variable Declarations
    int lv_round;
    string lv_gameValue;

    // Automatic Variable Declarations
    int autoE4112BFC_ae;
    const int autoE4112BFC_ai = 1;

    // Variable Initialization
    lv_gameValue = GameAttributeGameValue("2");

    // Implementation
    if ((gv_testPassed == true)) {
        gf_UserSkinSet();
        gf_AddTip();
        gf_AddInfoAtBuildRegion(false);
        autoE4112BFC_ae = gv_roundCount;
        lv_round = 1;
        for ( ; ( (autoE4112BFC_ai >= 0 && lv_round <= autoE4112BFC_ae) || (autoE4112BFC_ai < 0 && lv_round >= autoE4112BFC_ae) ) ; lv_round += autoE4112BFC_ai ) {
            if ((lp_debug == true)) {
                lv_round = gv_debugRound;
            }

            if (((lv_gameValue == "0005") || (lv_gameValue == "0004"))) {
                gv_dreamDisabled = true;
            }
            else {
                gv_dreamDisabled = false;
            }
            if ((gf_IsFinalRound(lv_round) == true)) {
                gv_dreamDisabled = true;
                gf_FinalVenueAndPhalanxPointInitialReplace();
            }
            else {
                gf_VenueAndPhalanxPointInitialReplace();
            }
            gf_RoundStart(lv_round, false, lp_debug, true);
            if ((gv_bonusRoundIsOn[lv_round] == true)) {
                gv_dreamDisabled = true;
                gf_BonusVenueAndPhalanxPointInitialReplace();
                gf_RoundStart(lv_round, true, lp_debug, true);
            }

        }
    }

}

void gf_RoundStart (int lp_round, bool lp_bonusRound, bool lp_debug, bool lp_automatically) {
    // Automatic Variable Declarations
    // Implementation
    gv_round = lp_round;
    gv_isBonusRound = lp_bonusRound;
    gf_ReserveUnitIndexResetAll();
    gf_BattlefieldRemoveAll();
    gf_BattlefieldRevealerEnable(false);
    gf_ScoreBoardSetName(lp_round, lp_bonusRound);
    if ((gf_IsFinalRound(lp_round) == true)) {
        if ((lp_round == (gv_roundCount-gv_finalRoundCount+1))) {
            gf_ResourceAdd(lp_round);
            gf_BuildingRegionRevealerEnable(true, lp_debug);
            gf_CreateRandomItem(lp_round, true);
            gf_PreviewEnable(true);
            gf_StartLocationCameraPan();
            gf_TimerSet(150.0, lp_debug);
            gf_AIBuildingPosition();
            gf_BuildingRegionRevealerEnable(false, lp_debug);
            gf_PreviewEnable(false);
            gf_UnitTypeSetAll();
            gf_PlayerAtFinalVenueSet();
            gf_ObjectiveHideAll();
        }

        gf_PlayerAtFinalVenueReplace(lp_round);
    }
    else {
        if ((lp_round == 1)) {
            gf_AddInfoAtBuildRegion(false);
        }

        if ((lp_bonusRound == false) && (gf_IsFinalRound(lp_round) == false)) {
            gf_ObjectiveSetState(lp_round, c_objectiveStateActive);
        }

        gf_ResourceAdd(lp_round);
        gf_BuildingRegionRevealerEnable(true, lp_debug);
        gf_CreateRandomItem(lp_round, false);
        gf_PreviewEnable(true);
        gf_StartLocationCameraPan();
        gf_TimerSet((45.0+lp_round*5), lp_debug);
        if ((lp_round == 1)) {
            gf_AddInfoAtBuildRegion(true);
        }

        gf_AIBuildingPosition();
        gf_BuildingRegionRevealerEnable(false, lp_debug);
        gf_PreviewEnable(false);
        gf_UnitTypeSetAll();
    }
    gf_KillScoreResetAll();
    gf_KillScoreUpdateAll();
    if ((lp_automatically == true)) {
        gf_PhalanxPositionAutomaticallyAll(lp_round);
    }
    else {
        gf_AddInfoVenue(false);
        gf_VenueRevealerEnable(lp_round, true);
        gf_PhalanxCounterEnable(true, true);
        gf_VenueCameraPan(lp_round);
        if ((gf_IsFinalRound(lp_round) == true)) {
            gf_TimerSet((30.0), lp_debug);
        }
        else {
            gf_TimerSet((20.0), lp_debug);
        }
        gf_AddInfoVenue(true);
        gf_AIPhalanxAndPortalPositionAll(lp_round);
        gf_PhalanxCounterEnable(false, false);
        gf_AIPhalanxBuffSetAll(lp_round);
        gf_VenueRevealerEnable(lp_round, false);
    }
    gf_BattlefieldRemoveAllItems();
    if ((lp_round == 1)) {
        gf_AddInfoAtBattleField(false);
    }

    gf_UnitPositionAll();
    if ((lp_bonusRound == true)) {
        gf_CreepPosition(lp_round);
    }

    gf_BattlefieldRevealerEnable(true);
    gf_PreviewerAtBuildingRegionPositionAll();
    gf_PreviewUpdateAll();
    gf_CountUnitEnable(true);
    gf_ReserveUnitCreationEnable(true);
    TriggerWaitForTrigger(gt_CountUnitControl, false);
    if ((lp_round == 1)) {
        gf_AddInfoAtBattleField(true);
    }

    gf_ReserveUnitCreationEnable(false);
    if ((lp_bonusRound == false) && (gf_IsFinalRound(lp_round) == false)) {
        gf_ObjectiveSetState(lp_round, c_objectiveStateCompleted);
    }

    gf_RestoreWaterState(false);
    gf_RestoreTOD();
    Wait(1.0, c_timeGame);
}

void gf_CreateRandomItem (int lp_round, bool lp_finalRound) {
    // Variable Declarations
    int lv_player;
    const string lv_data = "ItemData";
    int lv_itemMaxCount;
    string lv_item;
    int lv_itemUpgradeLevel;
    int lv_level;
    int lv_min;
    int lv_max;
    unit lv_worker;

    // Automatic Variable Declarations
    const int autoB6C46589_ae = gv_playerCount;
    const int autoB6C46589_ai = 1;

    // Variable Initialization
    lv_itemMaxCount = UserDataFieldValueCount(lv_data, "Item");

    // Implementation
    lv_player = 1;
    for ( ; ( (autoB6C46589_ai >= 0 && lv_player <= autoB6C46589_ae) || (autoB6C46589_ai < 0 && lv_player >= autoB6C46589_ae) ) ; lv_player += autoB6C46589_ai ) {
        while (true) {
            lv_item = UserDataGetUnit("ItemData", "1", "Item", RandomInt(1, lv_itemMaxCount));
            lv_itemUpgradeLevel = TechTreeUpgradeCount(lv_player, "ItemLevel", c_techCountCompleteOnly);
            if ((lv_item != null)) {
                lv_level = (CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_item, "CostResource[" + IntToString(2) + "]", lv_player) / 15);
                if ((lp_finalRound == true)) {
                    lv_min = (6+lv_itemUpgradeLevel);
                    lv_max = 20;
                }
                else {
                    lv_min = (lp_round+lv_itemUpgradeLevel-2);
                    lv_max = (lp_round+lv_itemUpgradeLevel);
                }
                if (((lv_level >= lv_min) && (lv_level <= lv_max))) {
                    if ((PlayerGroupHasPlayer(gv_aIGroup, lv_player) == false)) {
                        UnitInventoryCreate(UnitGroupUnit(gv_workers[lv_player], 1), lv_item);
                    }
                    else {
                        PlayerModifyPropertyInt(lv_player, c_playerPropTerrazine, c_playerPropOperAdd, (lv_level * 15));
                    }
                    break;
                }

            }

        }
    }
}

void gf_UserSkinSet () {
    // Variable Declarations
    int lv_player;
    string lv_playerHandle;

    // Automatic Variable Declarations
    const int auto4447B836_ae = gv_playerCount;
    const int auto4447B836_ai = 1;

    // Variable Initialization
    lv_playerHandle = "";

    // Implementation
    lv_player = 1;
    for ( ; ( (auto4447B836_ai >= 0 && lv_player <= auto4447B836_ae) || (auto4447B836_ai < 0 && lv_player >= auto4447B836_ae) ) ; lv_player += auto4447B836_ai ) {
        if ((PlayerType(lv_player) == c_playerTypeUser)) {
            if ((UserDataGetInt("SkinPlayerHandle", (PlayerHandle(lv_player)), "Owl", 1) != 0)) {
                libGAwX_gf_UseSkinSetForPlayer("SkinSetOwl", lv_player, true);
            }

            if ((UserDataGetInt("SkinPlayerHandle", (PlayerHandle(lv_player)), "StormPandarenBrewmaster", 1) != 0)) {
                libGAwX_gf_UseSkinSetForPlayer("SkinSetStormPandarenBrewmaster", lv_player, true);
            }

            if ((UserDataGetInt("SkinPlayerHandle", (PlayerHandle(lv_player)), "EarthPandarenBrewmaster", 1) != 0)) {
                libGAwX_gf_UseSkinSetForPlayer("SkinSetEarthPandarenBrewmaster", lv_player, true);
            }

            if ((UserDataGetInt("SkinPlayerHandle", (PlayerHandle(lv_player)), "FirePandarenBrewmaster", 1) != 0)) {
                libGAwX_gf_UseSkinSetForPlayer("SkinSetFirePandarenBrewmaster", lv_player, true);
            }

        }

    }
}

void gf_AddInfoAtBuildRegion (bool lp_clear) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_clear == false)) {
        UIDisplayMessage(gv_uIPlayergroup, c_messageAreaDirective, gv_infoAtBuildRegion);
    }
    else {
        UIClearMessages(gv_uIPlayergroup, c_messageAreaDirective);
    }
}

void gf_AddInfoAtBattleField (bool lp_clear) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_clear == false)) {
        UIDisplayMessage(gv_uIPlayergroup, c_messageAreaDirective, gv_infoAtBattleField);
    }
    else {
        UIClearMessages(gv_uIPlayergroup, c_messageAreaDirective);
    }
}

void gf_AddInfoVenue (bool lp_clear) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_clear == false)) {
        UIDisplayMessage(gv_uIPlayergroup, c_messageAreaDirective, gv_infoVenue);
    }
    else {
        UIClearMessages(gv_uIPlayergroup, c_messageAreaDirective);
    }
}

void gf_PhalanxPositionAutomaticallyAll (int lp_round) {
    // Variable Declarations
    int lv_venue;
    int lv_index;
    string lv_unitType;
    int lv_player;

    // Automatic Variable Declarations
    const int auto89BE525E_ae = gv_venueMaximumCount;
    const int auto89BE525E_ai = 1;
    const int autoCAF5A90E_ae = gv_phalanxMaximumCount;
    const int autoCAF5A90E_ai = 1;

    // Variable Initialization

    // Implementation
    lv_venue = 1;
    for ( ; ( (auto89BE525E_ai >= 0 && lv_venue <= auto89BE525E_ae) || (auto89BE525E_ai < 0 && lv_venue >= auto89BE525E_ae) ) ; lv_venue += auto89BE525E_ai ) {
        lv_player = gv_playerAtVenue[lv_venue][lp_round];
        if ((lv_player != -1)) {
            lv_unitType = gf_RaceGetPhalanxType(PlayerRace(lv_player));
            lv_index = 1;
            for ( ; ( (autoCAF5A90E_ai >= 0 && lv_index <= autoCAF5A90E_ae) || (autoCAF5A90E_ai < 0 && lv_index >= autoCAF5A90E_ae) ) ; lv_index += autoCAF5A90E_ai ) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_unitType, c_unitCreateIgnorePlacement, lv_player, gv_phalanxPoint[lv_venue][lv_index]);
                UnitSetFacing(UnitLastCreated(), PointGetFacing(gv_phalanxPoint[lv_venue][lv_index]), 0.0);
                UnitSetCustomValue(UnitLastCreated(), gv_customValuePhalanx, lv_index);
            }
            CameraPan(lv_player, gv_phalanxPoint[lv_venue][1], 0.5, -1, 10.0, false);
        }

    }
}

void gf_TeamMemberSetAndTeamMemberCountSet () {
    // Variable Declarations
    int lv_player;
    int lv_team;
    int lv_teamMember;
    bool lv_virtualTeam;

    // Automatic Variable Declarations
    int auto0B7F8EF5_ae;
    const int auto0B7F8EF5_ai = 1;
    int auto4141E340_ae;
    const int auto4141E340_ai = 1;
    int autoCBFC81A1_ae;
    const int autoCBFC81A1_ai = 1;
    int auto777E27A6_ae;
    const int auto777E27A6_ai = 1;
    int auto0FCCFA8C_ae;
    const int auto0FCCFA8C_ai = 1;
    int auto7DD77845_ae;
    const int auto7DD77845_ai = 1;

    // Variable Initialization

    // Implementation
    auto0B7F8EF5_ae = gv_teamCount;
    lv_team = 1;
    for ( ; ( (auto0B7F8EF5_ai >= 0 && lv_team <= auto0B7F8EF5_ae) || (auto0B7F8EF5_ai < 0 && lv_team >= auto0B7F8EF5_ae) ) ; lv_team += auto0B7F8EF5_ai ) {
        auto4141E340_ae = gv_teamMemberCount;
        lv_teamMember = 1;
        for ( ; ( (auto4141E340_ai >= 0 && lv_teamMember <= auto4141E340_ae) || (auto4141E340_ai < 0 && lv_teamMember >= auto4141E340_ae) ) ; lv_teamMember += auto4141E340_ai ) {
            if ((PlayerGroupPlayer(GameAttributePlayersForTeam(lv_team), lv_teamMember) == -1)) {
                lv_virtualTeam = true;
            }

        }
    }
    lv_team = 0;
    lv_teamMember = 0;
    if ((lv_virtualTeam == false)) {
        autoCBFC81A1_ae = gv_teamCount;
        lv_team = 1;
        for ( ; ( (autoCBFC81A1_ai >= 0 && lv_team <= autoCBFC81A1_ae) || (autoCBFC81A1_ai < 0 && lv_team >= autoCBFC81A1_ae) ) ; lv_team += autoCBFC81A1_ai ) {
            auto777E27A6_ae = gv_teamMemberCount;
            lv_teamMember = 1;
            for ( ; ( (auto777E27A6_ai >= 0 && lv_teamMember <= auto777E27A6_ae) || (auto777E27A6_ai < 0 && lv_teamMember >= auto777E27A6_ae) ) ; lv_teamMember += auto777E27A6_ai ) {
                if ((PlayerGroupCount(GameAttributePlayersForTeam(lv_team)) == gv_teamMemberCount)) {
                    PlayerGroupAdd(gv_teamGroup[lv_team], PlayerGroupPlayer(GameAttributePlayersForTeam(lv_team), lv_teamMember));
                }
                else {
                    gv_testPassed = false;
                }
            }
        }
    }
    else {
        auto0FCCFA8C_ae = gv_teamCount;
        lv_team = 1;
        for ( ; ( (auto0FCCFA8C_ai >= 0 && lv_team <= auto0FCCFA8C_ae) || (auto0FCCFA8C_ai < 0 && lv_team >= auto0FCCFA8C_ae) ) ; lv_team += auto0FCCFA8C_ai ) {
            auto7DD77845_ae = gv_teamMemberCount;
            lv_teamMember = 1;
            for ( ; ( (auto7DD77845_ai >= 0 && lv_teamMember <= auto7DD77845_ae) || (auto7DD77845_ai < 0 && lv_teamMember >= auto7DD77845_ae) ) ; lv_teamMember += auto7DD77845_ai ) {
                lv_player += 1;
                PlayerGroupAdd(gv_teamGroup[lv_team], lv_player);
            }
        }
    }
}

void gf_TeamRoundRandomize () {
    // Variable Declarations
    int lv_r1;
    int lv_r2;
    bool lv_repeated;
    int[gv_teamRoundMaximumCount + 1] lv_roundRandomized;

    // Automatic Variable Declarations
    int auto2D90BB0C_ae;
    const int auto2D90BB0C_ai = 1;
    int auto0AC02DBC_ae;
    const int auto0AC02DBC_ai = 1;
    int auto442FA2A6_ae;
    const int auto442FA2A6_ai = 1;

    // Variable Initialization

    // Implementation
    auto2D90BB0C_ae = gv_teamRoundCount;
    lv_r1 = 1;
    for ( ; ( (auto2D90BB0C_ai >= 0 && lv_r1 <= auto2D90BB0C_ae) || (auto2D90BB0C_ai < 0 && lv_r1 >= auto2D90BB0C_ae) ) ; lv_r1 += auto2D90BB0C_ai ) {
        gv_teamRoundRandomized[lv_r1] = 0;
    }
    auto0AC02DBC_ae = gv_teamRoundCount;
    lv_r1 = 1;
    for ( ; ( (auto0AC02DBC_ai >= 0 && lv_r1 <= auto0AC02DBC_ae) || (auto0AC02DBC_ai < 0 && lv_r1 >= auto0AC02DBC_ae) ) ; lv_r1 += auto0AC02DBC_ai ) {
        while (true) {
            lv_roundRandomized[lv_r1] = RandomInt(1, gv_teamRoundCount);
            lv_repeated = false;
            auto442FA2A6_ae = gv_teamRoundCount;
            lv_r2 = 1;
            for ( ; ( (auto442FA2A6_ai >= 0 && lv_r2 <= auto442FA2A6_ae) || (auto442FA2A6_ai < 0 && lv_r2 >= auto442FA2A6_ae) ) ; lv_r2 += auto442FA2A6_ai ) {
                if ((lv_roundRandomized[lv_r1] == gv_teamRoundRandomized[lv_r2])) {
                    lv_repeated = true;
                }

            }
            if ((lv_repeated == false)) {
                gv_teamRoundRandomized[lv_r1] = lv_roundRandomized[lv_r1];
                break;
            }

        }
    }
}

void gf_VenueGroupRandomize () {
    // Variable Declarations
    int lv_g1;
    int lv_g2;
    bool lv_repeated;
    int[gv_venueGroupMaximumCount + 1] lv_venueGroupRandomized;
    int lv_round;

    // Automatic Variable Declarations
    int auto35516183_ae;
    const int auto35516183_ai = 1;
    int auto8FD14AD0_ae;
    const int auto8FD14AD0_ai = 1;
    int auto913989A5_ae;
    const int auto913989A5_ai = 1;
    int auto1094C67B_ae;
    const int auto1094C67B_ai = 1;
    const int auto309BA8D2_ae = gv_venueGroupMaximumCount;
    const int auto309BA8D2_ai = 1;

    // Variable Initialization

    // Implementation
    auto35516183_ae = gv_teamRoundCount;
    lv_round = 1;
    for ( ; ( (auto35516183_ai >= 0 && lv_round <= auto35516183_ae) || (auto35516183_ai < 0 && lv_round >= auto35516183_ae) ) ; lv_round += auto35516183_ai ) {
        auto8FD14AD0_ae = (gv_teamCount/2);
        lv_g1 = 1;
        for ( ; ( (auto8FD14AD0_ai >= 0 && lv_g1 <= auto8FD14AD0_ae) || (auto8FD14AD0_ai < 0 && lv_g1 >= auto8FD14AD0_ae) ) ; lv_g1 += auto8FD14AD0_ai ) {
            gv_venueGroupRandomized[lv_g1][lv_round] = 0;
        }
    }
    auto913989A5_ae = gv_teamRoundCount;
    lv_round = 1;
    for ( ; ( (auto913989A5_ai >= 0 && lv_round <= auto913989A5_ae) || (auto913989A5_ai < 0 && lv_round >= auto913989A5_ae) ) ; lv_round += auto913989A5_ai ) {
        auto1094C67B_ae = (gv_teamCount/2);
        lv_g1 = 1;
        for ( ; ( (auto1094C67B_ai >= 0 && lv_g1 <= auto1094C67B_ae) || (auto1094C67B_ai < 0 && lv_g1 >= auto1094C67B_ae) ) ; lv_g1 += auto1094C67B_ai ) {
            while (true) {
                lv_venueGroupRandomized[lv_g1] = RandomInt(1, (gv_teamCount/2));
                lv_repeated = false;
                lv_g2 = 1;
                for ( ; ( (auto309BA8D2_ai >= 0 && lv_g2 <= auto309BA8D2_ae) || (auto309BA8D2_ai < 0 && lv_g2 >= auto309BA8D2_ae) ) ; lv_g2 += auto309BA8D2_ai ) {
                    if ((lv_venueGroupRandomized[lv_g1] == gv_venueGroupRandomized[lv_g2][lv_round])) {
                        lv_repeated = true;
                    }

                }
                if ((lv_repeated == false)) {
                    gv_venueGroupRandomized[lv_g1][lv_round] = lv_venueGroupRandomized[lv_g1];
                    break;
                }

            }
        }
    }
}

void gf_TeamAtVenueSet () {
    // Variable Declarations
    int lv_team;
    int lv_teamMember;
    int lv_round;
    int lv_venueGroup;
    int lv_cycle;
    int[gv_venueMaximumCount + 1] lv_teamCompetitor;

    // Automatic Variable Declarations
    int auto9B6D5B4C_ae;
    const int auto9B6D5B4C_ai = 1;
    int auto0320A48A_ae;
    const int auto0320A48A_ai = 1;
    int auto649134FF_ae;
    const int auto649134FF_ai = -1;
    int autoEF5A7AA0_ae;
    const int autoEF5A7AA0_ai = 1;

    // Variable Initialization
    lv_cycle = 1;

    // Implementation
    gf_TeamRoundRandomize();
    gf_VenueGroupRandomize();
    auto9B6D5B4C_ae = gv_teamRoundCount;
    lv_round = 1;
    for ( ; ( (auto9B6D5B4C_ai >= 0 && lv_round <= auto9B6D5B4C_ae) || (auto9B6D5B4C_ai < 0 && lv_round >= auto9B6D5B4C_ae) ) ; lv_round += auto9B6D5B4C_ai ) {
        auto0320A48A_ae = (gv_teamCount/2);
        lv_team = 1;
        for ( ; ( (auto0320A48A_ai >= 0 && lv_team <= auto0320A48A_ae) || (auto0320A48A_ai < 0 && lv_team >= auto0320A48A_ae) ) ; lv_team += auto0320A48A_ai ) {
            if ((lv_team == 1)) {
                lv_teamCompetitor[lv_team] = 1;
            }
            else {
                if (lv_cycle >= gv_teamCount) {
                    lv_cycle = 2;
                }
                else {
                    lv_cycle = lv_cycle + 1;
                }
                lv_teamCompetitor[lv_team] = lv_cycle;
            }
        }
        auto649134FF_ae = (gv_teamCount/2+1);
        lv_team = gv_teamCount;
        for ( ; ( (auto649134FF_ai >= 0 && lv_team <= auto649134FF_ae) || (auto649134FF_ai < 0 && lv_team >= auto649134FF_ae) ) ; lv_team += auto649134FF_ai ) {
            if (lv_cycle >= gv_teamCount) {
                lv_cycle = 2;
            }
            else {
                lv_cycle = lv_cycle + 1;
            }
            lv_teamCompetitor[lv_team] = lv_cycle;
        }
        lv_venueGroup = 0;
        autoEF5A7AA0_ae = gv_teamCount;
        lv_team = 1;
        for ( ; ( (autoEF5A7AA0_ai >= 0 && lv_team <= autoEF5A7AA0_ae) || (autoEF5A7AA0_ai < 0 && lv_team >= autoEF5A7AA0_ae) ) ; lv_team += autoEF5A7AA0_ai ) {
            if ((ModI(lv_team, 2) == 1)) {
                lv_venueGroup += 1;
                gv_teamAtVenue[lv_team][gv_teamRoundRandomized[lv_round]] = lv_teamCompetitor[gv_venueGroupRandomized[lv_venueGroup][lv_round]];
            }
            else {
                gv_teamAtVenue[lv_team][gv_teamRoundRandomized[lv_round]] = lv_teamCompetitor[(gv_venueGroupRandomized[lv_venueGroup][lv_round]+gv_teamCount/2)];
            }
        }
        lv_cycle -= 1;
    }
}

void gf_PlayerAtVenueSet () {
    // Variable Declarations
    int lv_team;
    int lv_teamMember;
    int lv_round;
    int lv_teamRound;
    int lv_venue;

    // Automatic Variable Declarations
    int autoDF0A3BBB_ae;
    const int autoDF0A3BBB_ai = 1;
    int auto199F204B_ae;
    const int auto199F204B_ai = 1;
    int auto12E4A334_ae;
    const int auto12E4A334_ai = 1;
    int autoAB7CD91B_ae;
    const int autoAB7CD91B_ai = 1;

    // Variable Initialization

    // Implementation
    autoDF0A3BBB_ae = (gv_roundCount-gv_finalRoundCount);
    lv_round = 1;
    for ( ; ( (autoDF0A3BBB_ai >= 0 && lv_round <= autoDF0A3BBB_ae) || (autoDF0A3BBB_ai < 0 && lv_round >= autoDF0A3BBB_ae) ) ; lv_round += autoDF0A3BBB_ai ) {
        if (lv_teamRound >= gv_teamRoundCount) {
            lv_teamRound = 1;
        }
        else {
            lv_teamRound = lv_teamRound + 1;
        }
        if ((lv_teamRound == 1)) {
            gf_TeamAtVenueSet();
        }

        auto199F204B_ae = gv_teamCount;
        lv_team = 1;
        for ( ; ( (auto199F204B_ai >= 0 && lv_team <= auto199F204B_ae) || (auto199F204B_ai < 0 && lv_team >= auto199F204B_ae) ) ; lv_team += auto199F204B_ai ) {
            auto12E4A334_ae = gv_teamMemberCount;
            lv_teamMember = 1;
            for ( ; ( (auto12E4A334_ai >= 0 && lv_teamMember <= auto12E4A334_ae) || (auto12E4A334_ai < 0 && lv_teamMember >= auto12E4A334_ae) ) ; lv_teamMember += auto12E4A334_ai ) {
                if (lv_venue >= gv_venueMaximumCount) {
                    lv_venue = 1;
                }
                else {
                    lv_venue = lv_venue + 1;
                }
                gv_playerAtVenue[lv_venue][lv_round] = PlayerGroupPlayer(gv_teamGroup[gv_teamAtVenue[lv_team][lv_teamRound]], lv_teamMember);
            }
        }
    }
    autoAB7CD91B_ae = (gv_roundCount-gv_finalRoundCount);
    lv_round = 1;
    for ( ; ( (autoAB7CD91B_ai >= 0 && lv_round <= autoAB7CD91B_ae) || (autoAB7CD91B_ai < 0 && lv_round >= autoAB7CD91B_ae) ) ; lv_round += autoAB7CD91B_ai ) {
        TextExpressionSetToken("Param/Expression/E469976D", "I", IntToText(lv_round));
        TextExpressionSetToken("Param/Expression/E469976D", "A", TextWithColor(PlayerName(gv_playerAtVenue[1][lv_round]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_playerAtVenue[1][lv_round], false))));
        TextExpressionSetToken("Param/Expression/E469976D", "1", gv_objectiveTextSeparator[1]);
        TextExpressionSetToken("Param/Expression/E469976D", "B", TextWithColor(PlayerName(gv_playerAtVenue[2][lv_round]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_playerAtVenue[2][lv_round], false))));
        TextExpressionSetToken("Param/Expression/E469976D", "2", gv_objectiveTextSeparator[2]);
        TextExpressionSetToken("Param/Expression/E469976D", "C", TextWithColor(PlayerName(gv_playerAtVenue[3][lv_round]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_playerAtVenue[3][lv_round], false))));
        TextExpressionSetToken("Param/Expression/E469976D", "1", gv_objectiveTextSeparator[1]);
        TextExpressionSetToken("Param/Expression/E469976D", "D", TextWithColor(PlayerName(gv_playerAtVenue[4][lv_round]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_playerAtVenue[4][lv_round], false))));
        TextExpressionSetToken("Param/Expression/E469976D", "3", gv_objectiveTextSeparator[3]);
        TextExpressionSetToken("Param/Expression/E469976D", "E", TextWithColor(PlayerName(gv_playerAtVenue[5][lv_round]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_playerAtVenue[5][lv_round], false))));
        TextExpressionSetToken("Param/Expression/E469976D", "1", gv_objectiveTextSeparator[1]);
        TextExpressionSetToken("Param/Expression/E469976D", "F", TextWithColor(PlayerName(gv_playerAtVenue[6][lv_round]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_playerAtVenue[6][lv_round], false))));
        TextExpressionSetToken("Param/Expression/E469976D", "2", gv_objectiveTextSeparator[2]);
        TextExpressionSetToken("Param/Expression/E469976D", "G", TextWithColor(PlayerName(gv_playerAtVenue[7][lv_round]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_playerAtVenue[7][lv_round], false))));
        TextExpressionSetToken("Param/Expression/E469976D", "1", gv_objectiveTextSeparator[1]);
        TextExpressionSetToken("Param/Expression/E469976D", "H", TextWithColor(PlayerName(gv_playerAtVenue[8][lv_round]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_playerAtVenue[8][lv_round], false))));
        ObjectiveCreate(TextExpressionAssemble("Param/Expression/E469976D"), StringToText(""), c_objectiveStateActive, true);
        ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
        gv_objective[lv_round] = ObjectiveLastCreated();
    }
}

void gf_ObjectiveTextSeparatorSet (text lp_objectiveTextSeparator1, text lp_objectiveTextSeparator2, text lp_objectiveTextSeparator3) {
    // Automatic Variable Declarations
    // Implementation
    gv_objectiveTextSeparator[1] = lp_objectiveTextSeparator1;
    gv_objectiveTextSeparator[2] = lp_objectiveTextSeparator2;
    gv_objectiveTextSeparator[3] = lp_objectiveTextSeparator3;
}

void gf_ObjectiveSetState (int lp_round, int lp_state) {
    // Variable Declarations
    int lv_round;

    // Automatic Variable Declarations
    int autoB9DBF1D6_ae;
    const int autoB9DBF1D6_ai = 1;
    int auto172BF147_ae;
    const int auto172BF147_ai = 1;

    // Variable Initialization

    // Implementation
    autoB9DBF1D6_ae = (gv_roundCount-gv_finalRoundCount);
    lv_round = 1;
    for ( ; ( (autoB9DBF1D6_ai >= 0 && lv_round <= autoB9DBF1D6_ae) || (autoB9DBF1D6_ai < 0 && lv_round >= autoB9DBF1D6_ae) ) ; lv_round += autoB9DBF1D6_ai ) {
        ObjectiveSetState(gv_objective[lv_round], c_objectiveStateHidden);
    }
    auto172BF147_ae = lp_round;
    lv_round = 1;
    for ( ; ( (auto172BF147_ai >= 0 && lv_round <= auto172BF147_ae) || (auto172BF147_ai < 0 && lv_round >= auto172BF147_ae) ) ; lv_round += auto172BF147_ai ) {
        ObjectiveSetState(gv_objective[(lv_round-1)], c_objectiveStateCompleted);
    }
    ObjectiveSetState(gv_objective[lp_round], lp_state);
}

void gf_ObjectiveHideAll () {
    // Variable Declarations
    int lv_round;

    // Automatic Variable Declarations
    int autoCB0C3514_ae;
    const int autoCB0C3514_ai = 1;

    // Variable Initialization

    // Implementation
    autoCB0C3514_ae = (gv_roundCount-gv_finalRoundCount);
    lv_round = 1;
    for ( ; ( (autoCB0C3514_ai >= 0 && lv_round <= autoCB0C3514_ae) || (autoCB0C3514_ai < 0 && lv_round >= autoCB0C3514_ae) ) ; lv_round += autoCB0C3514_ai ) {
        ObjectiveSetState(gv_objective[lv_round], c_objectiveStateHidden);
    }
}

void gf_PlayerAtFinalVenueReplace (int lp_round) {
    // Variable Declarations
    int lv_venue;
    int lv_team;
    int lv_teamMember;

    // Automatic Variable Declarations
    const int auto7C0175FA_ae = gv_venueMaximumCount;
    const int auto7C0175FA_ai = 1;

    // Variable Initialization

    // Implementation
    lv_venue = 1;
    for ( ; ( (auto7C0175FA_ai >= 0 && lv_venue <= auto7C0175FA_ae) || (auto7C0175FA_ai < 0 && lv_venue >= auto7C0175FA_ae) ) ; lv_venue += auto7C0175FA_ai ) {
        if ((lv_venue <= (gv_teamMemberCount*2))) {
            gv_playerAtVenue[lv_venue][lp_round] = gv_playerAtFinalVenue[lv_venue][lp_round];
        }
        else {
            gv_playerAtVenue[lv_venue][lp_round] = -1;
        }
    }
}

void gf_PlayerAtFinalVenueSet () {
    // Variable Declarations
    int lv_team;
    int lv_teamMember;
    int lv_round;
    int lv_venue;

    // Automatic Variable Declarations
    int autoF989A9BE_ae;
    const int autoF989A9BE_ai = 1;
    int auto6323E5A5_ae;
    const int auto6323E5A5_ai = 1;

    // Variable Initialization

    // Implementation
    lv_round = RandomInt(1, gv_teamRoundCount);
    autoF989A9BE_ae = gv_teamCount;
    lv_team = 1;
    for ( ; ( (autoF989A9BE_ai >= 0 && lv_team <= autoF989A9BE_ae) || (autoF989A9BE_ai < 0 && lv_team >= autoF989A9BE_ae) ) ; lv_team += autoF989A9BE_ai ) {
        auto6323E5A5_ae = gv_teamMemberCount;
        lv_teamMember = 1;
        for ( ; ( (auto6323E5A5_ai >= 0 && lv_teamMember <= auto6323E5A5_ae) || (auto6323E5A5_ai < 0 && lv_teamMember >= auto6323E5A5_ae) ) ; lv_teamMember += auto6323E5A5_ai ) {
            gf_PlayerAtFinalVenueUpdate(PlayerGroupPlayer(gv_teamGroup[gv_teamAtVenue[lv_team][lv_round]], lv_teamMember));
        }
    }
}

void gf_PlayerCountTest () {
    // Variable Declarations
    int lv_player;
    int lv_playerCount;

    // Automatic Variable Declarations
    const int auto9C5D0879_ae = gv_playerCount;
    const int auto9C5D0879_ai = 1;

    // Variable Initialization

    // Implementation
    lv_player = 1;
    for ( ; ( (auto9C5D0879_ai >= 0 && lv_player <= auto9C5D0879_ae) || (auto9C5D0879_ai < 0 && lv_player >= auto9C5D0879_ae) ) ; lv_player += auto9C5D0879_ai ) {
        if (((PlayerType(lv_player) == c_playerTypeUser) || (PlayerType(lv_player) == c_playerTypeComputer))) {
            lv_playerCount += 1;
        }

    }
    if ((lv_playerCount != gv_playerCount)) {
        gv_testPassed = false;
    }

}

void gf_GameOverTestNotPassed () {
    // Variable Declarations
    int lv_player;
    int lv_time;

    // Automatic Variable Declarations
    const int autoD2DC7757_ae = gv_playerCount;
    const int autoD2DC7757_ai = 1;

    // Variable Initialization
    lv_time = 10;

    // Implementation
    TextExpressionSetToken("Param/Expression/07B716C9", "A", IntToText(gv_playerCount));
    TextExpressionSetToken("Param/Expression/07B716C9", "B", IntToText(gv_teamMemberCount));
    TextExpressionSetToken("Param/Expression/07B716C9", "C", IntToText(lv_time));
    UIDisplayMessage(gv_uIPlayergroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/07B716C9"));
    Wait(lv_time, c_timeGame);
    lv_player = 1;
    for ( ; ( (autoD2DC7757_ai >= 0 && lv_player <= autoD2DC7757_ae) || (autoD2DC7757_ai < 0 && lv_player >= autoD2DC7757_ae) ) ; lv_player += autoD2DC7757_ai ) {
        GameOver(lv_player, c_gameOverTie, true, true);
    }
}

string gf_GenerateSecondRace (int lp_player, string lp_secondRaceFromRaceAttribute) {
    // Variable Declarations
    string lv_ut;
    int lv_c;
    string lv_race;
    string lv_secondRace;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ut = "RaceAttributeMapping";
    lv_c = UserDataInstanceCount(lv_ut);

    // Implementation
    if ((lp_secondRaceFromRaceAttribute != PlayerRace(lp_player))) {
        lv_secondRace = lp_secondRaceFromRaceAttribute;
    }
    else {
        while (true) {
            lv_race = UserDataGetGameLink(lv_ut, UserDataInstance(lv_ut, RandomInt(1, lv_c)), "Race", 1);
            if ((lv_race != PlayerRace(lp_player))) {
                lv_secondRace = lv_race;
                break;
            }

        }
    }
    return lv_secondRace;
}

void gf_AddTip () {
    // Automatic Variable Declarations
    // Implementation
    HelpPanelAddTip(gv_uIPlayergroup, libNtve_gf_FormatTipTitle(StringExternal("Param/Value/4C23E814"), libNtve_ge_TipType_NormalTip), gv_tip1, StringExternal("Param/Value/CB456843"), "Assets\\Textures\\BTN\\Renee_war3_btnmoonkey.dds");
    HelpPanelAddTip(gv_uIPlayergroup, libNtve_gf_FormatTipTitle(StringExternal("Param/Value/4B1A6B77"), libNtve_ge_TipType_NormalTip), gv_tip2, StringExternal("Param/Value/93A8605D"), "Assets\\Textures\\BTN\\Renee_war3_btnsunkey.dds");
    HelpPanelAddTip(gv_uIPlayergroup, libNtve_gf_FormatTipTitle(StringExternal("Param/Value/15C739EB"), libNtve_ge_TipType_NormalTip), gv_tip3, StringExternal("Param/Value/BF89C086"), "Assets\\Textures\\BTN\\Renee_war3_btnstrongdrink.dds");
}

int gf_PlayerGetCompetitor (int lp_player) {
    // Variable Declarations
    int lv_competitor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((GameAttributeGameValue("2") == "0001") || (GameAttributeGameValue("2") == "0002") || (GameAttributeGameValue("2") == "0003"))) {
        if ((lp_player == gv_playerAtVenue[1][gv_round])) {
            lv_competitor = gv_playerAtVenue[2][gv_round];
        }
        else if ((lp_player == gv_playerAtVenue[2][gv_round])) {
            lv_competitor = gv_playerAtVenue[1][gv_round];
        }
        else if ((lp_player == gv_playerAtVenue[3][gv_round])) {
            lv_competitor = gv_playerAtVenue[4][gv_round];
        }
        else if ((lp_player == gv_playerAtVenue[4][gv_round])) {
            lv_competitor = gv_playerAtVenue[3][gv_round];
        }
        else if ((lp_player == gv_playerAtVenue[5][gv_round])) {
            lv_competitor = gv_playerAtVenue[6][gv_round];
        }
        else if ((lp_player == gv_playerAtVenue[6][gv_round])) {
            lv_competitor = gv_playerAtVenue[5][gv_round];
        }
        else if ((lp_player == gv_playerAtVenue[7][gv_round])) {
            lv_competitor = gv_playerAtVenue[8][gv_round];
        }
        else if ((lp_player == gv_playerAtVenue[8][gv_round])) {
            lv_competitor = gv_playerAtVenue[7][gv_round];
        }
    }

    if (((GameAttributeGameValue("2") == "0005") || (GameAttributeGameValue("2") == "0004"))) {
        if ((lp_player == gv_playerAtVenue[1][gv_round])) {
            lv_competitor = gv_playerAtVenue[3][gv_round];
        }
        else if ((lp_player == gv_playerAtVenue[2][gv_round])) {
            lv_competitor = gv_playerAtVenue[4][gv_round];
        }
        else if ((lp_player == gv_playerAtVenue[3][gv_round])) {
            lv_competitor = gv_playerAtVenue[1][gv_round];
        }
        else if ((lp_player == gv_playerAtVenue[4][gv_round])) {
            lv_competitor = gv_playerAtVenue[2][gv_round];
        }
        else if ((lp_player == gv_playerAtVenue[5][gv_round])) {
            lv_competitor = gv_playerAtVenue[7][gv_round];
        }
        else if ((lp_player == gv_playerAtVenue[6][gv_round])) {
            lv_competitor = gv_playerAtVenue[8][gv_round];
        }
        else if ((lp_player == gv_playerAtVenue[7][gv_round])) {
            lv_competitor = gv_playerAtVenue[5][gv_round];
        }
        else if ((lp_player == gv_playerAtVenue[8][gv_round])) {
            lv_competitor = gv_playerAtVenue[6][gv_round];
        }
    }

    return lv_competitor;
}

void gf_ChangeTOD () {
    // Variable Declarations
    int lv_player;
    int lv_controller;

    // Automatic Variable Declarations
    const int autoF846AAF6_ae = gv_playerCount;
    const int autoF846AAF6_ai = 1;

    // Variable Initialization

    // Implementation
    lv_player = 1;
    for ( ; ( (autoF846AAF6_ai >= 0 && lv_player <= autoF846AAF6_ae) || (autoF846AAF6_ai < 0 && lv_player >= autoF846AAF6_ae) ) ; lv_player += autoF846AAF6_ai ) {
        TimerWindowShow(gv_moonstoneTimmerWindow, PlayerGroupSingle(lv_player), true);
    }
    libGAwX_gf_SetWar3TimeOfDay("00");
    libGAwX_gf_PauseUnpauseTimeOfDayWar3(true);
    ActorSend(libGAwX_gv_tODActor, "AnimPlay Cover Cover");
}

void gf_RestoreTOD () {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int auto74679AE6_ae = gv_playerCount;
    const int auto74679AE6_ai = 1;

    // Variable Initialization

    // Implementation
    lv_player = 1;
    for ( ; ( (auto74679AE6_ai >= 0 && lv_player <= auto74679AE6_ae) || (auto74679AE6_ai < 0 && lv_player >= auto74679AE6_ae) ) ; lv_player += auto74679AE6_ai ) {
        TimerWindowShow(gv_moonstoneTimmerWindow, PlayerGroupSingle(lv_player), false);
    }
    libGAwX_gf_SetWar3TimeOfDay("13:00:00");
    libGAwX_gf_PauseUnpauseTimeOfDayWar3(false);
    Wait(gv_minimumPeriod, c_timeGame);
    Wait(gv_minimumPeriod, c_timeGame);
    libGAwX_gf_PauseUnpauseTimeOfDayWar3(true);
    ActorSend(libGAwX_gv_tODActor, "AnimClear Cover");
}

void gf_ChangeWaterState () {
    // Variable Declarations
    int lv_player;
    int lv_controller;

    // Automatic Variable Declarations
    const int autoDEB66CD8_ae = gv_playerCount;
    const int autoDEB66CD8_ai = 1;
    const int autoC85DD91D_ae = gv_playerCount;
    const int autoC85DD91D_ai = 1;

    // Variable Initialization

    // Implementation
    lv_player = 1;
    for ( ; ( (autoDEB66CD8_ai >= 0 && lv_player <= autoDEB66CD8_ae) || (autoDEB66CD8_ai < 0 && lv_player >= autoDEB66CD8_ae) ) ; lv_player += autoDEB66CD8_ai ) {
        SoundPlayForPlayer(SoundLink("TempleOfTidesWhat", -1), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
    }
    WaterSetState("AW2_Default|[Default]", 5.0, c_wtcLinear);
    Wait(2.0, c_timeGame);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_controller, "Tide", 1);
    lv_player = 1;
    for ( ; ( (autoC85DD91D_ai >= 0 && lv_player <= autoC85DD91D_ae) || (autoC85DD91D_ai < 0 && lv_player >= autoC85DD91D_ae) ) ; lv_player += autoC85DD91D_ai ) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "Tide", 1);
        TimerWindowShow(gv_callTideTimmerWindow, PlayerGroupSingle(lv_player), true);
    }
}

void gf_RestoreWaterState (bool lp_wait) {
    // Variable Declarations
    int lv_player;
    int lv_controller;

    // Automatic Variable Declarations
    const int autoDFEE984D_ae = gv_playerCount;
    const int autoDFEE984D_ai = 1;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lv_controller, "Tide", 0);
    lv_player = 1;
    for ( ; ( (autoDFEE984D_ai >= 0 && lv_player <= autoDFEE984D_ae) || (autoDFEE984D_ai < 0 && lv_player >= autoDFEE984D_ae) ) ; lv_player += autoDFEE984D_ai ) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "Tide", 0);
        TimerWindowShow(gv_callTideTimmerWindow, PlayerGroupSingle(lv_player), false);
    }
    if ((lp_wait == true)) {
        Wait(2.0, c_timeGame);
    }
    else {
        Wait(gv_minimumPeriod, c_timeGame);
    }
    if ((TechTreeUpgradeCount(lv_controller, "Tide", c_techCountCompleteOnly) == 0)) {
        WaterSetState("AW2_Default|Alternate Setting", 5.0, c_wtcLinear);
        libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "AnimGroupRemove Swim");
        Wait(2.0, c_timeGame);
        libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "AnimGroupRemove Swim");
    }

}

void gf_ReserveUnitCreation2 (int lp_player, int lp_phalanx) {
    // Variable Declarations
    unit lv_phalanxUnit;
    int lv_phalanx;
    string lv_unitType;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
}

unitgroup gf_PlayerGetWorkers (int lp_player) {
    // Variable Declarations
    unitgroup lv_workers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_workers = UnitGroupEmpty();

    // Implementation
    lv_workers = gv_workers[lp_player];
    return lv_workers;
}

int gf_PlayerGetTeam (int lp_player) {
    // Variable Declarations
    int lv_team;
    int lv_teamReturn;

    // Automatic Variable Declarations
    int auto10973A45_ae;
    const int auto10973A45_ai = 1;

    // Variable Initialization

    // Implementation
    auto10973A45_ae = gv_teamCount;
    lv_team = 1;
    for ( ; ( (auto10973A45_ai >= 0 && lv_team <= auto10973A45_ae) || (auto10973A45_ai < 0 && lv_team >= auto10973A45_ae) ) ; lv_team += auto10973A45_ai ) {
        if ((PlayerGroupHasPlayer(gv_teamGroup[lv_team], lp_player) == true)) {
            lv_teamReturn = lv_team;
            break;
        }

    }
    return lv_teamReturn;
}

region gf_IndexGetVenue (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return gv_venue[lp_index];
}

string gf_RaceGetWarcry (string lp_race) {
    // Variable Declarations
    string lv_warcry;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_warcry = UserDataGetSound("RaceUnitTypeMapping", ((lp_race)), "Warcry", 1);
    return lv_warcry;
}

string gf_RaceGetHorn (string lp_race) {
    // Variable Declarations
    string lv_horn;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_horn = UserDataGetSound("RaceUnitTypeMapping", ((lp_race)), "Horn", 1);
    return lv_horn;
}

abilcmd gf_RaceGetBuildPhalanxCommand (string lp_race) {
    // Variable Declarations
    abilcmd lv_command;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gf_IsFinalRound(gv_round) == false)) {
        lv_command = UserDataGetAbilCmd(gv_raceUnitTypeUserType, ((lp_race)), "Command", 1);
    }
    else {
        lv_command = UserDataGetAbilCmd(gv_raceUnitTypeUserType, ((lp_race)), "Command", 2);
    }
    return lv_command;
}

string gf_RaceGetPhalanxType (string lp_race) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gf_IsFinalRound(gv_round) == false)) {
        lv_unitType = UserDataGetUnit(gv_raceUnitTypeUserType, ((lp_race)), "Phalanx", 1);
    }
    else {
        lv_unitType = UserDataGetUnit(gv_raceUnitTypeUserType, ((lp_race)), "Phalanx", 2);
    }
    return lv_unitType;
}

string gf_RaceGetPreviewerPhalanxType (string lp_race) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_unitType = UserDataGetUnit(gv_raceUnitTypeUserType, ((lp_race)), "Phalanx", 1);
    return lv_unitType;
}

string gf_RaceGetPreviewerType (string lp_race) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitType = UserDataGetUnit(gv_raceUnitTypeUserType, ((lp_race)), "Previewer", 1);

    // Implementation
    return lv_unitType;
}

string gf_RaceGetWorkerType (string lp_race) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitType = UserDataGetUnit(gv_raceUnitTypeUserType, ((lp_race)), "Worker", 1);

    // Implementation
    return lv_unitType;
}

string gf_WorkerTypeGetAbility (string lp_unitType) {
    // Variable Declarations
    string lv_ability;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ability = UserDataGetGameLink(gv_workerBuildAbilityDataUserType, ((lp_unitType)), "Ability", 1);

    // Implementation
    return lv_ability;
}

int gf_UnitTypeGetPhalanxCapacity (string lp_unitType) {
    // Variable Declarations
    int lv_capacity;
    int lv_columnCount;
    int lv_rowCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_columnCount = UserDataGetInt(gv_phalanxUserType, ((lp_unitType)), "Column", 1);
    lv_rowCount = UserDataGetInt(gv_phalanxUserType, ((lp_unitType)), "Row", 1);

    // Implementation
    lv_capacity = (lv_columnCount*lv_rowCount);
    return lv_capacity;
}

fixed gf_PointGetVenueFacing (point lp_point) {
    // Variable Declarations
    int lv_venue;
    fixed lv_facing;
    int lv_end;

    // Automatic Variable Declarations
    const int auto578A2C99_ae = gv_venueMaximumCount;
    const int auto578A2C99_ai = 1;

    // Variable Initialization

    // Implementation
    lv_venue = 1;
    for ( ; ( (auto578A2C99_ai >= 0 && lv_venue <= auto578A2C99_ae) || (auto578A2C99_ai < 0 && lv_venue >= auto578A2C99_ae) ) ; lv_venue += auto578A2C99_ai ) {
        if ((gv_venue[lv_venue] != null)) {
            if ((RegionContainsPoint(gv_venue[lv_venue], lp_point) == true)) {
                lv_facing = gv_venueFacing[lv_venue];
            }

        }

    }
    return lv_facing;
}

int gf_UnitTypeGetKillResource (string lp_unitType) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "KillResource[" + IntToString(3) + "]", c_playerAny);
    return lv_value;
}

int gf_ItemTypeGetCostResource (string lp_unitType) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(2) + "]", c_playerAny);
    return lv_value;
}

string gf_EffectAttackType (string lp_effect) {
    // Variable Declarations
    string lv_attackType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attackType = "";

    // Implementation
    lv_attackType = CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Alert", c_playerAny);
    return lv_attackType;
}

void gf_SetTeamAlianceAll (int lp_option) {
    // Variable Declarations
    int lv_team;

    // Automatic Variable Declarations
    int autoB2810911_ae;
    const int autoB2810911_ai = 1;

    // Variable Initialization

    // Implementation
    autoB2810911_ae = gv_teamCount;
    lv_team = 1;
    for ( ; ( (autoB2810911_ai >= 0 && lv_team <= autoB2810911_ae) || (autoB2810911_ai < 0 && lv_team >= autoB2810911_ae) ) ; lv_team += autoB2810911_ai ) {
        libNtve_gf_SetPlayerGroupAlliance(gv_teamGroup[lv_team], lp_option);
    }
}

void gf_WorkersSave (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    gv_workers[lp_player] = UnitGroup(null, lp_player, RegionEntireMap(), gv_workerFilter, 0);
}

void gf_WorkerExchangeSetAutoCast (int lp_player, bool lp_onOff) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoB5BFE487_g;
    int autoB5BFE487_u;

    // Variable Initialization

    // Implementation
    autoB5BFE487_g = gv_workers[lp_player];
    autoB5BFE487_u = UnitGroupCount(autoB5BFE487_g, c_unitCountAll);
    for (;; autoB5BFE487_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoB5BFE487_g, autoB5BFE487_u);
        if (lv_unit == null) { break; }
        UnitIssueOrder(lv_unit, OrderSetAutoCast(AbilityCommand("ANlg", 0), lp_onOff), c_orderQueueReplace);
    }
}

bool gf_IsFinalRound (int lp_round) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_round > (gv_roundCount-gv_finalRoundCount))) {
        return true;
    }
    else {
        return false;
    }
}

void gf_RoundGoldSet (int lp_round, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    gv_roundGold[lp_round] = lp_value;
}

void gf_RoundNumberSet (int lp_round, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    gv_roundNumber[lp_round] = lp_value;
}

void gf_BonusRoundSet (bool lp_on, int lp_round) {
    // Automatic Variable Declarations
    // Implementation
    gv_bonusRoundIsOn[lp_round] = lp_on;
}

void gf_ResourceAdd (int lp_round) {
    // Variable Declarations
    int lv_player;
    int lv_lumber;
    int lv_gold;

    // Automatic Variable Declarations
    const int auto0C4AA007_ae = gv_playerCount;
    const int auto0C4AA007_ai = 1;
    int auto876F7D42_val;

    // Variable Initialization

    // Implementation
    lv_player = 1;
    for ( ; ( (auto0C4AA007_ai >= 0 && lv_player <= auto0C4AA007_ae) || (auto0C4AA007_ai < 0 && lv_player >= auto0C4AA007_ae) ) ; lv_player += auto0C4AA007_ai ) {
        if ((PlayerGroupHasPlayer(gv_aIGroup, lv_player) == true)) {
            auto876F7D42_val = PlayerDifficulty(lv_player);
            if (auto876F7D42_val == 1) {
                lv_gold = FixedToInt((gv_roundGold[lp_round]*1.0));
                lv_lumber = FixedToInt((gv_buildingScore[lv_player]*1.0));
            }
            else if (auto876F7D42_val == 3) {
                lv_gold = FixedToInt((gv_roundGold[lp_round]*1.0));
                lv_lumber = FixedToInt((gv_buildingScore[lv_player]*1.0));
            }
            else if (auto876F7D42_val == 5) {
                lv_gold = FixedToInt((gv_roundGold[lp_round]*1.0));
                lv_lumber = FixedToInt((gv_buildingScore[lv_player]*1.0));
            }
            else if (auto876F7D42_val == 7) {
                lv_gold = FixedToInt((gv_roundGold[lp_round]*1.0));
                lv_lumber = FixedToInt((gv_buildingScore[lv_player]*1.0));
            }
            else if (auto876F7D42_val == 9) {
                lv_gold = FixedToInt((gv_roundGold[lp_round]*1.4));
                lv_lumber = FixedToInt((gv_buildingScore[lv_player]*1.4));
            }
            else {
                lv_gold = FixedToInt((gv_roundGold[lp_round]*1.0));
                lv_lumber = FixedToInt((gv_buildingScore[lv_player]*1.0));
            }
        }
        else {
            lv_gold = gv_roundGold[lp_round];
            lv_lumber = gv_buildingScore[lv_player];
        }
        PlayerModifyPropertyInt(lv_player, c_playerPropTerrazine, c_playerPropOperAdd, lv_gold);
        PlayerModifyPropertyInt(lv_player, c_playerPropCustom, c_playerPropOperAdd, lv_lumber);
        PlayerModifyPropertyInt(lv_player, c_playerPropCustom, c_playerPropOperAdd, gv_roundNumber[lp_round]);
        gv_buildingScore[lv_player] = 0;
        gv_killScore[lv_player] = 0;
    }
}

void gf_ValidRegionFillHidden () {
    // Variable Declarations
    int lv_buildingRegion;
    int lv_targetBuildingRegion;
    int lv_phalanx;

    // Automatic Variable Declarations
    const int auto65990972_ae = gv_playerCount;
    const int auto65990972_ai = 1;
    const int auto8238E76D_ae = gv_playerCount;
    const int auto8238E76D_ai = 1;
    const int auto4657EDD4_ae = gv_phalanxMaximumCount;
    const int auto4657EDD4_ai = 1;

    // Variable Initialization

    // Implementation
    lv_buildingRegion = 1;
    for ( ; ( (auto65990972_ai >= 0 && lv_buildingRegion <= auto65990972_ae) || (auto65990972_ai < 0 && lv_buildingRegion >= auto65990972_ae) ) ; lv_buildingRegion += auto65990972_ai ) {
        VisFillArea(gv_playerAtBuildingRegion[lv_buildingRegion], RegionEntireMap(), c_fillTypeHidden, false);
        VisRevealArea(gv_playerAtBuildingRegion[lv_buildingRegion], gv_battlefield, gv_minimumPeriod, false);
        lv_targetBuildingRegion = 1;
        for ( ; ( (auto8238E76D_ai >= 0 && lv_targetBuildingRegion <= auto8238E76D_ae) || (auto8238E76D_ai < 0 && lv_targetBuildingRegion >= auto8238E76D_ae) ) ; lv_targetBuildingRegion += auto8238E76D_ai ) {
            lv_phalanx = 1;
            for ( ; ( (auto4657EDD4_ai >= 0 && lv_phalanx <= auto4657EDD4_ae) || (auto4657EDD4_ai < 0 && lv_phalanx >= auto4657EDD4_ae) ) ; lv_phalanx += auto4657EDD4_ai ) {
                VisRevealArea(gv_playerAtBuildingRegion[lv_buildingRegion], gv_buildingRegion[lv_targetBuildingRegion][lv_phalanx], gv_minimumPeriod, false);
                VisRevealArea(gv_playerAtBuildingRegion[lv_buildingRegion], gv_previewRegion[lv_targetBuildingRegion][lv_phalanx], gv_minimumPeriod, false);
            }
        }
    }
}

void gf_BattlefieldSetAll (region lp_region) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int auto7A8239A3_ae = gv_playerCount;
    const int auto7A8239A3_ai = 1;

    // Variable Initialization

    // Implementation
    gv_battlefield = lp_region;
    lv_player = 1;
    for ( ; ( (auto7A8239A3_ai >= 0 && lv_player <= auto7A8239A3_ae) || (auto7A8239A3_ai < 0 && lv_player >= auto7A8239A3_ae) ) ; lv_player += auto7A8239A3_ai ) {
        VisRevealerCreate(lv_player, gv_battlefield);
        VisRevealerEnable(VisRevealerLastCreated(), false);
        gv_battlefieldRevealer[lv_player] = VisRevealerLastCreated();
        VisRevealerCreate(lv_player, gv_battlefield);
        VisRevealerEnable(VisRevealerLastCreated(), false);
        gv_battlefieldRevealer[lv_player] = VisRevealerLastCreated();
    }
}

void gf_BattlefieldHighlandSet (region lp_region) {
    // Automatic Variable Declarations
    // Implementation
    gv_battlefieldHighland = lp_region;
}

void gf_BattlefieldRevealerEnable (bool lp_option) {
    // Variable Declarations
    int lv_player;
    int lv_targetPlayer;
    int lv_phalanx;

    // Automatic Variable Declarations
    const int autoFCF92D67_ae = gv_playerCount;
    const int autoFCF92D67_ai = 1;
    const int auto27414DB3_ae = gv_playerCount;
    const int auto27414DB3_ai = 1;
    const int auto88FE9C90_ae = gv_phalanxMaximumCount;
    const int auto88FE9C90_ai = 1;

    // Variable Initialization

    // Implementation
    lv_player = 1;
    for ( ; ( (autoFCF92D67_ai >= 0 && lv_player <= autoFCF92D67_ae) || (autoFCF92D67_ai < 0 && lv_player >= autoFCF92D67_ae) ) ; lv_player += autoFCF92D67_ai ) {
        if ((lp_option == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BuildArmy", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BuildArmyFinal", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BuildPhalanx", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BuildPhalanxFinal", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BuildPortal", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "CountUnit", 0);
        }

        VisRevealerEnable(gv_battlefieldRevealer[lv_player], lp_option);
        VisRevealerEnable(gv_battlefieldRevealer[lv_player], lp_option);
        lv_targetPlayer = 1;
        for ( ; ( (auto27414DB3_ai >= 0 && lv_targetPlayer <= auto27414DB3_ae) || (auto27414DB3_ai < 0 && lv_targetPlayer >= auto27414DB3_ae) ) ; lv_targetPlayer += auto27414DB3_ai ) {
            lv_phalanx = 1;
            for ( ; ( (auto88FE9C90_ai >= 0 && lv_phalanx <= auto88FE9C90_ae) || (auto88FE9C90_ai < 0 && lv_phalanx >= auto88FE9C90_ae) ) ; lv_phalanx += auto88FE9C90_ai ) {
                VisRevealerEnable(gv_buildingRegionRevealer[lv_player][lv_targetPlayer][lv_phalanx], lp_option);
                VisRevealerEnable(gv_previewRegionRevealer[lv_player][lv_targetPlayer][lv_phalanx], lp_option);
            }
        }
    }
}

void gf_BattlefieldRemoveAll () {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoAA2BE0D3_g;
    int autoAA2BE0D3_u;
    unitgroup autoA0AF9526_g;
    int autoA0AF9526_u;
    unitgroup autoC1E21272_g;
    int autoC1E21272_u;
    unitgroup autoB416A5B9_g;
    int autoB416A5B9_u;
    unitgroup auto95C12A95_g;
    int auto95C12A95_u;
    unitgroup auto99128D05_g;
    int auto99128D05_u;

    // Variable Initialization

    // Implementation
    autoAA2BE0D3_g = UnitGroup(null, c_playerAny, gv_battlefield, gv_phalanxFilter, 0);
    autoAA2BE0D3_u = UnitGroupCount(autoAA2BE0D3_g, c_unitCountAll);
    for (;; autoAA2BE0D3_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoAA2BE0D3_g, autoAA2BE0D3_u);
        if (lv_unit == null) { break; }
        UnitRemove(lv_unit);
    }
    autoA0AF9526_g = UnitGroup(null, c_playerAny, gv_battlefield, gv_portalFilter, 0);
    autoA0AF9526_u = UnitGroupCount(autoA0AF9526_g, c_unitCountAll);
    for (;; autoA0AF9526_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoA0AF9526_g, autoA0AF9526_u);
        if (lv_unit == null) { break; }
        UnitRemove(lv_unit);
    }
    autoC1E21272_g = UnitGroup(null, c_playerAny, gv_battlefield, gv_creepFilter, 0);
    autoC1E21272_u = UnitGroupCount(autoC1E21272_g, c_unitCountAll);
    for (;; autoC1E21272_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoC1E21272_g, autoC1E21272_u);
        if (lv_unit == null) { break; }
        UnitRemove(lv_unit);
    }
    autoB416A5B9_g = UnitGroup(null, c_playerAny, gv_battlefield, gv_unitFilter, 0);
    autoB416A5B9_u = UnitGroupCount(autoB416A5B9_g, c_unitCountAll);
    for (;; autoB416A5B9_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoB416A5B9_g, autoB416A5B9_u);
        if (lv_unit == null) { break; }
        UnitRemove(lv_unit);
    }
    auto95C12A95_g = UnitGroup(null, c_playerAny, gv_battlefield, UnitFilter((1 << c_targetFilterMissile), 0, 0, 0), 0);
    auto95C12A95_u = UnitGroupCount(auto95C12A95_g, c_unitCountAll);
    for (;; auto95C12A95_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto95C12A95_g, auto95C12A95_u);
        if (lv_unit == null) { break; }
        UnitRemove(lv_unit);
    }
    auto99128D05_g = UnitGroup(null, c_playerAny, gv_battlefield, UnitFilter(0, (1 << (c_targetFilterDead - 32)), 0, 0), 0);
    auto99128D05_u = UnitGroupCount(auto99128D05_g, c_unitCountAll);
    for (;; auto99128D05_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto99128D05_g, auto99128D05_u);
        if (lv_unit == null) { break; }
        UnitRemove(lv_unit);
    }
    gf_BattlefieldRemoveAllItems();
}

void gf_BattlefieldRemoveAllItems () {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto49CA1970_g;
    int auto49CA1970_u;

    // Variable Initialization

    // Implementation
    auto49CA1970_g = UnitGroup(null, c_playerAny, gv_battlefield, UnitFilter((1 << c_targetFilterItem), 0, 0, 0), 0);
    auto49CA1970_u = UnitGroupCount(auto49CA1970_g, c_unitCountAll);
    for (;; auto49CA1970_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto49CA1970_g, auto49CA1970_u);
        if (lv_unit == null) { break; }
        UnitRemove(lv_unit);
    }
}

bool gf_RegionContainsPointWithOffset (point lp_point, region lp_region, int lp_x, int lp_y) {
    // Automatic Variable Declarations
    // Implementation
    if ((RegionContainsPoint(lp_region, PointWithOffsetPolar(lp_point, (lp_x/2-0.5), (0.0+0))) == true) && (RegionContainsPoint(lp_region, PointWithOffsetPolar(lp_point, (lp_x/2-0.5), (0.0+180))) == true) && (RegionContainsPoint(lp_region, PointWithOffsetPolar(lp_point, (lp_y/2-0.5), (0.0+90))) == true) && (RegionContainsPoint(lp_region, PointWithOffsetPolar(lp_point, (lp_y/2-0.5), (0.0+270))) == true)) {
        return true;
    }
    else {
        return false;
    }
}

void gf_CreepPointSet (point lp_point, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    gv_creepPoint[lp_index] = lp_point;
}

void gf_VenueInitialSet (region lp_region, int lp_index, fixed lp_facing) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int auto52377481_ae = gv_playerCount;
    const int auto52377481_ai = 1;

    // Variable Initialization

    // Implementation
    gv_venueInitial[lp_index] = lp_region;
    gv_venueInitialFacing[lp_index] = lp_facing;
    lv_player = 1;
    for ( ; ( (auto52377481_ai >= 0 && lv_player <= auto52377481_ae) || (auto52377481_ai < 0 && lv_player >= auto52377481_ae) ) ; lv_player += auto52377481_ai ) {
        VisRevealerCreate(lv_player, gv_venueInitial[lp_index]);
        VisRevealerEnable(VisRevealerLastCreated(), false);
        gv_venueInitialRevealer[lp_index][lv_player] = VisRevealerLastCreated();
    }
}

void gf_PhalanxPointInitialSet (point lp_point, int lp_venueIndex, int lp_phalanxIndex) {
    // Automatic Variable Declarations
    // Implementation
    gv_phalanxPointInitial[lp_venueIndex][lp_phalanxIndex] = lp_point;
}

void gf_BonusVenueSet (region lp_region, int lp_index, fixed lp_facing) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int autoACC4653F_ae = gv_playerCount;
    const int autoACC4653F_ai = 1;

    // Variable Initialization

    // Implementation
    gv_bonusVenue[lp_index] = lp_region;
    gv_bonusVenueFacing[lp_index] = lp_facing;
    lv_player = 1;
    for ( ; ( (autoACC4653F_ai >= 0 && lv_player <= autoACC4653F_ae) || (autoACC4653F_ai < 0 && lv_player >= autoACC4653F_ae) ) ; lv_player += autoACC4653F_ai ) {
        VisRevealerCreate(lv_player, gv_bonusVenue[lp_index]);
        VisRevealerEnable(VisRevealerLastCreated(), false);
        gv_bonusVenueRevealer[lp_index][lv_player] = VisRevealerLastCreated();
    }
}

void gf_BonusPhalanxPointSet (point lp_point, int lp_venueIndex, int lp_phalanxIndex) {
    // Automatic Variable Declarations
    // Implementation
    gv_bonusPhalanxPoint[lp_venueIndex][lp_phalanxIndex] = lp_point;
}

void gf_FinalVenueSet (region lp_region, int lp_index, fixed lp_facing) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int auto1BBBF775_ae = gv_playerCount;
    const int auto1BBBF775_ai = 1;

    // Variable Initialization

    // Implementation
    gv_finalVenue[lp_index] = lp_region;
    gv_finalVenueFacing[lp_index] = lp_facing;
    lv_player = 1;
    for ( ; ( (auto1BBBF775_ai >= 0 && lv_player <= auto1BBBF775_ae) || (auto1BBBF775_ai < 0 && lv_player >= auto1BBBF775_ae) ) ; lv_player += auto1BBBF775_ai ) {
        VisRevealerCreate(lv_player, gv_finalVenue[lp_index]);
        VisRevealerEnable(VisRevealerLastCreated(), false);
        gv_finalVenueRevealer[lp_index][lv_player] = VisRevealerLastCreated();
    }
}

void gf_FinalPhalanxPointSet (point lp_point, int lp_venueIndex, int lp_phalanxIndex) {
    // Automatic Variable Declarations
    // Implementation
    gv_finalPhalanxPoint[lp_venueIndex][lp_phalanxIndex] = lp_point;
}

void gf_VenueRevealerEnable (int lp_round, bool lp_option) {
    // Variable Declarations
    int lv_venue;

    // Automatic Variable Declarations
    const int auto360E19AC_ae = gv_venueMaximumCount;
    const int auto360E19AC_ai = 1;

    // Variable Initialization

    // Implementation
    gf_SetTeamAlianceAll(libNtve_ge_AllianceSetting_Ally);
    lv_venue = 1;
    for ( ; ( (auto360E19AC_ai >= 0 && lv_venue <= auto360E19AC_ae) || (auto360E19AC_ai < 0 && lv_venue >= auto360E19AC_ae) ) ; lv_venue += auto360E19AC_ai ) {
        if ((gv_playerAtVenue[lv_venue][lp_round] != -1)) {
            if ((lp_option == true)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtVenue[lv_venue][lp_round], "BuildPhalanx", 1);
                if ((gf_IsFinalRound(lp_round) == true)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtVenue[lv_venue][lp_round], "BuildPhalanxFinal", 1);
                }
                else {
                    libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtVenue[lv_venue][lp_round], "BuildPhalanxFinal", 0);
                }
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtVenue[lv_venue][lp_round], "BuildPortal", 1);
            }
            else {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtVenue[lv_venue][lp_round], "BuildArmy", 0);
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtVenue[lv_venue][lp_round], "BuildPhalanx", 0);
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtVenue[lv_venue][lp_round], "BuildPhalanxFinal", 0);
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtVenue[lv_venue][lp_round], "BuildPortal", 0);
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtVenue[lv_venue][lp_round], "CountUnit", 0);
            }
            VisRevealerEnable(gv_venueRevealer[lv_venue][gv_playerAtVenue[lv_venue][lp_round]], lp_option);
        }

    }
}

void gf_BonusVenueReplace () {
    // Variable Declarations
    int lv_venue;
    int lv_index;

    // Automatic Variable Declarations
    const int autoAC0A60BF_ae = gv_venueMaximumCount;
    const int autoAC0A60BF_ai = 1;
    const int auto05A3ACD3_ae = gv_playerMaximumIndex;
    const int auto05A3ACD3_ai = 1;

    // Variable Initialization

    // Implementation
    lv_venue = 1;
    for ( ; ( (autoAC0A60BF_ai >= 0 && lv_venue <= autoAC0A60BF_ae) || (autoAC0A60BF_ai < 0 && lv_venue >= autoAC0A60BF_ae) ) ; lv_venue += autoAC0A60BF_ai ) {
        gv_venue[lv_venue] = gv_bonusVenue[lv_venue];
        gv_venueFacing[lv_venue] = gv_bonusVenueFacing[lv_venue];
        lv_index = 0;
        for ( ; ( (auto05A3ACD3_ai >= 0 && lv_index <= auto05A3ACD3_ae) || (auto05A3ACD3_ai < 0 && lv_index >= auto05A3ACD3_ae) ) ; lv_index += auto05A3ACD3_ai ) {
            gv_venueRevealer[lv_venue][lv_index] = gv_bonusVenueRevealer[lv_venue][lv_index];
        }
    }
}

void gf_BonusPhalanxPointReplace () {
    // Variable Declarations
    int lv_venue;
    int lv_index;

    // Automatic Variable Declarations
    const int auto55BF1B61_ae = gv_venueMaximumCount;
    const int auto55BF1B61_ai = 1;
    const int auto376012DE_ae = gv_phalanxMaximumCount;
    const int auto376012DE_ai = 1;

    // Variable Initialization

    // Implementation
    lv_venue = 1;
    for ( ; ( (auto55BF1B61_ai >= 0 && lv_venue <= auto55BF1B61_ae) || (auto55BF1B61_ai < 0 && lv_venue >= auto55BF1B61_ae) ) ; lv_venue += auto55BF1B61_ai ) {
        lv_index = 1;
        for ( ; ( (auto376012DE_ai >= 0 && lv_index <= auto376012DE_ae) || (auto376012DE_ai < 0 && lv_index >= auto376012DE_ae) ) ; lv_index += auto376012DE_ai ) {
            gv_phalanxPoint[lv_venue][lv_index] = gv_bonusPhalanxPoint[lv_venue][lv_index];
        }
    }
}

void gf_FinalVenueReplace () {
    // Variable Declarations
    int lv_venue;
    int lv_index;

    // Automatic Variable Declarations
    int auto0E8C32DD_ae;
    const int auto0E8C32DD_ai = 1;
    const int auto9708C60C_ae = gv_playerMaximumIndex;
    const int auto9708C60C_ai = 1;

    // Variable Initialization

    // Implementation
    auto0E8C32DD_ae = gv_venueFinalEnd;
    lv_venue = 1;
    for ( ; ( (auto0E8C32DD_ai >= 0 && lv_venue <= auto0E8C32DD_ae) || (auto0E8C32DD_ai < 0 && lv_venue >= auto0E8C32DD_ae) ) ; lv_venue += auto0E8C32DD_ai ) {
        gv_venue[lv_venue] = gv_finalVenue[lv_venue];
        gv_venueFacing[lv_venue] = gv_finalVenueFacing[lv_venue];
        lv_index = 0;
        for ( ; ( (auto9708C60C_ai >= 0 && lv_index <= auto9708C60C_ae) || (auto9708C60C_ai < 0 && lv_index >= auto9708C60C_ae) ) ; lv_index += auto9708C60C_ai ) {
            gv_venueRevealer[lv_venue][lv_index] = gv_finalVenueRevealer[lv_venue][lv_index];
        }
    }
}

void gf_FinalPhalanxPointReplace () {
    // Variable Declarations
    int lv_venue;
    int lv_index;

    // Automatic Variable Declarations
    const int auto767D08C4_ae = gv_venueMaximumCount;
    const int auto767D08C4_ai = 1;
    const int auto299BC4BF_ae = gv_phalanxMaximumCount;
    const int auto299BC4BF_ai = 1;

    // Variable Initialization

    // Implementation
    lv_venue = 1;
    for ( ; ( (auto767D08C4_ai >= 0 && lv_venue <= auto767D08C4_ae) || (auto767D08C4_ai < 0 && lv_venue >= auto767D08C4_ae) ) ; lv_venue += auto767D08C4_ai ) {
        lv_index = 1;
        for ( ; ( (auto299BC4BF_ai >= 0 && lv_index <= auto299BC4BF_ae) || (auto299BC4BF_ai < 0 && lv_index >= auto299BC4BF_ae) ) ; lv_index += auto299BC4BF_ai ) {
            gv_phalanxPoint[lv_venue][lv_index] = gv_finalPhalanxPoint[lv_venue][lv_index];
        }
    }
}

void gf_VenueInitialReplace () {
    // Variable Declarations
    int lv_venue;
    int lv_index;

    // Automatic Variable Declarations
    const int auto01075457_ae = gv_venueMaximumCount;
    const int auto01075457_ai = 1;
    const int auto0DCF4BBC_ae = gv_playerMaximumIndex;
    const int auto0DCF4BBC_ai = 1;

    // Variable Initialization

    // Implementation
    lv_venue = 1;
    for ( ; ( (auto01075457_ai >= 0 && lv_venue <= auto01075457_ae) || (auto01075457_ai < 0 && lv_venue >= auto01075457_ae) ) ; lv_venue += auto01075457_ai ) {
        gv_venue[lv_venue] = gv_venueInitial[lv_venue];
        gv_venueFacing[lv_venue] = gv_venueInitialFacing[lv_venue];
        lv_index = 0;
        for ( ; ( (auto0DCF4BBC_ai >= 0 && lv_index <= auto0DCF4BBC_ae) || (auto0DCF4BBC_ai < 0 && lv_index >= auto0DCF4BBC_ae) ) ; lv_index += auto0DCF4BBC_ai ) {
            gv_venueRevealer[lv_venue][lv_index] = gv_venueInitialRevealer[lv_venue][lv_index];
        }
    }
}

void gf_PhalanxPointInitialReplace () {
    // Variable Declarations
    int lv_venue;
    int lv_index;

    // Automatic Variable Declarations
    const int auto8FCE57FD_ae = gv_venueMaximumCount;
    const int auto8FCE57FD_ai = 1;
    const int auto486958B3_ae = gv_phalanxMaximumCount;
    const int auto486958B3_ai = 1;

    // Variable Initialization

    // Implementation
    lv_venue = 1;
    for ( ; ( (auto8FCE57FD_ai >= 0 && lv_venue <= auto8FCE57FD_ae) || (auto8FCE57FD_ai < 0 && lv_venue >= auto8FCE57FD_ae) ) ; lv_venue += auto8FCE57FD_ai ) {
        lv_index = 1;
        for ( ; ( (auto486958B3_ai >= 0 && lv_index <= auto486958B3_ae) || (auto486958B3_ai < 0 && lv_index >= auto486958B3_ae) ) ; lv_index += auto486958B3_ai ) {
            gv_phalanxPoint[lv_venue][lv_index] = gv_phalanxPointInitial[lv_venue][lv_index];
        }
    }
}

void gf_VenueAndPhalanxPointInitialReplace () {
    // Automatic Variable Declarations
    // Implementation
    gf_VenueInitialReplace();
    gf_PhalanxPointInitialReplace();
}

void gf_BonusVenueAndPhalanxPointInitialReplace () {
    // Automatic Variable Declarations
    // Implementation
    gf_BonusVenueReplace();
    gf_BonusPhalanxPointReplace();
}

void gf_FinalVenueAndPhalanxPointInitialReplace () {
    // Automatic Variable Declarations
    // Implementation
    gf_FinalVenueReplace();
    gf_FinalPhalanxPointReplace();
}

int gf_PointInBuildingRegionGetBuildingRegion (point lp_point) {
    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    int lv_index;

    // Automatic Variable Declarations
    const int autoD7B8174D_ae = gv_playerCount;
    const int autoD7B8174D_ai = 1;
    const int auto47954020_ae = gv_phalanxMaximumCount;
    const int auto47954020_ai = 1;

    // Variable Initialization

    // Implementation
    lv_buildingRegion = 1;
    for ( ; ( (autoD7B8174D_ai >= 0 && lv_buildingRegion <= autoD7B8174D_ae) || (autoD7B8174D_ai < 0 && lv_buildingRegion >= autoD7B8174D_ae) ) ; lv_buildingRegion += autoD7B8174D_ai ) {
        lv_phalanx = 1;
        for ( ; ( (auto47954020_ai >= 0 && lv_phalanx <= auto47954020_ae) || (auto47954020_ai < 0 && lv_phalanx >= auto47954020_ae) ) ; lv_phalanx += auto47954020_ai ) {
            if ((RegionContainsPoint(gv_buildingRegion[lv_buildingRegion][lv_phalanx], lp_point) == true)) {
                lv_index = lv_buildingRegion;
                break;
            }

        }
    }
    return lv_index;
}

int gf_PointInBuildingRegionGetPhalanx (point lp_point) {
    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    int lv_index;

    // Automatic Variable Declarations
    const int auto65B9F9CA_ae = gv_playerCount;
    const int auto65B9F9CA_ai = 1;
    const int auto0159A0C9_ae = gv_phalanxMaximumCount;
    const int auto0159A0C9_ai = 1;

    // Variable Initialization

    // Implementation
    lv_buildingRegion = 1;
    for ( ; ( (auto65B9F9CA_ai >= 0 && lv_buildingRegion <= auto65B9F9CA_ae) || (auto65B9F9CA_ai < 0 && lv_buildingRegion >= auto65B9F9CA_ae) ) ; lv_buildingRegion += auto65B9F9CA_ai ) {
        lv_phalanx = 1;
        for ( ; ( (auto0159A0C9_ai >= 0 && lv_phalanx <= auto0159A0C9_ae) || (auto0159A0C9_ai < 0 && lv_phalanx >= auto0159A0C9_ae) ) ; lv_phalanx += auto0159A0C9_ai ) {
            if ((RegionContainsPoint(gv_buildingRegion[lv_buildingRegion][lv_phalanx], lp_point) == true)) {
                lv_index = lv_phalanx;
                break;
            }

        }
    }
    return lv_index;
}

void gf_PreviewerPositionAll () {
    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    string lv_unitType;

    // Automatic Variable Declarations
    const int auto1E842374_ae = gv_playerCount;
    const int auto1E842374_ai = 1;
    const int autoA38A80FF_ae = gv_phalanxMaximumCount;
    const int autoA38A80FF_ai = 1;

    // Variable Initialization

    // Implementation
    lv_buildingRegion = 1;
    for ( ; ( (auto1E842374_ai >= 0 && lv_buildingRegion <= auto1E842374_ae) || (auto1E842374_ai < 0 && lv_buildingRegion >= auto1E842374_ae) ) ; lv_buildingRegion += auto1E842374_ai ) {
        lv_unitType = gf_RaceGetPreviewerType(PlayerRace(gv_playerAtBuildingRegion[lv_buildingRegion]));
        lv_phalanx = 1;
        for ( ; ( (autoA38A80FF_ai >= 0 && lv_phalanx <= autoA38A80FF_ae) || (autoA38A80FF_ai < 0 && lv_phalanx >= autoA38A80FF_ae) ) ; lv_phalanx += autoA38A80FF_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_unitType, c_unitCreateIgnorePlacement, gv_playerAtBuildingRegion[lv_buildingRegion], RegionGetCenter(gv_previewRegion[lv_buildingRegion][lv_phalanx]));
        }
    }
}

void gf_BuildingRegionSet (region lp_region, int lp_index, int lp_phalanx) {
    // Automatic Variable Declarations
    // Implementation
    gv_buildingRegion[lp_index][lp_phalanx] = lp_region;
}

void gf_PlayerAtBuildingRegionSet () {
    // Variable Declarations
    int lv_buildingRegion;
    int lv_targetBuildingRegion;
    int lv_phalanx;
    int lv_player;

    // Automatic Variable Declarations
    const int autoE26E2025_ae = gv_playerCount;
    const int autoE26E2025_ai = 1;
    const int autoEC6CB752_ae = gv_phalanxMaximumCount;
    const int autoEC6CB752_ai = 1;
    const int auto948DFD48_ae = gv_playerCount;
    const int auto948DFD48_ai = 1;
    const int autoABA276F3_ae = gv_playerCount;
    const int autoABA276F3_ai = 1;
    const int autoF988ED59_ae = gv_playerCount;
    const int autoF988ED59_ai = 1;
    const int auto597D4DDC_ae = gv_phalanxMaximumCount;
    const int auto597D4DDC_ai = 1;

    // Variable Initialization

    // Implementation
    lv_buildingRegion = 1;
    for ( ; ( (autoE26E2025_ai >= 0 && lv_buildingRegion <= autoE26E2025_ae) || (autoE26E2025_ai < 0 && lv_buildingRegion >= autoE26E2025_ae) ) ; lv_buildingRegion += autoE26E2025_ai ) {
        lv_phalanx = 1;
        for ( ; ( (autoEC6CB752_ai >= 0 && lv_phalanx <= autoEC6CB752_ae) || (autoEC6CB752_ai < 0 && lv_phalanx >= autoEC6CB752_ae) ) ; lv_phalanx += autoEC6CB752_ai ) {
            lv_targetBuildingRegion = 1;
            for ( ; ( (auto948DFD48_ai >= 0 && lv_targetBuildingRegion <= auto948DFD48_ae) || (auto948DFD48_ai < 0 && lv_targetBuildingRegion >= auto948DFD48_ae) ) ; lv_targetBuildingRegion += auto948DFD48_ai ) {
                if ((RegionContainsPoint(gv_buildingRegion[lv_buildingRegion][lv_phalanx], PlayerStartLocation(lv_targetBuildingRegion)) == true)) {
                    lv_player = lv_targetBuildingRegion;
                }

            }
        }
        gv_playerAtBuildingRegion[lv_buildingRegion] = lv_player;
    }
    lv_buildingRegion = 1;
    for ( ; ( (autoABA276F3_ai >= 0 && lv_buildingRegion <= autoABA276F3_ae) || (autoABA276F3_ai < 0 && lv_buildingRegion >= autoABA276F3_ae) ) ; lv_buildingRegion += autoABA276F3_ai ) {
        lv_targetBuildingRegion = 1;
        for ( ; ( (autoF988ED59_ai >= 0 && lv_targetBuildingRegion <= autoF988ED59_ae) || (autoF988ED59_ai < 0 && lv_targetBuildingRegion >= autoF988ED59_ae) ) ; lv_targetBuildingRegion += autoF988ED59_ai ) {
            lv_phalanx = 1;
            for ( ; ( (auto597D4DDC_ai >= 0 && lv_phalanx <= auto597D4DDC_ae) || (auto597D4DDC_ai < 0 && lv_phalanx >= auto597D4DDC_ae) ) ; lv_phalanx += auto597D4DDC_ai ) {
                VisRevealerCreate(gv_playerAtBuildingRegion[lv_buildingRegion], gv_buildingRegion[lv_targetBuildingRegion][lv_phalanx]);
                VisRevealerEnable(VisRevealerLastCreated(), false);
                gv_buildingRegionRevealer[gv_playerAtBuildingRegion[lv_buildingRegion]][gv_playerAtBuildingRegion[lv_targetBuildingRegion]][lv_phalanx] = VisRevealerLastCreated();
                VisRevealerCreate(gv_playerAtBuildingRegion[lv_buildingRegion], gv_previewRegion[lv_targetBuildingRegion][lv_phalanx]);
                VisRevealerEnable(VisRevealerLastCreated(), false);
                gv_previewRegionRevealer[gv_playerAtBuildingRegion[lv_buildingRegion]][gv_playerAtBuildingRegion[lv_targetBuildingRegion]][lv_phalanx] = VisRevealerLastCreated();
            }
        }
    }
}

void gf_BuildingRegionRevealerEnable (bool lp_option, bool lp_debug) {
    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    int lv_targetBuildingRegion;

    // Automatic Variable Declarations
    const int auto801F26F4_ae = gv_playerCount;
    const int auto801F26F4_ai = 1;
    const int auto50FBBD95_ae = gv_phalanxMaximumCount;
    const int auto50FBBD95_ai = 1;
    const int auto8FCB6F6C_ae = gv_playerCount;
    const int auto8FCB6F6C_ai = 1;
    const int auto4C22749C_ae = gv_phalanxMaximumCount;
    const int auto4C22749C_ai = 1;

    // Variable Initialization

    // Implementation
    gf_SetTeamAlianceAll(libNtve_ge_AllianceSetting_AllyWithSharedVision);
    lv_buildingRegion = 1;
    for ( ; ( (auto801F26F4_ai >= 0 && lv_buildingRegion <= auto801F26F4_ae) || (auto801F26F4_ai < 0 && lv_buildingRegion >= auto801F26F4_ae) ) ; lv_buildingRegion += auto801F26F4_ai ) {
        if ((lp_option == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "BuildArmy", 1);
            if ((gf_IsFinalRound(gv_round) == true)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "BuildArmyFinal", 1);
            }
            else {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "BuildArmyFinal", 0);
            }
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "BuildArmy", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "BuildArmyFinal", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "BuildPhalanx", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "BuildPhalanxFinal", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "BuildPortal", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "CountUnit", 0);
        }
        lv_phalanx = 1;
        for ( ; ( (auto50FBBD95_ai >= 0 && lv_phalanx <= auto50FBBD95_ae) || (auto50FBBD95_ai < 0 && lv_phalanx >= auto50FBBD95_ae) ) ; lv_phalanx += auto50FBBD95_ai ) {
            VisRevealerEnable(gv_buildingRegionRevealer[gv_playerAtBuildingRegion[lv_buildingRegion]][gv_playerAtBuildingRegion[lv_buildingRegion]][lv_phalanx], lp_option);
            VisRevealerEnable(gv_previewRegionRevealer[gv_playerAtBuildingRegion[lv_buildingRegion]][gv_playerAtBuildingRegion[lv_buildingRegion]][lv_phalanx], lp_option);
        }
        if ((lp_debug == true)) {
            lv_targetBuildingRegion = 1;
            for ( ; ( (auto8FCB6F6C_ai >= 0 && lv_targetBuildingRegion <= auto8FCB6F6C_ae) || (auto8FCB6F6C_ai < 0 && lv_targetBuildingRegion >= auto8FCB6F6C_ae) ) ; lv_targetBuildingRegion += auto8FCB6F6C_ai ) {
                lv_phalanx = 1;
                for ( ; ( (auto4C22749C_ai >= 0 && lv_phalanx <= auto4C22749C_ae) || (auto4C22749C_ai < 0 && lv_phalanx >= auto4C22749C_ae) ) ; lv_phalanx += auto4C22749C_ai ) {
                    VisRevealerEnable(gv_buildingRegionRevealer[gv_playerAtBuildingRegion[lv_buildingRegion]][gv_playerAtBuildingRegion[lv_targetBuildingRegion]][lv_phalanx], lp_option);
                    VisRevealerEnable(gv_previewRegionRevealer[gv_playerAtBuildingRegion[lv_buildingRegion]][gv_playerAtBuildingRegion[lv_targetBuildingRegion]][lv_phalanx], lp_option);
                }
            }
        }

    }
}

void gf_UnitTypeReset (int lp_player, int lp_phalanx) {
    // Variable Declarations
    int lv_unitIndex;
    int lv_itemIndex;

    // Automatic Variable Declarations
    const int auto4DFE2879_ae = gv_unitMaximumCountPerPhalanx;
    const int auto4DFE2879_ai = 1;
    const int auto2E764D3C_ae = gv_itemMaximumCountPerUnit;
    const int auto2E764D3C_ai = 1;

    // Variable Initialization

    // Implementation
    gv_unitIndexCount[lp_player][lp_phalanx] = 0;
    lv_unitIndex = 1;
    for ( ; ( (auto4DFE2879_ai >= 0 && lv_unitIndex <= auto4DFE2879_ae) || (auto4DFE2879_ai < 0 && lv_unitIndex >= auto4DFE2879_ae) ) ; lv_unitIndex += auto4DFE2879_ai ) {
        gv_unitType[lp_player][lp_phalanx][lv_unitIndex] = null;
        lv_itemIndex = 1;
        for ( ; ( (auto2E764D3C_ai >= 0 && lv_itemIndex <= auto2E764D3C_ae) || (auto2E764D3C_ai < 0 && lv_itemIndex >= auto2E764D3C_ae) ) ; lv_itemIndex += auto2E764D3C_ai ) {
            gv_itemType[lp_player][lp_phalanx][lv_unitIndex][lv_itemIndex] = null;
        }
    }
}

void gf_UnitTypeSetAll () {
    // Variable Declarations
    int lv_buildingRegion;
    int lv_buildingRegionReal;
    int lv_phalanx;

    // Automatic Variable Declarations
    const int auto05841633_ae = gv_playerCount;
    const int auto05841633_ai = 1;
    const int autoF4645F72_ae = gv_phalanxMaximumCount;
    const int autoF4645F72_ai = 1;

    // Variable Initialization

    // Implementation
    gf_DreamUpdateAll();
    lv_buildingRegion = 1;
    for ( ; ( (auto05841633_ai >= 0 && lv_buildingRegion <= auto05841633_ae) || (auto05841633_ai < 0 && lv_buildingRegion >= auto05841633_ae) ) ; lv_buildingRegion += auto05841633_ai ) {
        gv_buildingScore[gv_playerAtBuildingRegion[lv_buildingRegion]] = 0;
        if ((TechTreeUpgradeCount(gv_playerAtBuildingRegion[lv_buildingRegion], "EmeraldDream", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(gf_PlayerGetCompetitor(gv_playerAtBuildingRegion[lv_buildingRegion]), "EmeraldDream", c_techCountCompleteOnly) == 0) && (gf_IsFinalRound(gv_round) == false) && (gv_dreamDisabled == false)) {
            lv_buildingRegionReal = gf_PlayerGetBuidingRegion(gf_PlayerGetCompetitor(gv_playerAtBuildingRegion[lv_buildingRegion]));
        }
        else {
            lv_buildingRegionReal = lv_buildingRegion;
        }
        lv_phalanx = 1;
        for ( ; ( (autoF4645F72_ai >= 0 && lv_phalanx <= autoF4645F72_ae) || (autoF4645F72_ai < 0 && lv_phalanx >= autoF4645F72_ae) ) ; lv_phalanx += autoF4645F72_ai ) {
            gf_UnitTypeSet(lv_buildingRegionReal, lv_phalanx, gv_playerAtBuildingRegion[lv_buildingRegion]);
        }
    }
    gf_BuildingScoreUpdateAll();
}

void gf_DreamUpdateAll () {
    // Variable Declarations
    int lv_player;
    unit lv_unit;
    int lv_buildingRegion;
    int lv_phalanx;

    // Automatic Variable Declarations
    const int autoC7A27407_ae = gv_playerCount;
    const int autoC7A27407_ai = 1;
    const int auto5A371520_ae = gv_playerCount;
    const int auto5A371520_ai = 1;
    const int autoDD591105_ae = gv_phalanxMaximumCount;
    const int autoDD591105_ai = 1;

    // Variable Initialization

    // Implementation
    lv_player = 1;
    for ( ; ( (autoC7A27407_ai >= 0 && lv_player <= autoC7A27407_ae) || (autoC7A27407_ai < 0 && lv_player >= autoC7A27407_ae) ) ; lv_player += autoC7A27407_ai ) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "EmeraldDream", 0);
    }
    lv_buildingRegion = 1;
    for ( ; ( (auto5A371520_ai >= 0 && lv_buildingRegion <= auto5A371520_ae) || (auto5A371520_ai < 0 && lv_buildingRegion >= auto5A371520_ae) ) ; lv_buildingRegion += auto5A371520_ai ) {
        lv_phalanx = 1;
        for ( ; ( (autoDD591105_ai >= 0 && lv_phalanx <= autoDD591105_ae) || (autoDD591105_ai < 0 && lv_phalanx >= autoDD591105_ae) ) ; lv_phalanx += autoDD591105_ai ) {
            if ((UnitGroupCount(UnitGroup(gv_dreamUnitType, c_playerAny, gv_buildingRegion[lv_buildingRegion][lv_phalanx], gv_buildingFilter, 0), c_unitCountAlive) > 0)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_playerAtBuildingRegion[lv_buildingRegion], "EmeraldDream", 1);
            }

        }
    }
}

int gf_PlayerGetBuidingRegion (int lp_player) {
    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    int lv_buildingRegionIndex;

    // Automatic Variable Declarations
    const int auto85D34268_ae = gv_playerCount;
    const int auto85D34268_ai = 1;
    const int autoFECB598D_ae = gv_phalanxMaximumCount;
    const int autoFECB598D_ai = 1;

    // Variable Initialization

    // Implementation
    lv_buildingRegion = 1;
    for ( ; ( (auto85D34268_ai >= 0 && lv_buildingRegion <= auto85D34268_ae) || (auto85D34268_ai < 0 && lv_buildingRegion >= auto85D34268_ae) ) ; lv_buildingRegion += auto85D34268_ai ) {
        lv_phalanx = 1;
        for ( ; ( (autoFECB598D_ai >= 0 && lv_phalanx <= autoFECB598D_ae) || (autoFECB598D_ai < 0 && lv_phalanx >= autoFECB598D_ae) ) ; lv_phalanx += autoFECB598D_ai ) {
            if ((RegionContainsPoint(gv_buildingRegion[lv_buildingRegion][lv_phalanx], PlayerStartLocation(lp_player)) == true)) {
                lv_buildingRegionIndex = lv_buildingRegion;
            }

        }
    }
    return lv_buildingRegionIndex;
}

void gf_UnitTypeSet (int lp_buildingRegion, int lp_phalanx, int lp_player) {
    // Variable Declarations
    region lv_buildingRegion;
    point lv_pointInitial;
    point lv_point;
    int lv_unitIndex;
    string lv_unitTypeID;
    int lv_unit;
    int lv_index;
    string lv_unitType;
    int lv_column;
    int lv_row;
    region lv_region;
    int lv_i;
    string lv_itemType;
    int lv_itemIndex;

    // Automatic Variable Declarations
    int autoFDA36F34_ae;
    const int autoFDA36F34_ai = 1;
    int autoB827735A_ae;
    const int autoB827735A_ai = 1;
    unitgroup autoEE26B69B_g;
    int autoEE26B69B_u;
    unit autoEE26B69B_var;
    int autoDE6BCDF4_ae;
    const int autoDE6BCDF4_ai = 1;
    int auto7CE0FDBF_ae;
    const int auto7CE0FDBF_ai = 1;
    const int auto66B74A20_ae = gv_itemMaximumCountPerUnit;
    const int auto66B74A20_ai = 1;
    const int auto97451579_ae = gv_itemMaximumCountPerUnit;
    const int auto97451579_ai = 1;

    // Variable Initialization
    lv_buildingRegion = gv_buildingRegion[lp_buildingRegion][lp_phalanx];
    lv_unitTypeID = "";

    // Implementation
    gf_UnitTypeReset(lp_player, lp_phalanx);
    lv_pointInitial = PointWithOffset(RegionGetCenter(lv_buildingRegion), (-libNtve_gf_WidthOfRegion(lv_buildingRegion)/2+0.5), (libNtve_gf_HeightOfRegion(lv_buildingRegion)/2-0.5));
    autoFDA36F34_ae = FixedToInt(libNtve_gf_HeightOfRegion(lv_buildingRegion));
    lv_row = 1;
    for ( ; ( (autoFDA36F34_ai >= 0 && lv_row <= autoFDA36F34_ae) || (autoFDA36F34_ai < 0 && lv_row >= autoFDA36F34_ae) ) ; lv_row += autoFDA36F34_ai ) {
        autoB827735A_ae = FixedToInt(libNtve_gf_WidthOfRegion(lv_buildingRegion));
        lv_column = 1;
        for ( ; ( (autoB827735A_ai >= 0 && lv_column <= autoB827735A_ae) || (autoB827735A_ai < 0 && lv_column >= autoB827735A_ae) ) ; lv_column += autoB827735A_ai ) {
            lv_point = PointWithOffset(lv_pointInitial, (lv_column-1), (-lv_row+1));
            lv_region = RegionRect((PointGetX(lv_point)-0.5), (PointGetY(lv_point)-0.5), (PointGetX(lv_point)+0.5), (PointGetY(lv_point)+0.5));
            autoEE26B69B_g = UnitGroup(null, c_playerAny, lv_region, gv_buildingFilter, 0);
            autoEE26B69B_u = UnitGroupCount(autoEE26B69B_g, c_unitCountAll);
            for (;; autoEE26B69B_u -= 1) {
                autoEE26B69B_var = UnitGroupUnitFromEnd(autoEE26B69B_g, autoEE26B69B_u);
                if (autoEE26B69B_var == null) { break; }
                lv_unitTypeID = (UnitGetType(autoEE26B69B_var));
                autoDE6BCDF4_ae = UserDataFieldValueCount(gv_unitTypeUserType, "UnitType");
                lv_index = 1;
                for ( ; ( (autoDE6BCDF4_ai >= 0 && lv_index <= autoDE6BCDF4_ae) || (autoDE6BCDF4_ai < 0 && lv_index >= autoDE6BCDF4_ae) ) ; lv_index += autoDE6BCDF4_ai ) {
                    auto7CE0FDBF_ae = UserDataGetInt(gv_unitTypeUserType, (lv_unitTypeID), "Count", lv_index);
                    lv_unit = 1;
                    for ( ; ( (auto7CE0FDBF_ai >= 0 && lv_unit <= auto7CE0FDBF_ae) || (auto7CE0FDBF_ai < 0 && lv_unit >= auto7CE0FDBF_ae) ) ; lv_unit += auto7CE0FDBF_ai ) {
                        if ((lv_unitIndex < gv_unitMaximumCountPerPhalanx)) {
                            lv_unitType = UserDataGetUnit(gv_unitTypeUserType, (lv_unitTypeID), "UnitType", lv_index);
                            if ((lv_unitType != null)) {
                                lv_unitIndex += 1;
                                gv_unitType[lp_player][lp_phalanx][lv_unitIndex] = lv_unitType;
                                gv_buildingScore[lp_player] += gf_UnitTypeGetKillResource(lv_unitType);
                                lv_itemIndex = 1;
                                for ( ; ( (auto66B74A20_ai >= 0 && lv_itemIndex <= auto66B74A20_ae) || (auto66B74A20_ai < 0 && lv_itemIndex >= auto66B74A20_ae) ) ; lv_itemIndex += auto66B74A20_ai ) {
                                    lv_itemType = UnitGetType(UnitInventoryItem(autoEE26B69B_var, lv_itemIndex));
                                    if ((lv_itemType != null)) {
                                        gv_itemType[lp_player][lp_phalanx][lv_unitIndex][lv_itemIndex] = lv_itemType;
                                    }

                                }
                            }

                        }

                    }
                }
                lv_itemIndex = 1;
                for ( ; ( (auto97451579_ai >= 0 && lv_itemIndex <= auto97451579_ae) || (auto97451579_ai < 0 && lv_itemIndex >= auto97451579_ae) ) ; lv_itemIndex += auto97451579_ai ) {
                    lv_itemType = UnitGetType(UnitInventoryItem(autoEE26B69B_var, lv_itemIndex));
                    if ((lv_itemType != null)) {
                        gv_buildingScore[lp_player] += gf_ItemTypeGetCostResource(lv_itemType);
                    }

                }
            }
        }
    }
    gv_unitIndexCount[lp_player][lp_phalanx] = lv_unitIndex;
}

void gf_CreepUnitTypeSetAll () {
    // Variable Declarations
    int lv_round;
    int lv_venue;
    int lv_count;
    int lv_index;
    string lv_unitType;
    text lv_description;
    string lv_path;

    // Automatic Variable Declarations
    int auto699ABE35_ae;
    const int auto699ABE35_ai = 1;
    const int auto57A507C1_ae = gv_venueMaximumCount;
    const int auto57A507C1_ai = 1;

    // Variable Initialization
    lv_path = "";

    // Implementation
    lv_count = UserDataFieldValueCount(gv_creepUnitTypeUserType, "UnitType");
    auto699ABE35_ae = gv_roundCount;
    lv_round = 1;
    for ( ; ( (auto699ABE35_ai >= 0 && lv_round <= auto699ABE35_ae) || (auto699ABE35_ai < 0 && lv_round >= auto699ABE35_ae) ) ; lv_round += auto699ABE35_ai ) {
        if ((gv_bonusRoundIsOn[lv_round] == true)) {
            lv_venue = 1;
            for ( ; ( (auto57A507C1_ai >= 0 && lv_venue <= auto57A507C1_ae) || (auto57A507C1_ai < 0 && lv_venue >= auto57A507C1_ae) ) ; lv_venue += auto57A507C1_ai ) {
                gv_creepUnitType[lv_venue][lv_round] = "nmgw";
            }
        }

    }
}

void gf_PreviewUpdateAll () {
    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    string lv_unitType;

    // Automatic Variable Declarations
    const int auto50905004_ae = gv_playerCount;
    const int auto50905004_ai = 1;
    const int auto19D3E460_ae = gv_phalanxMaximumCount;
    const int auto19D3E460_ai = 1;

    // Variable Initialization

    // Implementation
    lv_buildingRegion = 1;
    for ( ; ( (auto50905004_ai >= 0 && lv_buildingRegion <= auto50905004_ae) || (auto50905004_ai < 0 && lv_buildingRegion >= auto50905004_ae) ) ; lv_buildingRegion += auto50905004_ai ) {
        lv_phalanx = 1;
        for ( ; ( (auto19D3E460_ai >= 0 && lv_phalanx <= auto19D3E460_ae) || (auto19D3E460_ai < 0 && lv_phalanx >= auto19D3E460_ae) ) ; lv_phalanx += auto19D3E460_ai ) {
            gf_PreviewUpdate(gv_playerAtBuildingRegion[lv_buildingRegion], lv_phalanx);
        }
    }
}

void gf_PreviewUpdate (int lp_player, int lp_phalanx) {
    // Variable Declarations
    string lv_unitTypeID;
    point lv_position;
    int lv_phalanx;
    int lv_index;

    // Automatic Variable Declarations
    const int auto96EE433F_ae = gv_unitMaximumCountPerPhalanx;
    const int auto96EE433F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto96EE433F_ai >= 0 && lv_index <= auto96EE433F_ae) || (auto96EE433F_ai < 0 && lv_index >= auto96EE433F_ae) ) ; lv_index += auto96EE433F_ai ) {
        ActorSend(gv_previewModel[lp_player][lp_phalanx][lv_index], libNtve_gf_Destroy());
    }
    gf_UnitOrPreviewModelPosition(gv_previewer[lp_player][lp_phalanx], true);
}

void gf_PreviewerRegionSet (region lp_region, int lp_index, int lp_phalanx) {
    // Automatic Variable Declarations
    // Implementation
    gv_previewRegion[lp_index][lp_phalanx] = lp_region;
}

void gf_PreviewerRemoveAll () {
    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    string lv_unitType;

    // Automatic Variable Declarations
    const int auto454BAA4C_ae = gv_playerCount;
    const int auto454BAA4C_ai = 1;
    const int auto64CF2C5E_ae = gv_phalanxMaximumCount;
    const int auto64CF2C5E_ai = 1;

    // Variable Initialization

    // Implementation
    lv_buildingRegion = 1;
    for ( ; ( (auto454BAA4C_ai >= 0 && lv_buildingRegion <= auto454BAA4C_ae) || (auto454BAA4C_ai < 0 && lv_buildingRegion >= auto454BAA4C_ae) ) ; lv_buildingRegion += auto454BAA4C_ai ) {
        lv_phalanx = 1;
        for ( ; ( (auto64CF2C5E_ai >= 0 && lv_phalanx <= auto64CF2C5E_ae) || (auto64CF2C5E_ai < 0 && lv_phalanx >= auto64CF2C5E_ae) ) ; lv_phalanx += auto64CF2C5E_ai ) {
            UnitRemove(gv_previewer[gv_playerAtBuildingRegion[lv_buildingRegion]][lv_phalanx]);
        }
    }
}

void gf_PreviewerAtBuildingRegionPositionAll () {
    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    string lv_unitType;

    // Automatic Variable Declarations
    const int autoAF0FA302_ae = gv_playerCount;
    const int autoAF0FA302_ai = 1;
    const int autoAE1731CD_ae = gv_phalanxMaximumCount;
    const int autoAE1731CD_ai = 1;

    // Variable Initialization

    // Implementation
    lv_buildingRegion = 1;
    for ( ; ( (autoAF0FA302_ai >= 0 && lv_buildingRegion <= autoAF0FA302_ae) || (autoAF0FA302_ai < 0 && lv_buildingRegion >= autoAF0FA302_ae) ) ; lv_buildingRegion += autoAF0FA302_ai ) {
        lv_phalanx = 1;
        for ( ; ( (autoAE1731CD_ai >= 0 && lv_phalanx <= autoAE1731CD_ae) || (autoAE1731CD_ai < 0 && lv_phalanx >= autoAE1731CD_ae) ) ; lv_phalanx += autoAE1731CD_ai ) {
            lv_unitType = gf_RaceGetPreviewerPhalanxType(PlayerRace(gv_playerAtBuildingRegion[lv_buildingRegion]));
            libNtve_gf_CreateUnitsAtPoint2(1, lv_unitType, c_unitCreateIgnorePlacement, gv_playerAtBuildingRegion[lv_buildingRegion], RegionGetCenter(gv_previewRegion[lv_buildingRegion][lv_phalanx]));
            UnitSetFacing(UnitLastCreated(), 90.0, 0.0);
            UnitSetCustomValue(UnitLastCreated(), gv_customValuePhalanx, lv_phalanx);
            gv_previewer[gv_playerAtBuildingRegion[lv_buildingRegion]][lv_phalanx] = UnitLastCreated();
            gf_PhalanxBuffSet(UnitLastCreated(), true);
        }
    }
}

void gf_PreviewEnable (bool lp_option) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_option == true)) {
        gf_PreviewerAtBuildingRegionPositionAll();
    }
    else {
        Wait(gv_minimumPeriod, c_timeGame);
        gf_PreviewerRemoveAll();
    }
    TriggerEnable(gt_BuildingCreated, lp_option);
    TriggerEnable(gt_UnitAbilityMorph, lp_option);
}

void gf_PreviewModelCreate (int lp_player, point lp_point, string lp_unitType, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateModelAtPoint(((lp_unitType)), lp_point);
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing((UnitGetFacing(lp_unit)+90)));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false))));
}

int gf_PointGetPlayerAtBuidingRegion (point lp_point) {
    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    int lv_player;

    // Automatic Variable Declarations
    const int autoA4F24C92_ae = gv_playerCount;
    const int autoA4F24C92_ai = 1;
    const int auto5144E3D8_ae = gv_phalanxMaximumCount;
    const int auto5144E3D8_ai = 1;

    // Variable Initialization

    // Implementation
    lv_buildingRegion = 1;
    for ( ; ( (autoA4F24C92_ai >= 0 && lv_buildingRegion <= autoA4F24C92_ae) || (autoA4F24C92_ai < 0 && lv_buildingRegion >= autoA4F24C92_ae) ) ; lv_buildingRegion += autoA4F24C92_ai ) {
        lv_phalanx = 1;
        for ( ; ( (auto5144E3D8_ai >= 0 && lv_phalanx <= auto5144E3D8_ae) || (auto5144E3D8_ai < 0 && lv_phalanx >= auto5144E3D8_ae) ) ; lv_phalanx += auto5144E3D8_ai ) {
            if ((RegionContainsPoint(gv_buildingRegion[lv_buildingRegion][lv_phalanx], lp_point) == true)) {
                lv_player = gv_playerAtBuildingRegion[lv_buildingRegion];
            }

        }
    }
    return lv_player;
}

bool gf_BehaviorIsPhalanxBuff (string lp_behavior) {
    // Variable Declarations
    int lv_index;
    bool lv_isPhalanxBuff;

    // Automatic Variable Declarations
    int autoC7FA6491_ae;
    const int autoC7FA6491_ai = 1;

    // Variable Initialization

    // Implementation
    autoC7FA6491_ae = UserDataInstanceCount(gv_phalanxBuffUserType);
    lv_index = 1;
    for ( ; ( (autoC7FA6491_ai >= 0 && lv_index <= autoC7FA6491_ae) || (autoC7FA6491_ai < 0 && lv_index >= autoC7FA6491_ae) ) ; lv_index += autoC7FA6491_ai ) {
        if (((lp_behavior) == (UserDataInstance(gv_phalanxBuffUserType, lv_index)))) {
            lv_isPhalanxBuff = true;
            break;
        }

    }
    return lv_isPhalanxBuff;
}

void gf_PhalanxCounterEnable (bool lp_reset, bool lp_option) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int auto8EC4F393_ae = gv_playerCount;
    const int auto8EC4F393_ai = 1;
    const int autoF5612ACA_ae = gv_playerCount;
    const int autoF5612ACA_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_option == true)) {
    }
    else {
        Wait(gv_minimumPeriod, c_timeGame);
    }
    if ((lp_reset == true)) {
        lv_player = 1;
        for ( ; ( (autoF5612ACA_ai >= 0 && lv_player <= autoF5612ACA_ae) || (autoF5612ACA_ai < 0 && lv_player >= autoF5612ACA_ae) ) ; lv_player += autoF5612ACA_ai ) {
            gv_phalanxIndex[lv_player] = 0;
        }
    }
    else {
        lv_player = 1;
        for ( ; ( (auto8EC4F393_ai >= 0 && lv_player <= auto8EC4F393_ae) || (auto8EC4F393_ai < 0 && lv_player >= auto8EC4F393_ae) ) ; lv_player += auto8EC4F393_ai ) {
            gf_SetPhalanxHighlighted(lv_player, false);
        }
    }
    TriggerEnable(gt_PhalanxCreated, lp_option);
    TriggerEnable(gt_PortalCreated, lp_option);
}

void gf_PhalanxBuffSet (unit lp_unit, bool lp_preview) {
    // Variable Declarations
    int lv_phalanx;
    int lv_player;
    string lv_behavior;
    string lv_ability;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_phalanx = FixedToInt(UnitGetCustomValue(lp_unit, gv_customValuePhalanx));
    lv_player = UnitGetOwner(lp_unit);

    // Implementation
    lv_behavior = gv_phalanxBuff[lv_player][lv_phalanx];
    if ((lp_preview == false)) {
        while ((lv_behavior == null)) {
            lv_behavior = ((UserDataInstance(gv_phalanxBuffUserType, RandomInt(1, UserDataInstanceCount(gv_phalanxBuffUserType)))));
        }
    }

    lv_ability = UserDataGetGameLink(gv_phalanxBuffUserType, ((lv_behavior)), "Ability", 1);
    UnitIssueOrder(lp_unit, Order(AbilityCommand(lv_ability, 0)), c_orderQueueReplace);
}

void gf_UnitPositionAll () {
    // Variable Declarations
    unit lv_unit;
    int lv_venue;
    int lv_phalanx;

    // Automatic Variable Declarations
    const int autoC090791F_ae = gv_venueMaximumCount;
    const int autoC090791F_ai = 1;
    unitgroup autoEC373B36_g;
    int autoEC373B36_u;

    // Variable Initialization

    // Implementation
    lv_venue = 1;
    for ( ; ( (autoC090791F_ai >= 0 && lv_venue <= autoC090791F_ae) || (autoC090791F_ai < 0 && lv_venue >= autoC090791F_ae) ) ; lv_venue += autoC090791F_ai ) {
        if ((gv_venue[lv_venue] != null)) {
            autoEC373B36_g = UnitGroup(null, c_playerAny, gv_venue[lv_venue], gv_phalanxFilter, 0);
            autoEC373B36_u = UnitGroupCount(autoEC373B36_g, c_unitCountAll);
            for (;; autoEC373B36_u -= 1) {
                lv_unit = UnitGroupUnitFromEnd(autoEC373B36_g, autoEC373B36_u);
                if (lv_unit == null) { break; }
                lv_phalanx = FixedToInt(UnitGetCustomValue(lv_unit, gv_customValuePhalanx));
                gf_UnitOrPreviewModelPosition(lv_unit, false);
            }
        }

    }
}

void gf_UnitOrPreviewModelPosition (unit lp_unit, bool lp_preview) {
    // Variable Declarations
    int lv_player;
    string lv_unitTypeID;
    point lv_position;
    int lv_phalanx;
    int lv_column;
    int lv_columnCount;
    fixed lv_columOffset;
    int lv_row;
    int lv_rowCount;
    fixed lv_rowOffset;
    point lv_pointInitial;
    point lv_pointColumn;
    point lv_pointRow;
    int lv_unitIndex;
    string lv_unitType;
    int lv_itemIndex;
    string lv_itemType;
    int lv_lastColumn;
    int lv_lastRow;
    fixed lv_lastRowOffset;

    // Automatic Variable Declarations
    int auto74174689_ae;
    const int auto74174689_ai = 1;
    int auto92AF0421_ae;
    const int auto92AF0421_ai = 1;
    const int autoD8519147_ae = gv_itemMaximumCountPerUnit;
    const int autoD8519147_ai = 1;

    // Variable Initialization
    lv_player = UnitGetOwner(lp_unit);
    lv_unitTypeID = (UnitGetType(lp_unit));
    lv_position = UnitGetPosition(lp_unit);
    lv_phalanx = FixedToInt(UnitGetCustomValue(lp_unit, gv_customValuePhalanx));

    // Implementation
    if ((((PointGetFacing(lv_position) >= -1.0) && (PointGetFacing(lv_position) <= 1)) || ((PointGetFacing(lv_position) >= 179.0) && (PointGetFacing(lv_position) <= 181)))) {
        lv_columnCount = UserDataGetInt(gv_phalanxUserType, (lv_unitTypeID), "Column", 1);
        lv_rowCount = UserDataGetInt(gv_phalanxUserType, (lv_unitTypeID), "Row", 1);
    }
    else if ((((PointGetFacing(lv_position) >= 89.0) && (PointGetFacing(lv_position) <= 91)) || ((PointGetFacing(lv_position) >= 269.0) && (PointGetFacing(lv_position) <= 271)) || ((PointGetFacing(lv_position) >= -91.0) && (PointGetFacing(lv_position) <= -89)))) {
        lv_columnCount = UserDataGetInt(gv_phalanxUserType, (lv_unitTypeID), "Row", 1);
        lv_rowCount = UserDataGetInt(gv_phalanxUserType, (lv_unitTypeID), "Column", 1);
    }
    if ((ModI(lv_columnCount, 2) == 1)) {
        lv_columOffset = 0.0;
    }
    else {
        lv_columOffset = 0.5;
    }
    if ((ModI(lv_rowCount, 2) == 1)) {
        lv_rowOffset = 0.0;
    }
    else {
        lv_rowOffset = 0.5;
    }
    lv_lastColumn = FloorI((gv_unitIndexCount[lv_player][lv_phalanx]/lv_rowCount));
    lv_pointInitial = PointWithOffsetPolar(PointWithOffsetPolar(lv_position, (lv_columnCount/2-lv_columOffset), PointGetFacing(lv_position)), (lv_rowCount/2-lv_rowOffset), (UnitGetFacing(lp_unit)+90));
    lv_unitIndex = 0;
    auto74174689_ae = lv_columnCount;
    lv_column = 1;
    for ( ; ( (auto74174689_ai >= 0 && lv_column <= auto74174689_ae) || (auto74174689_ai < 0 && lv_column >= auto74174689_ae) ) ; lv_column += auto74174689_ai ) {
        lv_pointColumn = PointWithOffsetPolar(lv_pointInitial, (lv_column-1), (UnitGetFacing(lp_unit)+180));
        auto92AF0421_ae = lv_rowCount;
        lv_row = 1;
        for ( ; ( (auto92AF0421_ai >= 0 && lv_row <= auto92AF0421_ae) || (auto92AF0421_ai < 0 && lv_row >= auto92AF0421_ae) ) ; lv_row += auto92AF0421_ai ) {
            lv_unitIndex += 1;
            lv_lastRow = ModI(gv_unitIndexCount[lv_player][lv_phalanx], 6);
            if ((lv_lastRow != 0) && (lv_column == (lv_lastColumn+1))) {
                lv_lastRowOffset = ((lv_rowCount-lv_lastRow)*0.5);
            }
            else {
                lv_lastRowOffset = 0.0;
            }
            lv_pointRow = PointWithOffsetPolar(lv_pointColumn, (lv_row-1+lv_lastRowOffset), (UnitGetFacing(lp_unit)-90));
            lv_unitType = gv_unitType[lv_player][lv_phalanx][lv_unitIndex];
            if ((lv_unitType != null)) {
                if ((lp_preview == true)) {
                    gf_PreviewModelCreate(lv_player, lv_pointRow, lv_unitType, lp_unit);
                    gv_previewModel[lv_player][lv_phalanx][lv_unitIndex] = libNtve_gf_ActorLastCreated();
                }
                else {
                    gf_UnitCreate(lv_player, lv_pointRow, lv_unitType, lp_unit);
                    UnitBehaviorAddPlayer(UnitLastCreated(), "Preparing", UnitGetOwner(UnitLastCreated()), 1);
                    lv_itemIndex = 1;
                    for ( ; ( (autoD8519147_ai >= 0 && lv_itemIndex <= autoD8519147_ae) || (autoD8519147_ai < 0 && lv_itemIndex >= autoD8519147_ae) ) ; lv_itemIndex += autoD8519147_ai ) {
                        lv_itemType = gv_itemType[lv_player][lv_phalanx][lv_unitIndex][lv_itemIndex];
                        if ((lv_itemType != null)) {
                            UnitInventoryCreate(UnitLastCreated(), lv_itemType);
                        }

                    }
                }
            }

        }
    }
}

void gf_CreepPosition (int lp_round) {
    // Variable Declarations
    int lv_venue;

    // Automatic Variable Declarations
    const int auto8BD43A04_ae = gv_venueMaximumCount;
    const int auto8BD43A04_ai = 1;

    // Variable Initialization

    // Implementation
    lv_venue = 1;
    for ( ; ( (auto8BD43A04_ai >= 0 && lv_venue <= auto8BD43A04_ae) || (auto8BD43A04_ai < 0 && lv_venue >= auto8BD43A04_ae) ) ; lv_venue += auto8BD43A04_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, gv_creepUnitType[lv_venue][lp_round], 0, 15, gv_creepPoint[lv_venue]);
        UnitSetFacing(UnitLastCreated(), PointGetFacing(gv_creepPoint[lv_venue]), 0.0);
    }
}

void gf_UnitCreate (int lp_player, point lp_point, string lp_unitType, unit lp_unit) {
    // Variable Declarations
    int lv_index;
    string lv_behavior;

    // Automatic Variable Declarations
    int auto80647215_ae;
    const int auto80647215_ai = 1;

    // Variable Initialization

    // Implementation
    UnitCreate(1, lp_unitType, 0, lp_player, lp_point, UnitGetFacing(lp_unit));
    UnitSetFacing(UnitLastCreated(), UnitGetFacing(lp_unit), 0.0);
    UnitSetCustomValue(UnitLastCreated(), gv_customValuePhalanx, UnitGetCustomValue(lp_unit, gv_customValuePhalanx));
    UnitBehaviorAdd(UnitLastCreated(), "PhalanxMarker", lp_unit, 1);
    auto80647215_ae = UnitBehaviorCountAll(lp_unit);
    lv_index = 1;
    for ( ; ( (auto80647215_ai >= 0 && lv_index <= auto80647215_ae) || (auto80647215_ai < 0 && lv_index >= auto80647215_ae) ) ; lv_index += auto80647215_ai ) {
        lv_behavior = UnitBehaviorGet(lp_unit, lv_index);
        if (((lv_behavior) == (((lv_behavior))))) {
            UnitBehaviorAdd(UnitLastCreated(), UserDataGetGameLink(gv_phalanxBuffUserType, ((lv_behavior)), "Behavior", 1), UnitLastCreated(), 1);
        }

    }
}

void gf_AIPhalanxAndPortalPositionAll (int lp_round) {
    // Variable Declarations
    int lv_venue;
    string lv_unitType;

    // Automatic Variable Declarations
    const int autoCBF1EC2D_ae = gv_venueMaximumCount;
    const int autoCBF1EC2D_ai = 1;

    // Variable Initialization

    // Implementation
    lv_venue = 1;
    for ( ; ( (autoCBF1EC2D_ai >= 0 && lv_venue <= autoCBF1EC2D_ae) || (autoCBF1EC2D_ai < 0 && lv_venue >= autoCBF1EC2D_ae) ) ; lv_venue += autoCBF1EC2D_ai ) {
        if ((gv_playerAtVenue[lv_venue][lp_round] != -1)) {
            lv_unitType = gf_RaceGetPhalanxType(PlayerRace(gv_playerAtVenue[lv_venue][lp_round]));
            gf_AIPhalanxAndPortalPosition(gv_playerAtVenue[lv_venue][lp_round], gv_venue[lv_venue], lv_unitType, gv_phalanxUserType, gv_phalanxFilter, gv_phalanxMaximumCount);
        }

    }
}

void gf_AIPhalanxBuffSetAll (int lp_round) {
    // Variable Declarations
    int lv_venue;
    int lv_phalanx;

    // Automatic Variable Declarations
    const int autoF8A0266F_ae = gv_venueMaximumCount;
    const int autoF8A0266F_ai = 1;
    const int autoC7B8FFD9_ae = gv_phalanxMaximumCount;
    const int autoC7B8FFD9_ai = 1;

    // Variable Initialization

    // Implementation
    lv_venue = 1;
    for ( ; ( (autoF8A0266F_ai >= 0 && lv_venue <= autoF8A0266F_ae) || (autoF8A0266F_ai < 0 && lv_venue >= autoF8A0266F_ae) ) ; lv_venue += autoF8A0266F_ai ) {
        if ((gv_playerAtVenue[lv_venue][lp_round] != -1)) {
            lv_phalanx = 1;
            for ( ; ( (autoC7B8FFD9_ai >= 0 && lv_phalanx <= autoC7B8FFD9_ae) || (autoC7B8FFD9_ai < 0 && lv_phalanx >= autoC7B8FFD9_ae) ) ; lv_phalanx += autoC7B8FFD9_ai ) {
                gf_PhalanxBuffSet(gv_phalanx[gv_playerAtVenue[lv_venue][lp_round]][lv_phalanx], false);
            }
        }

    }
}

void gf_AIPhalanxAndPortalPosition (int lp_player, region lp_region, string lp_unitType, string lp_userType, unitfilter lp_unitFilter, int lp_count) {
    // Variable Declarations
    string lv_unitTypeID;
    int lv_columnCount;
    int lv_rowCount;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitTypeID = "";

    // Implementation
    lv_unitTypeID = (lp_unitType);
    lv_columnCount = UserDataGetInt(lp_userType, (lv_unitTypeID), "Column", 1);
    lv_rowCount = UserDataGetInt(lp_userType, (lv_unitTypeID), "Row", 1);
    while ((UnitGroupCount(UnitGroup(null, lp_player, lp_region, lp_unitFilter, 0), c_unitCountAlive) < lp_count)) {
        lv_point = RegionRandomPoint(lp_region);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unitType, 0, lp_player, lv_point);
        if ((UnitGetType(UnitLastCreated()) != null) && (gf_RegionContainsPointWithOffset(UnitGetPosition(UnitLastCreated()), lp_region, lv_columnCount, lv_rowCount) == true)) {
        }
        else {
            UnitRemove(UnitLastCreated());
        }
    }
}

void gf_AIBuildingPosition () {
    // Variable Declarations
    int lv_buildingRegion;
    unit lv_worker;
    unit lv_unit;
    string lv_buildAbility;
    abilcmd lv_abilityCommand;
    point lv_point;
    order lv_order;
    int lv_phalanx;
    int lv_index;
    string lv_ability;

    // Automatic Variable Declarations
    const int autoF426337D_ae = gv_playerCount;
    const int autoF426337D_ai = 1;
    const int auto4C34403C_ae = gv_phalanxMaximumCount;
    const int auto4C34403C_ai = 1;
    unitgroup autoF46D82D3_g;
    int autoF46D82D3_u;
    int auto7E789698_ae;
    const int auto7E789698_ai = 1;
    unitgroup auto691E3691_g;
    int auto691E3691_u;

    // Variable Initialization

    // Implementation
    lv_buildingRegion = 1;
    for ( ; ( (autoF426337D_ai >= 0 && lv_buildingRegion <= autoF426337D_ae) || (autoF426337D_ai < 0 && lv_buildingRegion >= autoF426337D_ae) ) ; lv_buildingRegion += autoF426337D_ai ) {
        if ((PlayerGroupHasPlayer(gv_aIGroup, gv_playerAtBuildingRegion[lv_buildingRegion]) == true)) {
            lv_phalanx = 1;
            for ( ; ( (auto4C34403C_ai >= 0 && lv_phalanx <= auto4C34403C_ae) || (auto4C34403C_ai < 0 && lv_phalanx >= auto4C34403C_ae) ) ; lv_phalanx += auto4C34403C_ai ) {
                autoF46D82D3_g = UnitGroup(null, gv_playerAtBuildingRegion[lv_buildingRegion], gv_buildingRegion[lv_buildingRegion][lv_phalanx], gv_buildingFilter, 0);
                autoF46D82D3_u = UnitGroupCount(autoF46D82D3_g, c_unitCountAll);
                for (;; autoF46D82D3_u -= 1) {
                    lv_unit = UnitGroupUnitFromEnd(autoF46D82D3_g, autoF46D82D3_u);
                    if (lv_unit == null) { break; }
                    auto7E789698_ae = UnitAbilityCount(lv_unit);
                    lv_index = 1;
                    for ( ; ( (auto7E789698_ai >= 0 && lv_index <= auto7E789698_ae) || (auto7E789698_ai < 0 && lv_index >= auto7E789698_ae) ) ; lv_index += auto7E789698_ai ) {
                        lv_ability = UnitAbilityGet(lv_unit, lv_index);
                        if ((AbilityClass(lv_ability) == c_classIdCAbilMorph)) {
                            UnitIssueOrder(lv_unit, Order(AbilityCommand(lv_ability, 0)), c_orderQueueReplace);
                        }

                    }
                }
            }
            auto691E3691_g = UnitGroup(null, gv_playerAtBuildingRegion[lv_buildingRegion], null, gv_workerFilter, 0);
            auto691E3691_u = UnitGroupCount(auto691E3691_g, c_unitCountAll);
            for (;; auto691E3691_u -= 1) {
                lv_worker = UnitGroupUnitFromEnd(auto691E3691_g, auto691E3691_u);
                if (lv_worker == null) { break; }
                lv_buildAbility = gf_WorkerTypeGetAbility(UnitGetType(lv_worker));
                while ((PlayerGetPropertyInt(gv_playerAtBuildingRegion[lv_buildingRegion], c_playerPropTerrazine) >= 15)) {
                    lv_abilityCommand = AbilityCommand(lv_buildAbility, RandomInt(0, 29));
                    lv_point = RegionRandomPoint(gv_buildingRegion[lv_buildingRegion][RandomInt(1, gv_phalanxMaximumCount)]);
                    lv_order = OrderTargetingPoint(lv_abilityCommand, lv_point);
                    UnitIssueOrder(lv_worker, lv_order, c_orderQueueReplace);
                }
            }
        }

    }
}

void gf_TimerSet (fixed lp_duration, bool lp_debug) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_debug == true)) {
        TriggerWaitForTrigger(gt_DebugControlPressed, false);
    }
    else {
        TimerStart(gv_timer, lp_duration, false, c_timeGame);
        TimerWindowShow(gv_timerWindow, gv_uIPlayergroup, true);
        libNtve_gf_WaitForTimer(gv_timer, 0.0, false);
        TimerWindowShow(gv_timerWindow, gv_uIPlayergroup, false);
    }
    Wait(gv_minimumPeriod, c_timeGame);
}

void gf_ReserveUnitIndexResetAll () {
    // Variable Declarations
    int lv_player;
    int lv_phalanx;

    // Automatic Variable Declarations
    const int autoED8B27DD_ae = gv_playerCount;
    const int autoED8B27DD_ai = 1;
    const int auto84C8BA07_ae = gv_phalanxMaximumCount;
    const int auto84C8BA07_ai = 1;

    // Variable Initialization

    // Implementation
    lv_player = 1;
    for ( ; ( (autoED8B27DD_ai >= 0 && lv_player <= autoED8B27DD_ae) || (autoED8B27DD_ai < 0 && lv_player >= autoED8B27DD_ae) ) ; lv_player += autoED8B27DD_ai ) {
        lv_phalanx = 1;
        for ( ; ( (auto84C8BA07_ai >= 0 && lv_phalanx <= auto84C8BA07_ae) || (auto84C8BA07_ai < 0 && lv_phalanx >= auto84C8BA07_ae) ) ; lv_phalanx += auto84C8BA07_ai ) {
            gv_reserveUnitIndex[lv_player][lv_phalanx] = 0;
        }
    }
}

void gf_ReserveUnitCreationEnable (bool lp_option) {
    // Variable Declarations
    int lv_player;
    fixed lv_time;

    // Automatic Variable Declarations
    const int auto49511634_ae = gv_playerCount;
    const int auto49511634_ai = 1;
    const int auto3D093143_ae = gv_playerCount;
    const int auto3D093143_ai = 1;

    // Variable Initialization
    lv_time = 5.0;

    // Implementation
    lv_player = 1;
    for ( ; ( (auto49511634_ai >= 0 && lv_player <= auto49511634_ae) || (auto49511634_ai < 0 && lv_player >= auto49511634_ae) ) ; lv_player += auto49511634_ai ) {
        if ((lp_option == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "CountUnit", 1);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BuildArmy", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BuildArmyFinal", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BuildPhalanx", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BuildPhalanxFinal", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BuildPortal", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "CountUnit", 0);
        }
    }
    TriggerEnable(gt_CreateReserveUnit, lp_option);
    TriggerEnable(gt_UnitDied, lp_option);
    TriggerEnable(gt_TideAddRemoveSwimmingPeriodic, lp_option);
    TriggerEnable(gt_AutoCastAlwaysOnEnable, lp_option);
    if ((lp_option == true)) {
        lv_player = 1;
        for ( ; ( (auto3D093143_ai >= 0 && lv_player <= auto3D093143_ae) || (auto3D093143_ai < 0 && lv_player >= auto3D093143_ae) ) ; lv_player += auto3D093143_ai ) {
            SoundPlayForPlayer(SoundLink(gf_RaceGetWarcry(PlayerRace(lv_player)), c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
            SoundPlayForPlayer(SoundLink(gf_RaceGetHorn(PlayerRace(lv_player)), c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
            SoundPlayForPlayer(SoundLink("HornOfCenariusSound", c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
        }
        Wait(8.0, c_timeGame);
        Wait(gv_minimumPeriod, c_timeGame);
        gf_IssueOrderAll(false);
        if ((gf_IsFinalRound(gv_round) == true)) {
            lv_time = 7.5;
        }
        else {
            lv_time = 4.5;
        }
        Wait(lv_time, c_timeGame);
    }

    TriggerEnable(gt_IssueOrderPeriodic, lp_option);
}

void gf_ReserveUnitCreation (unit lp_unit, int lp_player, int lp_phalanx) {
    // Variable Declarations
    string lv_unitType;
    int lv_unitIndex;
    string lv_itemType;
    int lv_itemIndex;

    // Automatic Variable Declarations
    const int autoF86C1014_ae = gv_itemMaximumCountPerUnit;
    const int autoF86C1014_ai = 1;

    // Variable Initialization

    // Implementation
    lv_unitIndex = (gf_UnitTypeGetPhalanxCapacity(UnitGetType(lp_unit))+gv_reserveUnitIndex[lp_player][lp_phalanx]+1);
    if ((lv_unitIndex < gv_unitMaximumCountPerPhalanx)) {
        gv_reserveUnitIndex[lp_player][lp_phalanx] += 1;
        lv_unitType = gv_unitType[lp_player][lp_phalanx][lv_unitIndex];
        if ((lv_unitType != null)) {
            gf_UnitCreate(lp_player, UnitGetPosition(lp_unit), lv_unitType, lp_unit);
            lv_itemIndex = 1;
            for ( ; ( (autoF86C1014_ai >= 0 && lv_itemIndex <= autoF86C1014_ae) || (autoF86C1014_ai < 0 && lv_itemIndex >= autoF86C1014_ae) ) ; lv_itemIndex += autoF86C1014_ai ) {
                lv_itemType = gv_itemType[lp_player][lp_phalanx][lv_unitIndex][lv_itemIndex];
                if ((lv_itemType != null)) {
                    UnitInventoryCreate(UnitLastCreated(), lv_itemType);
                }

            }
        }

    }

}

void gf_SearchRadiusInFinalRoundSet (fixed lp_radius) {
    // Automatic Variable Declarations
    // Implementation
    gv_searchRadiusInFinalRound = lp_radius;
}

void gf_SearchRadiusSet (fixed lp_radius) {
    // Automatic Variable Declarations
    // Implementation
    gv_searchRadius = lp_radius;
}

void gf_IssueOrderAll (bool lp_periodic) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int auto11099330_ae = gv_playerCount;
    const int auto11099330_ai = 1;

    // Variable Initialization

    // Implementation
    lv_player = 1;
    for ( ; ( (auto11099330_ai >= 0 && lv_player <= auto11099330_ae) || (auto11099330_ai < 0 && lv_player >= auto11099330_ae) ) ; lv_player += auto11099330_ai ) {
        gf_IssueOrder(lp_periodic, lv_player);
    }
}

void gf_IssueOrder (bool lp_periodic, int lp_player) {
    // Variable Declarations
    unit lv_unit;
    unit lv_targetUnit;
    unitgroup lv_targetUnitgroup;
    point lv_targetPoint;
    fixed lv_range;
    fixed lv_radius;
    region lv_region;
    fixed lv_distance;

    // Automatic Variable Declarations
    unitgroup auto3B0E0404_g;
    int auto3B0E0404_u;

    // Variable Initialization
    lv_targetUnitgroup = UnitGroupEmpty();
    lv_distance = 18.0;

    // Implementation
    auto3B0E0404_g = UnitGroup(null, lp_player, gv_battlefield, gv_unitFilter, 0);
    auto3B0E0404_u = UnitGroupCount(auto3B0E0404_g, c_unitCountAll);
    for (;; auto3B0E0404_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto3B0E0404_g, auto3B0E0404_u);
        if (lv_unit == null) { break; }
        if ((UnitFilterMatch(lv_unit, UnitGetOwner(lv_unit), UnitFilter(0, 0, (1 << c_targetFilterCloaked), 0)) == true)) {
            lv_targetUnit = null;
            lv_targetPoint = null;
            UnitGroupClear(lv_targetUnitgroup);
            if ((lp_periodic == true)) {
                lv_region = gv_battlefield;
                lv_targetUnitgroup = UnitGroupAlliance(UnitGetOwner(lv_unit), c_unitAllianceEnemy, lv_region, gv_unitAndCreepFilter, 0);
                while ((UnitGroupCount(lv_targetUnitgroup, c_unitCountAlive) > 0)) {
                    lv_targetUnit = UnitGroupClosestToPoint(lv_targetUnitgroup, UnitGetPosition(lv_unit));
                    if ((UnitCanAttackTarget(lv_unit, lv_targetUnit) == true) && (UnitFilterMatch(lv_targetUnit, UnitGetOwner(lv_targetUnit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterPassive - 32)))) == true)) {
                        lv_targetPoint = UnitGetPosition(lv_targetUnit);
                        break;
                    }
                    else {
                        UnitGroupRemove(lv_targetUnitgroup, lv_targetUnit);
                    }
                }
                if ((lv_targetPoint != null)) {
                    UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("Amov", 3), lv_targetPoint), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(lv_unit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                }
            }
            else {
                if ((gf_IsFinalRound(gv_round) == true)) {
                    lv_distance = 30.0;
                }
                else {
                    lv_distance = 18.0;
                }
                UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("Amov", 3), PointWithOffsetPolar(UnitGetPosition(lv_unit), lv_distance, UnitGetFacing(lv_unit))), c_orderQueueReplace);
            }
        }

    }
}

unit gf_UnitGroupClosestPathingCostToPoint (point lp_point, unitgroup lp_unitGroup) {
    // Variable Declarations
    unit lv_unit;
    unit lv_targetUnit;
    int lv_pathingCost;
    int lv_closestPathingCost;

    // Automatic Variable Declarations
    unitgroup autoD2C07157_g;
    int autoD2C07157_u;

    // Variable Initialization

    // Implementation
    autoD2C07157_g = lp_unitGroup;
    autoD2C07157_u = UnitGroupCount(autoD2C07157_g, c_unitCountAll);
    for (;; autoD2C07157_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoD2C07157_g, autoD2C07157_u);
        if (lv_unit == null) { break; }
        lv_pathingCost = PointPathingCost(lp_point, UnitGetPosition(lv_unit));
        if (((lv_pathingCost < lv_closestPathingCost) || (lv_closestPathingCost == 0))) {
            lv_targetUnit = lv_unit;
            lv_closestPathingCost = PointPathingCost(lp_point, UnitGetPosition(lv_unit));
        }

    }
    return lv_targetUnit;
}

bool gf_PlayerIsAlive (int lp_player, int lp_round) {
    // Variable Declarations
    int lv_team;
    bool lv_playerIsAlive;

    // Automatic Variable Declarations
    int auto42FA3705_ae;
    const int auto42FA3705_ai = 1;

    // Variable Initialization

    // Implementation
    auto42FA3705_ae = gv_teamCount;
    lv_team = 1;
    for ( ; ( (auto42FA3705_ai >= 0 && lv_team <= auto42FA3705_ae) || (auto42FA3705_ai < 0 && lv_team >= auto42FA3705_ae) ) ; lv_team += auto42FA3705_ai ) {
        if ((PlayerGroupHasPlayer(gv_teamGroup[gv_teamAlive[lv_team]], lp_player) == true)) {
            lv_playerIsAlive = true;
            break;
        }

    }
    return lv_playerIsAlive;
}

void gf_CountUnitEnable (bool lp_option) {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(gt_CountUnit, lp_option);
}

void gf_CountUnit (int lp_team, bool lp_wait) {
    // Variable Declarations
    int lv_team;
    int lv_teamMember;
    int lv_player;
    unit lv_unit;
    string lv_effect;
    int lv_itemIndex;
    string lv_itemType;

    // Automatic Variable Declarations
    int auto3249AEFC_ae;
    const int auto3249AEFC_ai = 1;
    unitgroup autoAEB5A592_g;
    int autoAEB5A592_u;
    unitgroup auto3AEA129A_g;
    int auto3AEA129A_u;
    unit auto3AEA129A_var;
    const int auto94B120CD_ae = gv_itemMaximumCountPerUnit;
    const int auto94B120CD_ai = 1;

    // Variable Initialization
    lv_effect = "CountUnitRemove";

    // Implementation
    auto3249AEFC_ae = gv_teamMemberCount;
    lv_teamMember = 1;
    for ( ; ( (auto3249AEFC_ai >= 0 && lv_teamMember <= auto3249AEFC_ae) || (auto3249AEFC_ai < 0 && lv_teamMember >= auto3249AEFC_ae) ) ; lv_teamMember += auto3249AEFC_ai ) {
        lv_player = PlayerGroupPlayer(gv_teamGroup[lp_team], lv_teamMember);
        while ((UnitGroupCount(UnitGroup(null, lv_player, gv_battlefield, gv_unitFilter, 0), c_unitCountAlive) > 0)) {
            autoAEB5A592_g = UnitGroup(null, lv_player, gv_battlefield, gv_unitFilter, 0);
            autoAEB5A592_u = UnitGroupCount(autoAEB5A592_g, c_unitCountAll);
            for (;; autoAEB5A592_u -= 1) {
                lv_unit = UnitGroupUnitFromEnd(autoAEB5A592_g, autoAEB5A592_u);
                if (lv_unit == null) { break; }
                auto3AEA129A_g = UnitCargoGroup(lv_unit);
                auto3AEA129A_u = UnitGroupCount(auto3AEA129A_g, c_unitCountAll);
                for (;; auto3AEA129A_u -= 1) {
                    auto3AEA129A_var = UnitGroupUnitFromEnd(auto3AEA129A_g, auto3AEA129A_u);
                    if (auto3AEA129A_var == null) { break; }
                    PlayerModifyPropertyInt(lv_player, c_playerPropCustom, c_playerPropOperAdd, gf_UnitTypeGetKillResource(UnitGetType(auto3AEA129A_var)));
                    PlayerCreateEffectUnit(lv_player, lv_effect, auto3AEA129A_var);
                }
                PlayerModifyPropertyInt(lv_player, c_playerPropCustom, c_playerPropOperAdd, gf_UnitTypeGetKillResource(UnitGetType(lv_unit)));
                lv_itemIndex = 1;
                for ( ; ( (auto94B120CD_ai >= 0 && lv_itemIndex <= auto94B120CD_ae) || (auto94B120CD_ai < 0 && lv_itemIndex >= auto94B120CD_ae) ) ; lv_itemIndex += auto94B120CD_ai ) {
                    lv_itemType = UnitGetType(UnitInventoryItem(lv_unit, lv_itemIndex));
                    if ((lv_itemType != null)) {
                        PlayerModifyPropertyInt(lv_player, c_playerPropCustom, c_playerPropOperAdd, gf_ItemTypeGetCostResource(lv_itemType));
                    }

                }
                PlayerCreateEffectUnit(lv_player, lv_effect, lv_unit);
                if ((lp_wait == true)) {
                    Wait(gv_minimumPeriod, c_timeGame);
                }

            }
        }
    }
}

void gf_GameOver (int lp_team) {
    // Variable Declarations
    int lv_teamMember;
    int lv_team;
    int lv_time;

    // Automatic Variable Declarations
    int auto644888EE_ae;
    const int auto644888EE_ai = 1;
    int auto094F9AB6_ae;
    const int auto094F9AB6_ai = 1;
    int auto2E75D8FD_ae;
    const int auto2E75D8FD_ai = 1;

    // Variable Initialization
    lv_time = 10;

    // Implementation
    TriggerEnable(gt_PlayerLeft, false);
    TextExpressionSetToken("Param/Expression/A093297C", "A", IntToText(lv_time));
    UIDisplayMessage(gv_uIPlayergroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/A093297C"));
    Wait(lv_time, c_timeGame);
    auto644888EE_ae = gv_teamMemberCount;
    lv_teamMember = 1;
    for ( ; ( (auto644888EE_ai >= 0 && lv_teamMember <= auto644888EE_ae) || (auto644888EE_ai < 0 && lv_teamMember >= auto644888EE_ae) ) ; lv_teamMember += auto644888EE_ai ) {
        GameOver(PlayerGroupPlayer(gv_teamGroup[lp_team], lv_teamMember), c_gameOverVictory, true, true);
    }
    auto094F9AB6_ae = gv_teamCount;
    lv_team = 1;
    for ( ; ( (auto094F9AB6_ai >= 0 && lv_team <= auto094F9AB6_ae) || (auto094F9AB6_ai < 0 && lv_team >= auto094F9AB6_ae) ) ; lv_team += auto094F9AB6_ai ) {
        if ((lv_team != lp_team)) {
            auto2E75D8FD_ae = gv_teamMemberCount;
            lv_teamMember = 1;
            for ( ; ( (auto2E75D8FD_ai >= 0 && lv_teamMember <= auto2E75D8FD_ae) || (auto2E75D8FD_ai < 0 && lv_teamMember >= auto2E75D8FD_ae) ) ; lv_teamMember += auto2E75D8FD_ai ) {
                GameOver(PlayerGroupPlayer(gv_teamGroup[lv_team], lv_teamMember), c_gameOverDefeat, true, true);
            }
        }

    }
}

void gf_DisplayMessageAll (int lp_round) {
    // Variable Declarations
    int lv_player;
    text lv_text;

    // Automatic Variable Declarations
    const int auto56BA78A5_ae = gv_playerCount;
    const int auto56BA78A5_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_round == gv_roundCount)) {
        lv_text = StringExternal("Param/Value/317E0CA0");
        gf_AddInfoAtBuildRegion(false);
    }
    else {
        lv_text = StringExternal("Param/Value/F4A0DF83");
    }
    lv_player = 1;
    for ( ; ( (auto56BA78A5_ai >= 0 && lv_player <= auto56BA78A5_ae) || (auto56BA78A5_ai < 0 && lv_player >= auto56BA78A5_ae) ) ; lv_player += auto56BA78A5_ai ) {
        if ((gf_PlayerIsAlive(lv_player, lp_round) == true)) {
            TextExpressionSetToken("Param/Expression/F3F549EF", "A", TextWithColor(PlayerName(lv_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
            TextExpressionSetToken("Param/Expression/F3F549EF", "B", lv_text);
            UIDisplayMessage(gv_uIPlayergroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/F3F549EF"));
            if ((gv_round == gv_roundCount)) {
                TextExpressionSetToken("Param/Expression/DCB1FB3B", "A", StringToText(PlayerHandle(lv_player)));
                UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/DCB1FB3B"));
            }

        }

    }
}

void gf_PlayerAtFinalVenueUpdate (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (gv_venueFinal >= (gv_teamMemberCount*2)) {
        gv_venueFinal = 1;
    }
    else {
        gv_venueFinal = gv_venueFinal + 1;
    }
    gv_playerAtFinalVenue[gv_venueFinal][gv_finalRound] = lp_player;
    if ((gv_venueFinal == (gv_teamMemberCount*2))) {
        gv_finalRound += 1;
    }

}

void gf_StartLocationCameraPan () {
    // Variable Declarations
    int lv_player;
    unit lv_unit;

    // Automatic Variable Declarations
    const int auto1B6851A4_ae = gv_playerCount;
    const int auto1B6851A4_ai = 1;
    unitgroup auto11A230AA_g;
    int auto11A230AA_u;

    // Variable Initialization

    // Implementation
    lv_player = 1;
    for ( ; ( (auto1B6851A4_ai >= 0 && lv_player <= auto1B6851A4_ae) || (auto1B6851A4_ai < 0 && lv_player >= auto1B6851A4_ae) ) ; lv_player += auto1B6851A4_ai ) {
        CameraPan(lv_player, PlayerStartLocation(lv_player), 0.5, -1, 10.0, false);
        UnitGroupSelect(UnitGroupSelected(lv_player), lv_player, false);
        UnitGroupSelect(gf_PlayerGetWorkers(lv_player), lv_player, true);
        auto11A230AA_g = gf_PlayerGetWorkers(lv_player);
        auto11A230AA_u = UnitGroupCount(auto11A230AA_g, c_unitCountAll);
        for (;; auto11A230AA_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto11A230AA_g, auto11A230AA_u);
            if (lv_unit == null) { break; }
            UnitFlashSelection(lv_unit, 5.0);
        }
    }
}

void gf_VenueCameraPan (int lp_round) {
    // Variable Declarations
    int lv_venue;

    // Automatic Variable Declarations
    const int auto4C5A125F_ae = gv_playerCount;
    const int auto4C5A125F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_venue = 1;
    for ( ; ( (auto4C5A125F_ai >= 0 && lv_venue <= auto4C5A125F_ae) || (auto4C5A125F_ai < 0 && lv_venue >= auto4C5A125F_ae) ) ; lv_venue += auto4C5A125F_ai ) {
        if ((gv_playerAtVenue[lv_venue][lp_round] != -1)) {
            CameraPan(gv_playerAtVenue[lv_venue][lp_round], RegionGetCenter(gv_venue[lv_venue]), 0.5, -1, 10.0, false);
            UnitGroupSelect(UnitGroupSelected(gv_playerAtVenue[lv_venue][lp_round]), gv_playerAtVenue[lv_venue][lp_round], false);
            UnitGroupSelect(gf_PlayerGetWorkers(gv_playerAtVenue[lv_venue][lp_round]), gv_playerAtVenue[lv_venue][lp_round], true);
            gf_SetPhalanxHighlighted(gv_playerAtVenue[lv_venue][lp_round], true);
        }

    }
}

void gf_SetPhalanxHighlighted (int lp_player, bool lp_highlighted) {
    // Automatic Variable Declarations
    // Implementation
    UISetButtonHighlighted(PlayerGroupSingle(lp_player), gf_RaceGetBuildPhalanxCommand(PlayerRace(lp_player)), lp_highlighted);
}

void gf_KillScoreUnitAndItemAdd (int lp_player, unit lp_unit) {
    // Variable Declarations
    string lv_itemType;
    int lv_itemIndex;
    fixed lv_modifier;

    // Automatic Variable Declarations
    int autoDD6F864C_val;

    // Variable Initialization

    // Implementation
    gv_killScore[lp_player] += gf_UnitTypeGetKillResource(UnitGetType(lp_unit));
    if ((PlayerGroupHasPlayer(gv_aIGroup, lp_player) == true)) {
        autoDD6F864C_val = PlayerDifficulty(lp_player);
        if (autoDD6F864C_val == 1) {
            lv_modifier = 0.0;
        }
        else if (autoDD6F864C_val == 3) {
            lv_modifier = 0.1;
        }
        else if (autoDD6F864C_val == 5) {
            lv_modifier = 0.2;
        }
        else if (autoDD6F864C_val == 7) {
            lv_modifier = 0.4;
        }
        else if (autoDD6F864C_val == 9) {
            lv_modifier = 2.0;
        }
        else {
            lv_modifier = 0.0;
        }
        gv_killScore[lp_player] += FixedToInt((gf_UnitTypeGetKillResource(UnitGetType(lp_unit))*lv_modifier));
        PlayerModifyPropertyInt(lp_player, c_playerPropCustom, c_playerPropOperAdd, FixedToInt((gf_UnitTypeGetKillResource(UnitGetType(lp_unit))*lv_modifier)));
    }

    gf_KillScoreUpdateAll();
}

void gf_KillResourceItemAdd (int lp_player, unit lp_unit) {
    // Variable Declarations
    string lv_itemType;
    int lv_itemIndex;

    // Automatic Variable Declarations
    const int auto97C7AFFE_ae = gv_itemMaximumCountPerUnit;
    const int auto97C7AFFE_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itemIndex = 1;
    for ( ; ( (auto97C7AFFE_ai >= 0 && lv_itemIndex <= auto97C7AFFE_ae) || (auto97C7AFFE_ai < 0 && lv_itemIndex >= auto97C7AFFE_ae) ) ; lv_itemIndex += auto97C7AFFE_ai ) {
        lv_itemType = UnitGetType(UnitInventoryItem(lp_unit, lv_itemIndex));
        if ((lv_itemType != null)) {
            PlayerModifyPropertyInt(lp_player, c_playerPropCustom, c_playerPropOperAdd, gf_ItemTypeGetCostResource(lv_itemType));
        }

    }
}

void gf_KillScoreAdd (int lp_player, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    gv_killScore[lp_player] += lp_value;
    gf_KillScoreUpdateAll();
}

void gf_KillScoreUpdateAll () {
    // Variable Declarations
    int lv_maximumScore;
    int lv_player;
    int lv_column;
    color lv_color;
    int lv_row;

    // Automatic Variable Declarations
    const int auto01698701_ae = gv_playerCount;
    const int auto01698701_ai = 1;
    const int auto6602D6B9_ae = gv_playerCount;
    const int auto6602D6B9_ai = 1;

    // Variable Initialization
    lv_column = 3;
    lv_color = Color(0,0,0);

    // Implementation
    lv_player = 1;
    for ( ; ( (auto01698701_ai >= 0 && lv_player <= auto01698701_ae) || (auto01698701_ai < 0 && lv_player >= auto01698701_ae) ) ; lv_player += auto01698701_ai ) {
        if ((gv_killScore[lv_player] >= lv_maximumScore)) {
            lv_maximumScore = gv_killScore[lv_player];
        }

    }
    lv_player = 1;
    for ( ; ( (auto6602D6B9_ai >= 0 && lv_player <= auto6602D6B9_ae) || (auto6602D6B9_ai < 0 && lv_player >= auto6602D6B9_ae) ) ; lv_player += auto6602D6B9_ai ) {
        lv_row = (lv_player+1);
        BoardItemSetText(gv_scoreBoard, lv_column, lv_row, IntToText(gv_killScore[lv_player]));
        BoardItemSetProgressValue(gv_scoreBoard, lv_column, lv_row, gv_killScore[lv_player]);
        BoardItemSetProgressRange(gv_scoreBoard, lv_column, lv_row, 0.0, lv_maximumScore);
    }
}

void gf_KillScoreResetAll () {
    // Variable Declarations
    int lv_maximumScore;
    int lv_player;
    int lv_column;
    color lv_color;
    int lv_row;

    // Automatic Variable Declarations
    const int auto2F12DB8F_ae = gv_playerCount;
    const int auto2F12DB8F_ai = 1;

    // Variable Initialization
    lv_column = 3;
    lv_color = Color(0,0,0);

    // Implementation
    lv_maximumScore = 0;
    lv_player = 1;
    for ( ; ( (auto2F12DB8F_ai >= 0 && lv_player <= auto2F12DB8F_ae) || (auto2F12DB8F_ai < 0 && lv_player >= auto2F12DB8F_ae) ) ; lv_player += auto2F12DB8F_ai ) {
        gv_killScore[lv_player] = 0;
    }
}

void gf_ScoreBoardRowColorUpdate (int lp_round) {
    // Variable Declarations
    int lv_player;
    color lv_color;
    int lv_row;

    // Automatic Variable Declarations
    const int autoF6BB5F0E_ae = gv_playerCount;
    const int autoF6BB5F0E_ai = 1;

    // Variable Initialization
    lv_color = Color(0,0,0);

    // Implementation
    lv_player = 1;
    for ( ; ( (autoF6BB5F0E_ai >= 0 && lv_player <= autoF6BB5F0E_ae) || (autoF6BB5F0E_ai < 0 && lv_player >= autoF6BB5F0E_ae) ) ; lv_player += autoF6BB5F0E_ai ) {
        lv_row = (lv_player+1);
        if ((gf_PlayerIsAlive(lv_player, lp_round) == true)) {
            lv_color = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false));
        }
        else {
            lv_color = Color(0,0,0);
        }
        BoardItemSetProgressColor(gv_scoreBoard, 2, lv_row, lv_color, 1);
        BoardItemSetProgressColor(gv_scoreBoard, 3, lv_row, lv_color, 1);
    }
}

void gf_ScoreBoardSetName (int lp_round, bool lp_bonusRound) {
    // Variable Declarations
    text lv_text;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_bonusRound == false)) {
        if ((gf_IsFinalRound(lp_round) == false)) {
            TextExpressionSetToken("Param/Expression/F33720A6", "A", IntToText(lp_round));
            lv_text = TextExpressionAssemble("Param/Expression/F33720A6");
        }
        else {
            lv_text = TextExpressionAssemble("Param/Expression/6736687E");
        }
    }
    else {
        TextExpressionSetToken("Param/Expression/2BCCABE1", "A", IntToText(lp_round));
        lv_text = TextExpressionAssemble("Param/Expression/2BCCABE1");
    }
    BoardSetName(gv_scoreBoard, lv_text, Color(100.00, 100.00, 100.00));
}

void gf_BuildingScoreUpdateAll () {
    // Variable Declarations
    int lv_maximumScore;
    int lv_player;
    int lv_column;
    int lv_row;

    // Automatic Variable Declarations
    const int auto564D19AF_ae = gv_playerCount;
    const int auto564D19AF_ai = 1;
    const int auto3854C920_ae = gv_playerCount;
    const int auto3854C920_ai = 1;

    // Variable Initialization
    lv_column = 2;

    // Implementation
    lv_player = 1;
    for ( ; ( (auto564D19AF_ai >= 0 && lv_player <= auto564D19AF_ae) || (auto564D19AF_ai < 0 && lv_player >= auto564D19AF_ae) ) ; lv_player += auto564D19AF_ai ) {
        if ((gv_buildingScore[lv_player] >= lv_maximumScore)) {
            lv_maximumScore = gv_buildingScore[lv_player];
        }

    }
    lv_player = 1;
    for ( ; ( (auto3854C920_ai >= 0 && lv_player <= auto3854C920_ae) || (auto3854C920_ai < 0 && lv_player >= auto3854C920_ae) ) ; lv_player += auto3854C920_ai ) {
        lv_row = (lv_player+1);
        BoardItemSetText(gv_scoreBoard, lv_column, lv_row, IntToText(gv_buildingScore[lv_player]));
        BoardItemSetProgressValue(gv_scoreBoard, lv_column, lv_row, gv_buildingScore[lv_player]);
        BoardItemSetProgressRange(gv_scoreBoard, lv_column, lv_row, 0.0, lv_maximumScore);
    }
}

void gf_DebugEnable (bool lp_option) {
    // Variable Declarations
    int lv_player;
    int lv_team;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerEnable(gt_DebugControlPressed, lp_option);
    TriggerEnable(gt_DebugKeyPressed, lp_option);
    TriggerEnable(gt_DebugUnitRemove, lp_option);
    TriggerEnable(gt_DebugUnitRemoveAll, lp_option);
    TriggerEnable(gt_DebugRoundPressed, lp_option);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MapInizialization
//--------------------------------------------------------------------------------------------------
bool gt_MapInizialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_debug;
    int lv_player;

    // Automatic Variable Declarations
    const int autoCF83B040_ae = gv_playerCount;
    const int autoCF83B040_ai = 1;
    const int auto1222D8BF_ae = gv_playerCount;
    const int auto1222D8BF_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libGAwX_gt_AOmiMarker, false);
    TriggerExecute(gt_VenueInizialization, true, false);
    TriggerExecute(gt_BuidingRegionInizialization, true, false);
    TriggerExecute(gt_PreviewerPointInizialization, true, false);
    TriggerExecute(gt_RoundInitialization, true, false);
    TriggerExecute(gt_PlayerColorInitialization, true, false);
    gf_ModInizialization(lv_debug);
    lv_player = 1;
    for ( ; ( (autoCF83B040_ai >= 0 && lv_player <= autoCF83B040_ae) || (autoCF83B040_ai < 0 && lv_player >= autoCF83B040_ae) ) ; lv_player += autoCF83B040_ai ) {
        VisRevealArea(lv_player, RegionFromId(70), 0.0625, false);
        VisRevealArea(lv_player, RegionFromId(71), 0.0625, false);
    }
    libGAwX_gf_SetWar3TimeOfDay("13:00:00");
    libGAwX_gf_PauseUnpauseTimeOfDayWar3(true);
    WaterSetState("AW2_Default|Alternate Setting", 0.0, c_wtcLinear);
    MeleeInitUnits();
    lv_player = 1;
    for ( ; ( (auto1222D8BF_ai >= 0 && lv_player <= auto1222D8BF_ae) || (auto1222D8BF_ai < 0 && lv_player >= auto1222D8BF_ae) ) ; lv_player += auto1222D8BF_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "hrdh", 0, lv_player, PlayerStartLocation(lv_player));
        if (((GameAttributeGameValue("2") == "0002") || (GameAttributeGameValue("2") == "0003") || (GameAttributeGameValue("2") == "0004") || (GameAttributeGameValue("2") == "0005"))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, gf_RaceGetWorkerType(gv_secondRace[lv_player]), 0, lv_player, PlayerStartLocation(lv_player));
        }

        gf_WorkersSave(lv_player);
        if ((PlayerGroupHasPlayer(gv_aIGroup, lv_player) == true)) {
            gf_WorkerExchangeSetAutoCast(lv_player, true);
        }

    }
    gf_RoundStartLoop(lv_debug);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInizialization_Init () {
    gt_MapInizialization = TriggerCreate("gt_MapInizialization_Func");
    TriggerAddEventMapInit(gt_MapInizialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VenueInizialization
//--------------------------------------------------------------------------------------------------
bool gt_VenueInizialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_gameValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gameValue = GameAttributeGameValue("2");

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lv_gameValue == "0001") || (lv_gameValue == "0002") || (lv_gameValue == "0003"))) {
        gf_VenueInitialSet(RegionFromId(25), 1, 90.0);
        gf_VenueInitialSet(RegionFromId(27), 2, 270.0);
        gf_VenueInitialSet(RegionFromId(29), 3, 270.0);
        gf_VenueInitialSet(RegionFromId(31), 4, 90.0);
        gf_VenueInitialSet(RegionFromId(33), 5, 0.0);
        gf_VenueInitialSet(RegionFromId(34), 6, 180.0);
        gf_VenueInitialSet(RegionFromId(35), 7, 180.0);
        gf_VenueInitialSet(RegionFromId(36), 8, 0.0);
        gf_PhalanxPointInitialSet(PointFromId(1382651926), 1, 1);
        gf_PhalanxPointInitialSet(PointFromId(507028551), 1, 2);
        gf_PhalanxPointInitialSet(PointFromId(412454489), 1, 3);
        gf_PhalanxPointInitialSet(PointFromId(1572605309), 2, 1);
        gf_PhalanxPointInitialSet(PointFromId(1821853843), 2, 2);
        gf_PhalanxPointInitialSet(PointFromId(1355963379), 2, 3);
        gf_PhalanxPointInitialSet(PointFromId(1851732867), 3, 1);
        gf_PhalanxPointInitialSet(PointFromId(1934211408), 3, 2);
        gf_PhalanxPointInitialSet(PointFromId(743248379), 3, 3);
        gf_PhalanxPointInitialSet(PointFromId(326751188), 4, 1);
        gf_PhalanxPointInitialSet(PointFromId(1504352363), 4, 2);
        gf_PhalanxPointInitialSet(PointFromId(1166433387), 4, 3);
        gf_PhalanxPointInitialSet(PointFromId(625151603), 5, 1);
        gf_PhalanxPointInitialSet(PointFromId(1944620099), 5, 2);
        gf_PhalanxPointInitialSet(PointFromId(1170779449), 5, 3);
        gf_PhalanxPointInitialSet(PointFromId(640190175), 6, 1);
        gf_PhalanxPointInitialSet(PointFromId(295569527), 6, 2);
        gf_PhalanxPointInitialSet(PointFromId(1457790901), 6, 3);
        gf_PhalanxPointInitialSet(PointFromId(1964627508), 7, 1);
        gf_PhalanxPointInitialSet(PointFromId(2026400730), 7, 2);
        gf_PhalanxPointInitialSet(PointFromId(746423778), 7, 3);
        gf_PhalanxPointInitialSet(PointFromId(45603764), 8, 1);
        gf_PhalanxPointInitialSet(PointFromId(1440046220), 8, 2);
        gf_PhalanxPointInitialSet(PointFromId(93947578), 8, 3);
        gf_BonusVenueSet(RegionFromId(25), 1, 90.0);
        gf_BonusVenueSet(RegionFromId(29), 2, 270.0);
        gf_BonusVenueSet(RegionFromId(33), 3, 0.0);
        gf_BonusVenueSet(RegionFromId(35), 4, 180.0);
        gf_BonusVenueSet(RegionFromId(38), 5, 0.0);
        gf_BonusVenueSet(RegionFromId(39), 6, 180.0);
        gf_BonusVenueSet(RegionFromId(40), 7, 0.0);
        gf_BonusVenueSet(RegionFromId(41), 8, 180.0);
        gf_BonusPhalanxPointSet(PointFromId(1382651926), 1, 1);
        gf_BonusPhalanxPointSet(PointFromId(507028551), 1, 2);
        gf_BonusPhalanxPointSet(PointFromId(412454489), 1, 3);
        gf_BonusPhalanxPointSet(PointFromId(1851732867), 2, 1);
        gf_BonusPhalanxPointSet(PointFromId(1934211408), 2, 2);
        gf_BonusPhalanxPointSet(PointFromId(743248379), 2, 3);
        gf_BonusPhalanxPointSet(PointFromId(625151603), 3, 1);
        gf_BonusPhalanxPointSet(PointFromId(1944620099), 3, 2);
        gf_BonusPhalanxPointSet(PointFromId(1170779449), 3, 3);
        gf_BonusPhalanxPointSet(PointFromId(1964627508), 4, 1);
        gf_BonusPhalanxPointSet(PointFromId(2026400730), 4, 2);
        gf_BonusPhalanxPointSet(PointFromId(746423778), 4, 3);
        gf_BonusPhalanxPointSet(PointFromId(620542691), 5, 1);
        gf_BonusPhalanxPointSet(PointFromId(1186433180), 5, 2);
        gf_BonusPhalanxPointSet(PointFromId(2062735354), 5, 3);
        gf_BonusPhalanxPointSet(PointFromId(1702296799), 6, 1);
        gf_BonusPhalanxPointSet(PointFromId(488690892), 6, 2);
        gf_BonusPhalanxPointSet(PointFromId(733312409), 6, 3);
        gf_BonusPhalanxPointSet(PointFromId(1729398279), 7, 1);
        gf_BonusPhalanxPointSet(PointFromId(321808426), 7, 2);
        gf_BonusPhalanxPointSet(PointFromId(1905570864), 7, 3);
        gf_BonusPhalanxPointSet(PointFromId(744973901), 8, 1);
        gf_BonusPhalanxPointSet(PointFromId(1700994596), 8, 2);
        gf_BonusPhalanxPointSet(PointFromId(1223532079), 8, 3);
        gf_FinalVenueSet(RegionFromId(72), 1, 0.0);
        gf_FinalVenueSet(RegionFromId(73), 2, 180.0);
        gf_FinalPhalanxPointSet(PointFromId(47815149), 1, 1);
        gf_FinalPhalanxPointSet(PointFromId(368812980), 1, 2);
        gf_FinalPhalanxPointSet(PointFromId(106920613), 1, 3);
        gf_FinalPhalanxPointSet(PointFromId(99512533), 2, 1);
        gf_FinalPhalanxPointSet(PointFromId(1755431443), 2, 2);
        gf_FinalPhalanxPointSet(PointFromId(271462349), 2, 3);
        gf_CreepPointSet(PointFromId(1622943121), 1);
        gf_CreepPointSet(PointFromId(9096037), 2);
        gf_CreepPointSet(PointFromId(914766699), 3);
        gf_CreepPointSet(PointFromId(2024075559), 4);
        gf_CreepPointSet(PointFromId(1413534366), 5);
        gf_CreepPointSet(PointFromId(775643380), 6);
        gf_CreepPointSet(PointFromId(1844541176), 7);
        gf_CreepPointSet(PointFromId(1335332667), 8);
    }
    else if (((lv_gameValue == "0005") || (lv_gameValue == "0004"))) {
        gf_VenueInitialSet(RegionFromId(25), 1, 90.0);
        gf_VenueInitialSet(RegionFromId(26), 2, 90.0);
        gf_VenueInitialSet(RegionFromId(27), 3, 270.0);
        gf_VenueInitialSet(RegionFromId(28), 4, 270.0);
        gf_VenueInitialSet(RegionFromId(29), 5, 270.0);
        gf_VenueInitialSet(RegionFromId(30), 6, 270.0);
        gf_VenueInitialSet(RegionFromId(31), 7, 90.0);
        gf_VenueInitialSet(RegionFromId(32), 8, 90.0);
        gf_PhalanxPointInitialSet(PointFromId(1382651926), 1, 1);
        gf_PhalanxPointInitialSet(PointFromId(507028551), 1, 2);
        gf_PhalanxPointInitialSet(PointFromId(412454489), 1, 3);
        gf_PhalanxPointInitialSet(PointFromId(2115120770), 2, 1);
        gf_PhalanxPointInitialSet(PointFromId(137721799), 2, 2);
        gf_PhalanxPointInitialSet(PointFromId(1253734896), 2, 3);
        gf_PhalanxPointInitialSet(PointFromId(1572605309), 3, 1);
        gf_PhalanxPointInitialSet(PointFromId(1821853843), 3, 2);
        gf_PhalanxPointInitialSet(PointFromId(1355963379), 3, 3);
        gf_PhalanxPointInitialSet(PointFromId(371612441), 4, 1);
        gf_PhalanxPointInitialSet(PointFromId(680555722), 4, 2);
        gf_PhalanxPointInitialSet(PointFromId(1030818242), 4, 3);
        gf_PhalanxPointInitialSet(PointFromId(1851732867), 5, 1);
        gf_PhalanxPointInitialSet(PointFromId(1934211408), 5, 2);
        gf_PhalanxPointInitialSet(PointFromId(743248379), 5, 3);
        gf_PhalanxPointInitialSet(PointFromId(611534811), 6, 1);
        gf_PhalanxPointInitialSet(PointFromId(1030741581), 6, 2);
        gf_PhalanxPointInitialSet(PointFromId(320787952), 6, 3);
        gf_PhalanxPointInitialSet(PointFromId(326751188), 7, 1);
        gf_PhalanxPointInitialSet(PointFromId(1504352363), 7, 2);
        gf_PhalanxPointInitialSet(PointFromId(1166433387), 7, 3);
        gf_PhalanxPointInitialSet(PointFromId(1394750784), 8, 1);
        gf_PhalanxPointInitialSet(PointFromId(182667694), 8, 2);
        gf_PhalanxPointInitialSet(PointFromId(649695722), 8, 3);
        gf_BonusVenueSet(RegionFromId(25), 1, 90.0);
        gf_BonusVenueSet(RegionFromId(26), 2, 90.0);
        gf_BonusVenueSet(RegionFromId(29), 3, 270.0);
        gf_BonusVenueSet(RegionFromId(30), 4, 270.0);
        gf_BonusVenueSet(RegionFromId(33), 5, 0.0);
        gf_BonusVenueSet(RegionFromId(42), 6, 0.0);
        gf_BonusVenueSet(RegionFromId(35), 7, 180.0);
        gf_BonusVenueSet(RegionFromId(44), 8, 180.0);
        gf_BonusPhalanxPointSet(PointFromId(1382651926), 1, 1);
        gf_BonusPhalanxPointSet(PointFromId(507028551), 1, 2);
        gf_BonusPhalanxPointSet(PointFromId(412454489), 1, 3);
        gf_BonusPhalanxPointSet(PointFromId(2115120770), 2, 1);
        gf_BonusPhalanxPointSet(PointFromId(137721799), 2, 2);
        gf_BonusPhalanxPointSet(PointFromId(1253734896), 2, 3);
        gf_BonusPhalanxPointSet(PointFromId(1851732867), 3, 1);
        gf_BonusPhalanxPointSet(PointFromId(1934211408), 3, 2);
        gf_BonusPhalanxPointSet(PointFromId(743248379), 3, 3);
        gf_BonusPhalanxPointSet(PointFromId(611534811), 4, 1);
        gf_BonusPhalanxPointSet(PointFromId(1030741581), 4, 2);
        gf_BonusPhalanxPointSet(PointFromId(320787952), 4, 3);
        gf_BonusPhalanxPointSet(PointFromId(625151603), 5, 1);
        gf_BonusPhalanxPointSet(PointFromId(1944620099), 5, 2);
        gf_BonusPhalanxPointSet(PointFromId(1170779449), 5, 3);
        gf_BonusPhalanxPointSet(PointFromId(1993646814), 6, 1);
        gf_BonusPhalanxPointSet(PointFromId(103793562), 6, 2);
        gf_BonusPhalanxPointSet(PointFromId(2049922658), 6, 3);
        gf_BonusPhalanxPointSet(PointFromId(1964627508), 7, 1);
        gf_BonusPhalanxPointSet(PointFromId(2026400730), 7, 2);
        gf_BonusPhalanxPointSet(PointFromId(746423778), 7, 3);
        gf_BonusPhalanxPointSet(PointFromId(423300881), 8, 1);
        gf_BonusPhalanxPointSet(PointFromId(775995632), 8, 2);
        gf_BonusPhalanxPointSet(PointFromId(1272139112), 8, 3);
        gf_FinalVenueSet(RegionFromId(72), 1, 0.0);
        gf_FinalVenueSet(RegionFromId(74), 2, 0.0);
        gf_FinalVenueSet(RegionFromId(73), 3, 180.0);
        gf_FinalVenueSet(RegionFromId(75), 4, 180.0);
        gf_FinalPhalanxPointSet(PointFromId(47815149), 1, 1);
        gf_FinalPhalanxPointSet(PointFromId(368812980), 1, 2);
        gf_FinalPhalanxPointSet(PointFromId(106920613), 1, 3);
        gf_FinalPhalanxPointSet(PointFromId(1025780406), 2, 1);
        gf_FinalPhalanxPointSet(PointFromId(693922228), 2, 2);
        gf_FinalPhalanxPointSet(PointFromId(801071952), 2, 3);
        gf_FinalPhalanxPointSet(PointFromId(99512533), 3, 1);
        gf_FinalPhalanxPointSet(PointFromId(1755431443), 3, 2);
        gf_FinalPhalanxPointSet(PointFromId(271462349), 3, 3);
        gf_FinalPhalanxPointSet(PointFromId(1768712650), 4, 1);
        gf_FinalPhalanxPointSet(PointFromId(361340128), 4, 2);
        gf_FinalPhalanxPointSet(PointFromId(2121810214), 4, 3);
        gf_CreepPointSet(PointFromId(1622943121), 1);
        gf_CreepPointSet(PointFromId(529173248), 2);
        gf_CreepPointSet(PointFromId(9096037), 3);
        gf_CreepPointSet(PointFromId(537789621), 4);
        gf_CreepPointSet(PointFromId(914766699), 5);
        gf_CreepPointSet(PointFromId(924364117), 6);
        gf_CreepPointSet(PointFromId(2024075559), 7);
        gf_CreepPointSet(PointFromId(478594730), 8);
    }
    gf_BattlefieldSetAll(RegionFromId(37));
    gf_BattlefieldHighlandSet(RegionFromId(76));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VenueInizialization_Init () {
    gt_VenueInizialization = TriggerCreate("gt_VenueInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BuidingRegionInizialization
//--------------------------------------------------------------------------------------------------
bool gt_BuidingRegionInizialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_BuildingRegionSet(RegionFromId(1), 1, 1);
    gf_BuildingRegionSet(RegionFromId(2), 1, 2);
    gf_BuildingRegionSet(RegionFromId(3), 1, 3);
    gf_BuildingRegionSet(RegionFromId(4), 2, 1);
    gf_BuildingRegionSet(RegionFromId(5), 2, 2);
    gf_BuildingRegionSet(RegionFromId(6), 2, 3);
    gf_BuildingRegionSet(RegionFromId(7), 3, 1);
    gf_BuildingRegionSet(RegionFromId(8), 3, 2);
    gf_BuildingRegionSet(RegionFromId(9), 3, 3);
    gf_BuildingRegionSet(RegionFromId(10), 4, 1);
    gf_BuildingRegionSet(RegionFromId(11), 4, 2);
    gf_BuildingRegionSet(RegionFromId(12), 4, 3);
    gf_BuildingRegionSet(RegionFromId(13), 5, 1);
    gf_BuildingRegionSet(RegionFromId(14), 5, 2);
    gf_BuildingRegionSet(RegionFromId(15), 5, 3);
    gf_BuildingRegionSet(RegionFromId(16), 6, 1);
    gf_BuildingRegionSet(RegionFromId(17), 6, 2);
    gf_BuildingRegionSet(RegionFromId(18), 6, 3);
    gf_BuildingRegionSet(RegionFromId(19), 7, 1);
    gf_BuildingRegionSet(RegionFromId(20), 7, 2);
    gf_BuildingRegionSet(RegionFromId(21), 7, 3);
    gf_BuildingRegionSet(RegionFromId(22), 8, 1);
    gf_BuildingRegionSet(RegionFromId(23), 8, 2);
    gf_BuildingRegionSet(RegionFromId(24), 8, 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuidingRegionInizialization_Init () {
    gt_BuidingRegionInizialization = TriggerCreate("gt_BuidingRegionInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PreviewerPointInizialization
//--------------------------------------------------------------------------------------------------
bool gt_PreviewerPointInizialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PreviewerRegionSet(RegionFromId(46), 1, 1);
    gf_PreviewerRegionSet(RegionFromId(47), 1, 2);
    gf_PreviewerRegionSet(RegionFromId(48), 1, 3);
    gf_PreviewerRegionSet(RegionFromId(49), 2, 1);
    gf_PreviewerRegionSet(RegionFromId(50), 2, 2);
    gf_PreviewerRegionSet(RegionFromId(51), 2, 3);
    gf_PreviewerRegionSet(RegionFromId(52), 3, 1);
    gf_PreviewerRegionSet(RegionFromId(53), 3, 2);
    gf_PreviewerRegionSet(RegionFromId(54), 3, 3);
    gf_PreviewerRegionSet(RegionFromId(55), 4, 1);
    gf_PreviewerRegionSet(RegionFromId(56), 4, 2);
    gf_PreviewerRegionSet(RegionFromId(57), 4, 3);
    gf_PreviewerRegionSet(RegionFromId(58), 5, 1);
    gf_PreviewerRegionSet(RegionFromId(59), 5, 2);
    gf_PreviewerRegionSet(RegionFromId(60), 5, 3);
    gf_PreviewerRegionSet(RegionFromId(61), 6, 1);
    gf_PreviewerRegionSet(RegionFromId(62), 6, 2);
    gf_PreviewerRegionSet(RegionFromId(63), 6, 3);
    gf_PreviewerRegionSet(RegionFromId(64), 7, 1);
    gf_PreviewerRegionSet(RegionFromId(65), 7, 2);
    gf_PreviewerRegionSet(RegionFromId(66), 7, 3);
    gf_PreviewerRegionSet(RegionFromId(67), 8, 1);
    gf_PreviewerRegionSet(RegionFromId(68), 8, 2);
    gf_PreviewerRegionSet(RegionFromId(69), 8, 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PreviewerPointInizialization_Init () {
    gt_PreviewerPointInizialization = TriggerCreate("gt_PreviewerPointInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: RoundInitialization
//--------------------------------------------------------------------------------------------------
bool gt_RoundInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_gameValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gameValue = GameAttributeGameValue("2");

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lv_gameValue == "0001") || (lv_gameValue == "0002") || (lv_gameValue == "0003"))) {
        gf_ObjectiveTextSeparatorSet(StringExternal("Param/Value/B744BA58"), StringExternal("Param/Value/91BA9176"), StringExternal("Param/Value/54C1A907"));
        gf_RoundGoldSet(1, 90);
        gf_RoundGoldSet(2, 135);
        gf_RoundGoldSet(3, 180);
        gf_RoundGoldSet(4, 225);
        gf_RoundGoldSet(5, 270);
        gf_RoundGoldSet(6, 315);
        gf_RoundGoldSet(7, 360);
        if ((lv_gameValue == "0002")) {
            gf_RoundNumberSet(8, 32400);
        }
        else {
            gf_BonusRoundSet(true, 7);
        }
        gf_RoundGoldSet(8, 405);
    }
    else if (((lv_gameValue == "0005") || (lv_gameValue == "0004"))) {
        gf_ObjectiveTextSeparatorSet(StringExternal("Param/Value/15A47604"), StringExternal("Param/Value/7EA0BD11"), StringExternal("Param/Value/B3EEA70D"));
        gf_RoundGoldSet(1, 135);
        gf_RoundGoldSet(2, 180);
        gf_RoundGoldSet(3, 225);
        gf_RoundGoldSet(4, 270);
        gf_RoundGoldSet(5, 315);
        gf_RoundGoldSet(6, 360);
        if ((lv_gameValue == "0005")) {
            gf_RoundNumberSet(7, 32400);
        }
        else {
            gf_BonusRoundSet(true, 6);
        }
        gf_RoundGoldSet(7, 405);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoundInitialization_Init () {
    gt_RoundInitialization = TriggerCreate("gt_RoundInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlayerColorInitialization
//--------------------------------------------------------------------------------------------------
bool gt_PlayerColorInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerSetColorIndex(1, 1, true);
    PlayerSetColorIndex(2, 2, true);
    PlayerSetColorIndex(3, 3, true);
    PlayerSetColorIndex(4, 4, true);
    PlayerSetColorIndex(5, 5, true);
    PlayerSetColorIndex(6, 6, true);
    PlayerSetColorIndex(7, 7, true);
    PlayerSetColorIndex(8, 8, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerColorInitialization_Init () {
    gt_PlayerColorInitialization = TriggerCreate("gt_PlayerColorInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShowPlayerHandle
//--------------------------------------------------------------------------------------------------
bool gt_ShowPlayerHandle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/70F14678", "A", StringToText(PlayerHandle(EventPlayer())));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/70F14678"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowPlayerHandle_Init () {
    gt_ShowPlayerHandle = TriggerCreate("gt_ShowPlayerHandle_Func");
    TriggerAddEventChatMessage(gt_ShowPlayerHandle, c_playerAny, "-ph", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShowPlayerDifficultyAll
//--------------------------------------------------------------------------------------------------
bool gt_ShowPlayerDifficultyAll_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int autoC3DF1BCB_ae = gv_playerCount;
    const int autoC3DF1BCB_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = 1;
    for ( ; ( (autoC3DF1BCB_ai >= 0 && lv_player <= autoC3DF1BCB_ae) || (autoC3DF1BCB_ai < 0 && lv_player >= autoC3DF1BCB_ae) ) ; lv_player += autoC3DF1BCB_ai ) {
        TextExpressionSetToken("Param/Expression/188F0AD5", "A", PlayerName(lv_player));
        TextExpressionSetToken("Param/Expression/188F0AD5", "B", DifficultyName(PlayerDifficulty(lv_player)));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/188F0AD5"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowPlayerDifficultyAll_Init () {
    gt_ShowPlayerDifficultyAll = TriggerCreate("gt_ShowPlayerDifficultyAll_Func");
    TriggerAddEventChatMessage(gt_ShowPlayerDifficultyAll, c_playerAny, "-pd", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameAttributeInizialization
//--------------------------------------------------------------------------------------------------
bool gt_GameAttributeInizialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_round;

    // Automatic Variable Declarations
    string auto4F0CCA57_val;
    string auto6B7DF3F0_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto4F0CCA57_val = GameAttributeGameValue("2");
    if (auto4F0CCA57_val == "0001") {
        gv_teamCount = 8;
    }
    else if (auto4F0CCA57_val == "0003") {
        gv_teamCount = 8;
    }
    else if (auto4F0CCA57_val == "0002") {
        gv_teamCount = 8;
    }
    else if (auto4F0CCA57_val == "0004") {
        gv_teamCount = 4;
    }
    else if (auto4F0CCA57_val == "0005") {
        gv_teamCount = 4;
    }
    else {
    }
    gv_teamRoundCount = (gv_teamCount-1);
    gv_teamMemberCount = (gv_playerCount/gv_teamCount);
    gv_finalRoundCount = (gv_teamCount-1);
    gv_roundCount = (gv_playerCount-gv_teamMemberCount+gv_finalRoundCount);
    auto6B7DF3F0_val = GameAttributeGameValue("2");
    if (auto6B7DF3F0_val == "0001") {
        gv_finalRound = 8;
        gv_venueFinalEnd = 2;
    }
    else if (auto6B7DF3F0_val == "0003") {
        gv_finalRound = 8;
        gv_venueFinalEnd = 2;
    }
    else if (auto6B7DF3F0_val == "0002") {
        gv_finalRound = 8;
        gv_venueFinalEnd = 2;
    }
    else if (auto6B7DF3F0_val == "0004") {
        gv_finalRound = 7;
        gv_venueFinalEnd = 4;
    }
    else if (auto6B7DF3F0_val == "0005") {
        gv_finalRound = 7;
        gv_venueFinalEnd = 4;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameAttributeInizialization_Init () {
    gt_GameAttributeInizialization = TriggerCreate("gt_GameAttributeInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AllianceInizialization
//--------------------------------------------------------------------------------------------------
bool gt_AllianceInizialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    int lv_teamMember;
    int lv_targetTeamMember;
    int lv_player;
    int lv_targetPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SetTeamAlianceAll(libNtve_ge_AllianceSetting_AllyWithSharedVision);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AllianceInizialization_Init () {
    gt_AllianceInizialization = TriggerCreate("gt_AllianceInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ScoreBoardInizialization
//--------------------------------------------------------------------------------------------------
bool gt_ScoreBoardInizialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_column;
    int lv_player;
    int lv_row;

    // Automatic Variable Declarations
    const int auto6B7CF141_ae = 3;
    const int auto6B7CF141_ai = 1;
    const int autoFD0B85D6_ae = gv_playerCount;
    const int autoFD0B85D6_ai = 1;
    const int auto8F5FEE41_ae = 3;
    const int auto8F5FEE41_ai = 1;
    int auto26D786A1_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    BoardCreate(3, gv_playerCount, StringExternal("Param/Value/58BD0FA7"), Color(100.00, 100.00, 100.00));
    gv_scoreBoard = BoardLastCreated();
    BoardSetGroupCount(gv_scoreBoard, gv_teamCount);
    BoardItemSetText(gv_scoreBoard, 1, c_boardRowHeader, StringExternal("Param/Value/C201E5C3"));
    BoardItemSetText(gv_scoreBoard, 2, c_boardRowHeader, StringExternal("Param/Value/A4868C6E"));
    BoardItemSetText(gv_scoreBoard, 3, c_boardRowHeader, StringExternal("Param/Value/87E4737D"));
    lv_column = 1;
    for ( ; ( (auto6B7CF141_ai >= 0 && lv_column <= auto6B7CF141_ae) || (auto6B7CF141_ai < 0 && lv_column >= auto6B7CF141_ae) ) ; lv_column += auto6B7CF141_ai ) {
        BoardItemSetFontSize(gv_scoreBoard, lv_column, c_boardRowHeader, 20);
    }
    BoardSetPlayerColumn(gv_scoreBoard, 1, true);
    lv_player = 1;
    for ( ; ( (autoFD0B85D6_ai >= 0 && lv_player <= autoFD0B85D6_ae) || (autoFD0B85D6_ai < 0 && lv_player >= autoFD0B85D6_ae) ) ; lv_player += autoFD0B85D6_ai ) {
        lv_row = (lv_player+1);
        BoardPlayerAdd(gv_scoreBoard, lv_player);
        BoardRowSetGroup(gv_scoreBoard, lv_row, gf_PlayerGetTeam(lv_player));
        lv_column = 1;
        for ( ; ( (auto8F5FEE41_ai >= 0 && lv_column <= auto8F5FEE41_ae) || (auto8F5FEE41_ai < 0 && lv_column >= auto8F5FEE41_ae) ) ; lv_column += auto8F5FEE41_ai ) {
            if ((lv_column == 1)) {
                BoardItemSetFontSize(gv_scoreBoard, lv_column, lv_row, 20);
                auto26D786A1_val = PlayerDifficulty(lv_player);
                if (auto26D786A1_val == 1) {
                }
                else if (auto26D786A1_val == 3) {
                }
                else if (auto26D786A1_val == 5) {
                    BoardItemSetBackgroundColor(gv_scoreBoard, lv_column, lv_row, ColorWithAlpha(0.0, 100.0, 0.0, 25.0));
                }
                else if (auto26D786A1_val == 7) {
                    BoardItemSetBackgroundColor(gv_scoreBoard, lv_column, lv_row, ColorWithAlpha(100.0, 100.0, 0.0, 25.0));
                }
                else if (auto26D786A1_val == 9) {
                    BoardItemSetBackgroundColor(gv_scoreBoard, lv_column, lv_row, ColorWithAlpha(100.0, 0.0, 0.0, 25.0));
                }
                else {
                }
                BoardItemSetTextColor(gv_scoreBoard, lv_column, lv_row, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false)));
            }
            else if (((lv_column == 2) || (lv_column == 3))) {
                BoardItemSetFontSize(gv_scoreBoard, lv_column, lv_row, 16);
                BoardItemSetTextColor(gv_scoreBoard, lv_column, lv_row, Color(100.00, 100.00, 100.00));
                BoardItemSetProgressShow(gv_scoreBoard, lv_column, lv_row, true);
                BoardItemSetProgressColor(gv_scoreBoard, lv_column, lv_row, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false)), 1);
            }
        }
    }
    libNtve_gf_ShowHideLeaderboard(gv_scoreBoard, true, gv_uIPlayergroup);
    gf_BuildingScoreUpdateAll();
    gf_KillScoreUpdateAll();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScoreBoardInizialization_Init () {
    gt_ScoreBoardInizialization = TriggerCreate("gt_ScoreBoardInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TimerInizialization
//--------------------------------------------------------------------------------------------------
bool gt_TimerInizialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerWindowCreate(gv_timer, StringExternal("Param/Value/5F942B70"), false, false);
    gv_timerWindow = TimerWindowLastCreated();
    TimerWindowSetTimer(gv_timerWindow, gv_timer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerInizialization_Init () {
    gt_TimerInizialization = TriggerCreate("gt_TimerInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlayerInizialization
//--------------------------------------------------------------------------------------------------
bool gt_PlayerInizialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_secondRaceFromRaceAttribute;

    // Automatic Variable Declarations
    const int autoD5DFB1DB_ae = gv_playerCount;
    const int autoD5DFB1DB_ai = 1;
    string autoFDE01903_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = 1;
    for ( ; ( (autoD5DFB1DB_ai >= 0 && lv_player <= autoD5DFB1DB_ae) || (autoD5DFB1DB_ai < 0 && lv_player >= autoD5DFB1DB_ae) ) ; lv_player += autoD5DFB1DB_ai ) {
        autoFDE01903_val = GameAttributeGameValue("2");
        if (autoFDE01903_val == "0001") {
            libGAwX_gf_SetPlayerUIRace(lv_player, libGAwX_gf_GenerateRaceFromRaceAttribute(GameAttributePlayerValue("3", lv_player)));
        }
        else if (autoFDE01903_val == "0003") {
            libGAwX_gf_SetPlayerUIRace(lv_player, libGAwX_gf_GenerateRaceFromRaceAttribute(GameAttributePlayerValue("3", lv_player)));
            lv_secondRaceFromRaceAttribute = libGAwX_gf_GenerateRaceFromRaceAttribute(GameAttributePlayerValue("4", lv_player));
            gv_secondRace[lv_player] = gf_GenerateSecondRace(lv_player, lv_secondRaceFromRaceAttribute);
        }
        else if (autoFDE01903_val == "0002") {
            libGAwX_gf_SetPlayerUIRace(lv_player, libGAwX_gf_GenerateRaceFromRaceAttribute(GameAttributePlayerValue("3", lv_player)));
            lv_secondRaceFromRaceAttribute = libGAwX_gf_GenerateRaceFromRaceAttribute(GameAttributePlayerValue("4", lv_player));
            gv_secondRace[lv_player] = gf_GenerateSecondRace(lv_player, lv_secondRaceFromRaceAttribute);
        }
        else if (autoFDE01903_val == "0004") {
            libGAwX_gf_SetPlayerUIRace(lv_player, libGAwX_gf_GenerateRaceFromRaceAttribute(GameAttributePlayerValue("3", lv_player)));
            lv_secondRaceFromRaceAttribute = libGAwX_gf_GenerateRaceFromRaceAttribute(GameAttributePlayerValue("4", lv_player));
            gv_secondRace[lv_player] = gf_GenerateSecondRace(lv_player, lv_secondRaceFromRaceAttribute);
        }
        else if (autoFDE01903_val == "0005") {
            libGAwX_gf_SetPlayerUIRace(lv_player, libGAwX_gf_GenerateRaceFromRaceAttribute(GameAttributePlayerValue("3", lv_player)));
            lv_secondRaceFromRaceAttribute = libGAwX_gf_GenerateRaceFromRaceAttribute(GameAttributePlayerValue("4", lv_player));
            gv_secondRace[lv_player] = gf_GenerateSecondRace(lv_player, lv_secondRaceFromRaceAttribute);
        }
        else {
        }
        PlayerSetState(lv_player, c_playerStateFoodIgnored, true);
        PlayerSetState(lv_player, c_playerStateShowWorldTip, true);
        PlayerOptionOverride(lv_player, "simplecommandcard", "0");
        PlayerOptionOverride(lv_player, "buildgridhint", "1");
        PlayerOptionOverride(lv_player, "gametooltips", "1");
        PlayerOptionOverride(lv_player, "selectuncontrolable", "1");
        if ((PlayerType(lv_player) == c_playerTypeComputer)) {
            PlayerGroupAdd(gv_aIGroup, lv_player);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerInizialization_Init () {
    gt_PlayerInizialization = TriggerCreate("gt_PlayerInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aspl - Search
//--------------------------------------------------------------------------------------------------
bool gt_AsplSearch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_ug;
    unit lv_target;
    int lv_player;
    unit lv_a;
    unit lv_b;
    unitgroup lv_unfitGroup;
    unit lv_testUnit;
    fixed lv_life;
    int lv_i;
    unit lv_u;

    // Automatic Variable Declarations
    int autoC1C62BAC_ae;
    const int autoC1C62BAC_ai = 1;
    unitgroup auto844E90B3_g;
    int auto844E90B3_u;
    unit auto844E90B3_var;
    unitgroup auto3ED82072_g;
    int auto3ED82072_u;
    unitgroup auto54CC2DB2_g;
    int auto54CC2DB2_u;

    // Variable Initialization
    lv_ug = UnitGroupEmpty();
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_unfitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_target, libGAwX_gv_asplMarkerBuff, c_unitBehaviorCountAll);
    Wait(0.0625, c_timeGame);
    autoC1C62BAC_ae = (gv_asplMaxTargets - 1);
    lv_i = 1;
    for ( ; ( (autoC1C62BAC_ai >= 0 && lv_i <= autoC1C62BAC_ae) || (autoC1C62BAC_ai < 0 && lv_i >= autoC1C62BAC_ae) ) ; lv_i += autoC1C62BAC_ai ) {
        lv_life = 0.0;
        auto844E90B3_g = UnitGroupSearch(null, lv_player, UnitGetPosition(lv_target), gv_asplRadius, libGAwX_gv_asplTargetFilter, 0);
        auto844E90B3_u = UnitGroupCount(auto844E90B3_g, c_unitCountAll);
        for (;; auto844E90B3_u -= 1) {
            auto844E90B3_var = UnitGroupUnitFromEnd(auto844E90B3_g, auto844E90B3_u);
            if (auto844E90B3_var == null) { break; }
            if ((UnitHasBehavior(auto844E90B3_var, libGAwX_gv_asplMarkerBuff) == false) && (UnitGetPropertyFixed(auto844E90B3_var, c_unitPropLife, c_unitPropCurrent) > lv_life) && (UnitGroupHasUnit(lv_ug, auto844E90B3_var) == false)) {
                lv_life = UnitGetPropertyFixed(auto844E90B3_var, c_unitPropLife, c_unitPropCurrent);
                lv_u = auto844E90B3_var;
            }

        }
        UnitGroupAdd(lv_ug, lv_u);
    }
    UnitGroupAdd(lv_ug, lv_target);
    auto3ED82072_g = lv_ug;
    auto3ED82072_u = UnitGroupCount(auto3ED82072_g, c_unitCountAll);
    for (;; auto3ED82072_u -= 1) {
        lv_a = UnitGroupUnitFromEnd(auto3ED82072_g, auto3ED82072_u);
        if (lv_a == null) { break; }
        auto54CC2DB2_g = lv_ug;
        auto54CC2DB2_u = UnitGroupCount(auto54CC2DB2_g, c_unitCountAll);
        for (;; auto54CC2DB2_u -= 1) {
            lv_b = UnitGroupUnitFromEnd(auto54CC2DB2_g, auto54CC2DB2_u);
            if (lv_b == null) { break; }
            UnitCreateEffectUnit(lv_a, libGAwX_gv_asplMarkerEffect, lv_b);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AsplSearch_Init () {
    gt_AsplSearch = TriggerCreate("gt_AsplSearch_Func");
    TriggerAddEventPlayerEffectUsed(gt_AsplSearch, c_playerAny, libGAwX_gv_asplNoticeEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aspl - Split
//--------------------------------------------------------------------------------------------------
bool gt_AsplSplit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_player;
    int lv_stack;
    fixed lv_originalDamage;
    unit lv_damager;
    fixed lv_mainDamage;
    fixed lv_splitDamage;
    unitgroup lv_linkedGroup;
    unit lv_splitTarget;
    int lv_i;

    // Automatic Variable Declarations
    int autoD6BD8363_ae;
    const int autoD6BD8363_ai = 1;

    // Variable Initialization
    lv_u = EventUnit();
    lv_player = EventPlayer();
    lv_stack = UnitBehaviorCount(lv_u, libGAwX_gv_asplMarkerBuff);
    lv_originalDamage = EventUnitDamageAbsorbed();
    lv_damager = EventUnitDamageSourceUnit();
    lv_mainDamage = (lv_originalDamage * gv_asplSplitFactor);
    lv_linkedGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(lv_damager) == false)) {
        lv_damager = lv_u;
    }

    if ((lv_stack > 0)) {
        UnitDamage(lv_damager, libGAwX_gv_asplMainDamageEffect, lv_u, lv_mainDamage);
        lv_splitDamage = ((lv_originalDamage - lv_mainDamage) / lv_stack);
        autoD6BD8363_ae = (lv_stack - 1);
        lv_i = 0;
        for ( ; ( (autoD6BD8363_ai >= 0 && lv_i <= autoD6BD8363_ae) || (autoD6BD8363_ai < 0 && lv_i >= autoD6BD8363_ae) ) ; lv_i += autoD6BD8363_ai ) {
            lv_splitTarget = UnitBehaviorEffectUnit(lv_u, libGAwX_gv_asplMarkerBuff, c_effectUnitCaster, lv_i);
            if ((UnitIsAlive(lv_splitTarget) == true)) {
                UnitDamage(lv_damager, libGAwX_gv_asplSplitDamageEffect, lv_splitTarget, lv_splitDamage);
            }

        }
    }
    else {
        UnitDamage(lv_damager, libGAwX_gv_asplMainDamageEffect, lv_u, lv_originalDamage);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AsplSplit_Init () {
    gt_AsplSplit = TriggerCreate("gt_AsplSplit_Func");
    TriggerAddEventUnitDamageAbsorbed(gt_AsplSplit, null, libGAwX_gv_asplMarkerBuff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aimp - Impact
//--------------------------------------------------------------------------------------------------
bool gt_AimpImpact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorEnabled(lv_u, "Aimp") == true))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_u, "Aimp") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(lv_u, "AimpSphereEffect", PointInterpolate(UnitGetPosition(lv_u), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 1.33));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AimpImpact_Init () {
    gt_AimpImpact = TriggerCreate("gt_AimpImpact_Func");
    TriggerAddEventPlayerEffectUsed(gt_AimpImpact, c_playerAny, "ebal1");
    TriggerAddEventPlayerEffectUsed(gt_AimpImpact, c_playerAny, "ebal2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Abof - Impact
//--------------------------------------------------------------------------------------------------
bool gt_AbofImpact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorEnabled(lv_u, "Abof") == true))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_u, "Abof") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(lv_u, "AbofSphereEffect", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    UnitCreateEffectPoint(lv_u, "AbofSphereEffect", PointInterpolate(UnitGetPosition(lv_u), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 1.25));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AbofImpact_Init () {
    gt_AbofImpact = TriggerCreate("gt_AbofImpact_Func");
    TriggerAddEventPlayerEffectUsed(gt_AbofImpact, c_playerAny, "ncat1");
    TriggerAddEventPlayerEffectUsed(gt_AbofImpact, c_playerAny, "ncat2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timed Life Fate Tower
//--------------------------------------------------------------------------------------------------
bool gt_TimedLifeFateTower_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_unitType;
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_unitType = EventPlayerEffectUsedUnitType(c_effectUnitCaster);
    lv_value = CatalogFieldValueGetAsInt(c_gameCatalogUnit, EventPlayerEffectUsedUnitType(c_effectUnitCaster), "KillResource[" + IntToString(3) + "]", lv_player);

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(lv_player, c_playerPropCustom, c_playerPropOperAdd, lv_value);
    gf_KillScoreAdd(lv_player, lv_value);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimedLifeFateTower_Init () {
    gt_TimedLifeFateTower = TriggerCreate("gt_TimedLifeFateTower_Func");
    TriggerAddEventPlayerEffectUsed(gt_TimedLifeFateTower, c_playerAny, "TimedLifeFateTower");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DreamIllusion
//--------------------------------------------------------------------------------------------------
bool gt_DreamIllusion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnitCreatedUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((gv_dreamDisabled == false))) {
            return false;
        }

        if (!((RegionContainsPoint(gv_battlefield, UnitGetPosition(lv_unit)) == true))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(lv_player, "EmeraldDream", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(lv_unit, lv_player, gv_unitFilter) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(lv_unit, "DreamIllusion", lv_player, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DreamIllusion_Init () {
    gt_DreamIllusion = TriggerCreate("gt_DreamIllusion_Func");
    TriggerAddEventUnitCreated(gt_DreamIllusion, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transmute
//--------------------------------------------------------------------------------------------------
bool gt_Transmute_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_targetUnit;
    string lv_targetUnitType;
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_targetUnitType = UnitGetType(lv_targetUnit);
    lv_value = CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_targetUnitType, "KillResource[" + IntToString(3) + "]", lv_player);

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(lv_player, c_playerPropCustom, c_playerPropOperAdd, lv_value);
    gf_KillScoreAdd(lv_player, lv_value);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Transmute_Init () {
    gt_Transmute = TriggerCreate("gt_Transmute_Func");
    TriggerAddEventPlayerEffectUsed(gt_Transmute, c_playerAny, "ANtmPawn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AOmi - Remove All Non-Permanent
//--------------------------------------------------------------------------------------------------
bool gt_AOmiRemoveAllNonPermanent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf_RemoveAllNonPermanent(lv_unit);
    UnitBehaviorRemove(lv_unit, gv_aOmiMarker, c_unitBehaviorCountAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AOmiRemoveAllNonPermanent_Init () {
    gt_AOmiRemoveAllNonPermanent = TriggerCreate("gt_AOmiRemoveAllNonPermanent_Func");
    TriggerAddEventUnitBehaviorChange(gt_AOmiRemoveAllNonPermanent, null, gv_aOmiPrecursorBuffEntry, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AOmi - Launch
//--------------------------------------------------------------------------------------------------
bool gt_AOmiLaunch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    point lv_casterPoint;
    fixed lv_angle;
    int lv_level;
    int lv_numersThisLevel;
    fixed lv_delta;
    point lv_targetPoint;
    int lv_i;

    // Automatic Variable Declarations
    int auto525F557F_ae;
    const int auto525F557F_ai = 1;

    // Variable Initialization
    lv_caster = EventUnit();
    lv_casterPoint = UnitGetPosition(lv_caster);
    lv_angle = libNtve_gf_RandomAngle();
    lv_level = UnitAbilityGetLevel(lv_caster, gv_aOmiAbilEntry);
    lv_numersThisLevel = (gv_aOmiBaseImages + (gv_aOmiExtraImagePerLevel * lv_level));
    lv_delta = (360.0 / (lv_numersThisLevel + 1));
    lv_targetPoint = PointWithOffsetPolar(lv_casterPoint, gv_aOmiRange, lv_angle);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetFacing(lv_caster, lv_angle, 0.0);
    UnitCreateEffectPoint(lv_caster, gv_aOmiNonMirrorMissileEffectEntry, lv_targetPoint);
    auto525F557F_ae = lv_numersThisLevel;
    lv_i = 1;
    for ( ; ( (auto525F557F_ai >= 0 && lv_i <= auto525F557F_ae) || (auto525F557F_ai < 0 && lv_i >= auto525F557F_ae) ) ; lv_i += auto525F557F_ai ) {
        lv_angle += lv_delta;
        lv_targetPoint = PointWithOffsetPolar(lv_casterPoint, gv_aOmiRange, lv_angle);
        UnitCreateEffectPoint(lv_caster, gv_aOmiMissileEffectEntry, lv_targetPoint);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AOmiLaunch_Init () {
    gt_AOmiLaunch = TriggerCreate("gt_AOmiLaunch_Func");
    TriggerAddEventUnitBehaviorChange(gt_AOmiLaunch, null, gv_aOmiPrecursorBuffEntry, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AOmi - Marker
//--------------------------------------------------------------------------------------------------
bool gt_AOmiMarker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    unitgroup lv_copysource;
    unit lv_item;
    unit lv_itemCopy;
    int lv_i;
    string lv_abil;
    int lv_level;
    int lv_slot;
    int lv_container;
    int lv_c;
    string lv_buff;
    int lv_stack;

    // Automatic Variable Declarations
    unitgroup auto397EC100_g;
    int auto397EC100_u;
    int auto9AEFBD1C_ae;
    const int auto9AEFBD1C_ai = 1;

    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_copysource = UnitInventoryGroup(lv_caster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_caster, gv_aOmiMarker, lv_target, 1);
    auto397EC100_g = lv_copysource;
    auto397EC100_u = UnitGroupCount(auto397EC100_g, c_unitCountAll);
    for (;; auto397EC100_u -= 1) {
        lv_item = UnitGroupUnitFromEnd(auto397EC100_g, auto397EC100_u);
        if (lv_item == null) { break; }
        lv_slot = UnitInventorySlot(lv_item);
        lv_container = UnitInventoryContainer(lv_item);
        UnitInventoryCreate(lv_target, UnitGetType(lv_item));
        lv_itemCopy = UnitInventoryLastCreated();
        UnitInventoryMove(lv_itemCopy, lv_container, lv_slot);
    }
    lv_c = UnitBehaviorCountAll(lv_caster);
    auto9AEFBD1C_ae = lv_c;
    lv_i = 1;
    for ( ; ( (auto9AEFBD1C_ai >= 0 && lv_i <= auto9AEFBD1C_ae) || (auto9AEFBD1C_ai < 0 && lv_i >= auto9AEFBD1C_ae) ) ; lv_i += auto9AEFBD1C_ai ) {
        lv_buff = UnitBehaviorGet(lv_caster, lv_i);
        if ((lv_buff != "Str") && (lv_buff != "Agi") && (lv_buff != "Int") && (lv_buff != "RetrainNoUse")) {
            lv_stack = UnitBehaviorCount(lv_caster, lv_buff);
            UnitBehaviorAdd(lv_target, lv_buff, lv_target, lv_stack);
        }

    }
    UnitBehaviorAdd(lv_target, gv_aOmiExtraBuff, lv_caster, 1);
    Wait(0.0625, c_timeGame);
    UnitBehaviorAdd(lv_caster, gv_aOmiMarker, lv_target, 1);
    UnitSetPropertyFixed(lv_target, c_unitPropLifeMax, UnitGetPropertyFixed(lv_caster, c_unitPropLifeMax, c_unitPropCurrent));
    UnitSetPropertyFixed(lv_target, c_unitPropLife, UnitGetPropertyFixed(lv_caster, c_unitPropLife, c_unitPropCurrent));
    UnitSetPropertyFixed(lv_target, c_unitPropEnergyMax, UnitGetPropertyFixed(lv_caster, c_unitPropEnergyMax, c_unitPropCurrent));
    UnitSetPropertyFixed(lv_target, c_unitPropEnergy, UnitGetPropertyFixed(lv_caster, c_unitPropEnergy, c_unitPropCurrent));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AOmiMarker_Init () {
    gt_AOmiMarker = TriggerCreate("gt_AOmiMarker_Func");
    TriggerAddEventPlayerEffectUsed(gt_AOmiMarker, c_playerAny, "AOmiSpawnEffect");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Harvest
//--------------------------------------------------------------------------------------------------
bool gt_Harvest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_targetUnit;
    string lv_targetUnitType;
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_targetUnitType = UnitGetType(lv_targetUnit);
    lv_value = FixedToInt((IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_targetUnitType, "KillResource[" + IntToString(3) + "]", lv_player)) * 1.4));

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(lv_player, c_playerPropCustom, c_playerPropOperAdd, lv_value);
    gf_KillScoreAdd(lv_player, lv_value);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Harvest_Init () {
    gt_Harvest = TriggerCreate("gt_Harvest_Func");
    TriggerAddEventPlayerEffectUsed(gt_Harvest, c_playerAny, "Ahr3TriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pillage
//--------------------------------------------------------------------------------------------------
bool gt_Pillage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_value = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "Asal", "DamageResponse.Cost.Resource[" + IntToString(3) + "]", lv_player);

    // Actions
    if (!runActions) {
        return true;
    }

    gf_KillScoreAdd(lv_player, (-lv_value));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Pillage_Init () {
    gt_Pillage = TriggerCreate("gt_Pillage_Func");
    TriggerAddEventPlayerEffectUsed(gt_Pillage, c_playerAny, "AsalTriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pillage 2
//--------------------------------------------------------------------------------------------------
bool gt_Pillage2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_value = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "Asa2", "DamageResponse.Cost.Resource[" + IntToString(3) + "]", lv_player);

    // Actions
    if (!runActions) {
        return true;
    }

    gf_KillScoreAdd(lv_player, (-lv_value));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Pillage2_Init () {
    gt_Pillage2 = TriggerCreate("gt_Pillage2_Func");
    TriggerAddEventPlayerEffectUsed(gt_Pillage2, c_playerAny, "Asa2TriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adef - Defend - Init Register
//--------------------------------------------------------------------------------------------------
bool gt_AdefDefendInitRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_adefGroup, lv_unit) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GAw3_AddEventUnitDamaged(gt_AdefDefendDamaged, lv_unit, c_unitDamageTypeRanged, c_unitDamageNonFatal, null);
    UnitGroupAdd(gv_adefGroup, lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdefDefendInitRegister_Init () {
    gt_AdefDefendInitRegister = TriggerCreate("gt_AdefDefendInitRegister_Func");
    TriggerAddEventUnitBehaviorChange(gt_AdefDefendInitRegister, null, "Adef", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adef - Defend - Damaged
//--------------------------------------------------------------------------------------------------
bool gt_AdefDefendDamaged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_weapon;
    string lv_lM;
    string lv_atkType;
    fixed lv_triggerDamge;
    fixed lv_actualDamge;
    fixed lv_attemptedDamage;
    unit lv_unit;
    unit lv_source;
    unit lv_triggerAttaker;
    string lv_behavior;
    string lv_instance;
    fixed lv_deflectChance;
    fixed lv_damageTaken;
    string lv_deflectedEffect;
    unit lv_target;
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup autoD63BAD8F_g;
    int autoD63BAD8F_u;

    // Variable Initialization
    lv_weapon = ((EventUnitDamageEffect()));
    lv_lM = (((lv_weapon) + "LM"));
    lv_atkType = GAw3_WeaponAtkType(lv_weapon);
    lv_actualDamge = EventUnitDamageAmount();
    lv_attemptedDamage = EventUnitDamageAbsorbed();
    lv_unit = EventUnit();
    lv_source = EventUnitDamageSourceUnit();
    lv_triggerAttaker = lv_source;
    lv_behavior = "Adef";
    lv_instance = ((lv_behavior));
    lv_deflectChance = UserDataGetFixed("AbilityDataDefendElunesGrace", lv_instance, "Chance To Deflect (Piercing)", 1);
    lv_damageTaken = UserDataGetFixed("AbilityDataDefendElunesGrace", lv_instance, "Damage Taken (Piercing)", 1);
    lv_deflectedEffect = UserDataGetGameLink("AbilityDataDefendElunesGrace", lv_instance, "Deflect Effect", 1);

    // Conditions
    if (testConds) {
        if (!((lv_actualDamge == 0.0))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_unit, lv_behavior) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(lv_source) == false)) {
        lv_triggerAttaker = lv_unit;
    }

    if ((gf_EffectAttackType(EventUnitDamageEffect()) == "DAMAGE_PIERCE")) {
        if ((RandomFixed(0.0, 1.0) <= lv_deflectChance)) {
            UnitCreateEffectUnit(lv_unit, lv_deflectedEffect, lv_unit);
            if ((lv_source != lv_unit)) {
                if ((CatalogEntryIsValid(c_gameCatalogEffect, lv_lM) == false)) {
                    lv_lM = ((lv_weapon));
                }

                autoD63BAD8F_g = UnitGroup(null, UnitGetOwner(lv_source), RegionCircle(UnitGetPosition(lv_unit), 9.0), gv_unitAndCreepFilter, 0);
                autoD63BAD8F_u = UnitGroupCount(autoD63BAD8F_g, c_unitCountAll);
                for (;; autoD63BAD8F_u -= 1) {
                    lv_u = UnitGroupUnitFromEnd(autoD63BAD8F_g, autoD63BAD8F_u);
                    if (lv_u == null) { break; }
                    if ((UnitGetPropertyFixed(lv_u, c_unitPropLife, c_unitPropCurrent) >= UnitGetPropertyFixed(lv_target, c_unitPropLife, c_unitPropCurrent))) {
                        lv_target = lv_u;
                    }

                }
                UnitCreateEffectUnit(lv_unit, lv_lM, lv_target);
            }

        }
        else {
            lv_triggerDamge = (lv_attemptedDamage * lv_damageTaken);
            UnitDamage(lv_triggerAttaker, "TriggerRangedDamge", lv_unit, lv_triggerDamge);
        }
    }
    else {
        lv_triggerDamge = lv_attemptedDamage;
        UnitDamage(lv_triggerAttaker, "TriggerRangedDamge", lv_unit, lv_triggerDamge);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdefDefendDamaged_Init () {
    gt_AdefDefendDamaged = TriggerCreate("gt_AdefDefendDamaged_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amdf - Init - Register
//--------------------------------------------------------------------------------------------------
bool gt_AmdfInitRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_amdfGroup, lv_unit) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GAw3_AddEventUnitDamaged(gt_AmdfDamaged, lv_unit, c_unitDamageTypeRanged, c_unitDamageNonFatal, null);
    UnitGroupAdd(gv_amdfGroup, lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmdfInitRegister_Init () {
    gt_AmdfInitRegister = TriggerCreate("gt_AmdfInitRegister_Func");
    TriggerAddEventUnitBehaviorChange(gt_AmdfInitRegister, null, "Amdf", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amdf - Damaged
//--------------------------------------------------------------------------------------------------
bool gt_AmdfDamaged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_weapon;
    string lv_lM;
    string lv_atkType;
    fixed lv_triggerDamge;
    fixed lv_actualDamge;
    fixed lv_attemptedDamage;
    unit lv_unit;
    unit lv_source;
    unit lv_triggerAttaker;
    string lv_behavior;
    string lv_instance;
    fixed lv_deflectChance;
    fixed lv_damageTaken;
    string lv_deflectedEffect;
    unit lv_target;
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup autoED0135C4_g;
    int autoED0135C4_u;

    // Variable Initialization
    lv_weapon = ((EventUnitDamageEffect()));
    lv_lM = (((lv_weapon) + "LM"));
    lv_atkType = GAw3_WeaponAtkType(lv_weapon);
    lv_actualDamge = EventUnitDamageAmount();
    lv_attemptedDamage = EventUnitDamageAbsorbed();
    lv_unit = EventUnit();
    lv_source = EventUnitDamageSourceUnit();
    lv_triggerAttaker = lv_source;
    lv_behavior = "Amdf";
    lv_instance = ((lv_behavior));
    lv_deflectChance = UserDataGetFixed("AbilityDataDefendElunesGrace", lv_instance, "Chance To Deflect (Magic)", 1);
    lv_damageTaken = UserDataGetFixed("AbilityDataDefendElunesGrace", lv_instance, "Damage Taken (Magic)", 1);
    lv_deflectedEffect = UserDataGetGameLink("AbilityDataDefendElunesGrace", lv_instance, "Deflect Effect", 1);

    // Conditions
    if (testConds) {
        if (!((lv_actualDamge == 0.0))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_unit, lv_behavior) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(lv_source) == false)) {
        lv_triggerAttaker = lv_unit;
    }

    if ((gf_EffectAttackType(EventUnitDamageEffect()) == "DAMAGE_MAGIC")) {
        if ((RandomFixed(0.0, 1.0) <= lv_deflectChance)) {
            UnitCreateEffectUnit(lv_unit, lv_deflectedEffect, lv_unit);
            if ((lv_source != lv_unit)) {
                if ((CatalogEntryIsValid(c_gameCatalogEffect, lv_lM) == false)) {
                    lv_lM = ((lv_weapon));
                }

                autoED0135C4_g = UnitGroup(null, UnitGetOwner(lv_source), RegionCircle(UnitGetPosition(lv_unit), 9.0), gv_unitAndCreepFilter, 0);
                autoED0135C4_u = UnitGroupCount(autoED0135C4_g, c_unitCountAll);
                for (;; autoED0135C4_u -= 1) {
                    lv_u = UnitGroupUnitFromEnd(autoED0135C4_g, autoED0135C4_u);
                    if (lv_u == null) { break; }
                    if ((UnitGetPropertyFixed(lv_u, c_unitPropLife, c_unitPropCurrent) >= UnitGetPropertyFixed(lv_target, c_unitPropLife, c_unitPropCurrent))) {
                        lv_target = lv_u;
                    }

                }
                UnitCreateEffectUnit(lv_unit, lv_lM, lv_target);
            }

        }
        else {
            lv_triggerDamge = (lv_attemptedDamage * lv_damageTaken);
            UnitDamage(lv_triggerAttaker, "TriggerRangedDamge", lv_unit, lv_triggerDamge);
        }
    }
    else {
        lv_triggerDamge = lv_attemptedDamage;
        UnitDamage(lv_triggerAttaker, "TriggerRangedDamge", lv_unit, lv_triggerDamge);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmdfDamaged_Init () {
    gt_AmdfDamaged = TriggerCreate("gt_AmdfDamaged_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Moonstone - Init
//--------------------------------------------------------------------------------------------------
bool gt_MoonstoneInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerWindowCreate(gv_moonstoneTimer, StringExternal("Param/Value/C7A905FA"), true, false);
    gv_moonstoneTimmerWindow = TimerWindowLastCreated();
    TimerWindowShow(gv_moonstoneTimmerWindow, PlayerGroupActive(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoonstoneInit_Init () {
    gt_MoonstoneInit = TriggerCreate("gt_MoonstoneInit_Func");
    TriggerAddEventMapInit(gt_MoonstoneInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Moonstone - Change TOD
//--------------------------------------------------------------------------------------------------
bool gt_MoonstoneChangeTOD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(gv_moonstoneTimer) == 0)) {
        gf_ChangeTOD();
    }

    TimerStart(gv_moonstoneTimer, (TimerGetRemaining(gv_moonstoneTimer)+gv_moonstoneDuration), false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoonstoneChangeTOD_Init () {
    gt_MoonstoneChangeTOD = TriggerCreate("gt_MoonstoneChangeTOD_Func");
    TriggerAddEventPlayerEffectUsed(gt_MoonstoneChangeTOD, c_playerAny, "AIct");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Moonstone - Restore TOD
//--------------------------------------------------------------------------------------------------
bool gt_MoonstoneRestoreTOD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_RestoreTOD();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoonstoneRestoreTOD_Init () {
    gt_MoonstoneRestoreTOD = TriggerCreate("gt_MoonstoneRestoreTOD_Func");
    TriggerAddEventTimer(gt_MoonstoneRestoreTOD, gv_moonstoneTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Call Tide - Init
//--------------------------------------------------------------------------------------------------
bool gt_CallTideInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerWindowCreate(gv_callTideTimer, StringExternal("Param/Value/CC4C1E4D"), true, false);
    gv_callTideTimmerWindow = TimerWindowLastCreated();
    TimerWindowShow(gv_callTideTimmerWindow, PlayerGroupActive(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CallTideInit_Init () {
    gt_CallTideInit = TriggerCreate("gt_CallTideInit_Func");
    TriggerAddEventMapInit(gt_CallTideInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Call Tide - Change Water State
//--------------------------------------------------------------------------------------------------
bool gt_CallTideChangeWaterState_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(gv_callTideTimer) == 0)) {
        gf_ChangeWaterState();
    }

    TimerStart(gv_callTideTimer, (TimerGetRemaining(gv_callTideTimer)+gv_callTideDuration), false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CallTideChangeWaterState_Init () {
    gt_CallTideChangeWaterState = TriggerCreate("gt_CallTideChangeWaterState_Func");
    TriggerAddEventPlayerEffectUsed(gt_CallTideChangeWaterState, c_playerAny, "CallTide");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Call Tide - Restore Water State
//--------------------------------------------------------------------------------------------------
bool gt_CallTideRestoreWaterState_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_RestoreWaterState(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CallTideRestoreWaterState_Init () {
    gt_CallTideRestoreWaterState = TriggerCreate("gt_CallTideRestoreWaterState_Func");
    TriggerAddEventTimer(gt_CallTideRestoreWaterState, gv_callTideTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TideAddRemoveSwimmingPeriodic
//--------------------------------------------------------------------------------------------------
bool gt_TideAddRemoveSwimmingPeriodic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoB515EBFF_g;
    int autoB515EBFF_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB515EBFF_g = UnitGroup(null, c_playerAny, gv_battlefield, gv_unitAndCreepFilter, 0);
    autoB515EBFF_u = UnitGroupCount(autoB515EBFF_g, c_unitCountAll);
    for (;; autoB515EBFF_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoB515EBFF_g, autoB515EBFF_u);
        if (lv_unit == null) { break; }
        if ((TechTreeUpgradeCount(UnitGetOwner(lv_unit), "Tide", c_techCountCompleteOnly) == 1) && (WorldHeight(c_heightMapGround, UnitGetPosition(lv_unit)) < 10.5)) {
            PlayerCreateEffectUnit(UnitGetOwner(lv_unit), "SwimmingSwitch", lv_unit);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TideAddRemoveSwimmingPeriodic_Init () {
    gt_TideAddRemoveSwimmingPeriodic = TriggerCreate("gt_TideAddRemoveSwimmingPeriodic_Func");
    TriggerEnable(gt_TideAddRemoveSwimmingPeriodic, false);
    TriggerAddEventTimePeriodic(gt_TideAddRemoveSwimmingPeriodic, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitChangeOwner2
//--------------------------------------------------------------------------------------------------
bool gt_UnitChangeOwner2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ReserveUnitCreation2(EventUnitOwnerOld(), FixedToInt(UnitGetCustomValue(EventUnit(), gv_customValuePhalanx)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitChangeOwner2_Init () {
    gt_UnitChangeOwner2 = TriggerCreate("gt_UnitChangeOwner2_Func");
    TriggerEnable(gt_UnitChangeOwner2, false);
    TriggerAddEventUnitChangeOwner(gt_UnitChangeOwner2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitDied2
//--------------------------------------------------------------------------------------------------
bool gt_UnitDied2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ReserveUnitCreation2(EventPlayer(), FixedToInt(UnitGetCustomValue(EventUnit(), gv_customValuePhalanx)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitDied2_Init () {
    gt_UnitDied2 = TriggerCreate("gt_UnitDied2_Func");
    TriggerEnable(gt_UnitDied2, false);
    TriggerAddEventUnitDied(gt_UnitDied2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlayerLeft
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeft_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_aIGroup, EventPlayer());
    gf_WorkerExchangeSetAutoCast(EventPlayer(), true);
    TextExpressionSetToken("Param/Expression/831164FF", "A", TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
    UIDisplayMessage(gv_uIPlayergroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/831164FF"));
    PlayerSetDifficulty(EventPlayer(), 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeft_Init () {
    gt_PlayerLeft = TriggerCreate("gt_PlayerLeft_Func");
    TriggerAddEventPlayerLeft(gt_PlayerLeft, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BuildingCreated
//--------------------------------------------------------------------------------------------------
bool gt_BuildingCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_abil;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abil = EventUnitCreatedAbil();
    lv_unit = EventUnitCreatedUnit();

    // Conditions
    if (testConds) {
        if (!((AbilityClass(lv_abil) == c_classIdCAbilBuild))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetFacing(lv_unit, 270.0, 0.0);
    UnitBehaviorAddPlayer(lv_unit, "AW2_Building", UnitGetOwner(lv_unit), 1);
    Wait(gv_minimumPeriod, c_timeGame);
    gf_UnitTypeSet(gf_PointInBuildingRegionGetBuildingRegion(UnitGetPosition(lv_unit)), gf_PointInBuildingRegionGetPhalanx(UnitGetPosition(lv_unit)), gv_playerAtBuildingRegion[gf_PointInBuildingRegionGetBuildingRegion(UnitGetPosition(lv_unit))]);
    gf_PreviewUpdate(gv_playerAtBuildingRegion[gf_PointInBuildingRegionGetBuildingRegion(UnitGetPosition(lv_unit))], gf_PointInBuildingRegionGetPhalanx(UnitGetPosition(lv_unit)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildingCreated_Init () {
    gt_BuildingCreated = TriggerCreate("gt_BuildingCreated_Func");
    TriggerEnable(gt_BuildingCreated, false);
    TriggerAddEventUnitCreated(gt_BuildingCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitAbilityMorph
//--------------------------------------------------------------------------------------------------
bool gt_UnitAbilityMorph_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_abil;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abil = AbilityCommandGetAbility(EventUnitAbility());
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(gv_minimumPeriod, c_timeGame);
    gf_UnitTypeSet(gf_PointInBuildingRegionGetBuildingRegion(UnitGetPosition(lv_unit)), gf_PointInBuildingRegionGetPhalanx(UnitGetPosition(lv_unit)), gv_playerAtBuildingRegion[gf_PointInBuildingRegionGetBuildingRegion(UnitGetPosition(lv_unit))]);
    gf_PreviewUpdate(gv_playerAtBuildingRegion[gf_PointInBuildingRegionGetBuildingRegion(UnitGetPosition(lv_unit))], gf_PointInBuildingRegionGetPhalanx(UnitGetPosition(lv_unit)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitAbilityMorph_Init () {
    gt_UnitAbilityMorph = TriggerCreate("gt_UnitAbilityMorph_Func");
    TriggerEnable(gt_UnitAbilityMorph, false);
    TriggerAddEventUnitAbility(gt_UnitAbilityMorph, null, null, c_abilMorphStageAbilsEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PhalanxCreated
//--------------------------------------------------------------------------------------------------
bool gt_PhalanxCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_behavior;
    string lv_ability;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(EventUnitCreatedUnit()) == true) && (UnitFilterMatch(EventUnitCreatedUnit(), lv_player, gv_phalanxFilter) == true)) {
        gv_phalanxIndex[lv_player] += 1;
        UnitSetCustomValue(EventUnitCreatedUnit(), gv_customValuePhalanx, gv_phalanxIndex[lv_player]);
        UnitSetFacing(EventUnitCreatedUnit(), gf_PointGetVenueFacing(UnitGetPosition(EventUnitCreatedUnit())), 0.0);
        gv_previewer[lv_player][gv_phalanxIndex[lv_player]] = EventUnitCreatedUnit();
        gf_PreviewUpdate(lv_player, gv_phalanxIndex[lv_player]);
        gv_phalanx[lv_player][gv_phalanxIndex[lv_player]] = EventUnitCreatedUnit();
        gf_PhalanxBuffSet(EventUnitCreatedUnit(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PhalanxCreated_Init () {
    gt_PhalanxCreated = TriggerCreate("gt_PhalanxCreated_Func");
    TriggerEnable(gt_PhalanxCreated, false);
    TriggerAddEventUnitCreated(gt_PhalanxCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PortalCreated
//--------------------------------------------------------------------------------------------------
bool gt_PortalCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(EventUnitCreatedUnit()) == true) && (UnitFilterMatch(EventUnitCreatedUnit(), lv_player, gv_portalFilter) == true)) {
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PortalCreated_Init () {
    gt_PortalCreated = TriggerCreate("gt_PortalCreated_Func");
    TriggerEnable(gt_PortalCreated, false);
    TriggerAddEventUnitCreated(gt_PortalCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PhalanxBuffChange
//--------------------------------------------------------------------------------------------------
bool gt_PhalanxBuffChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_phalanx;
    int lv_change;

    // Automatic Variable Declarations
    int auto051587E5_val;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());
    lv_phalanx = FixedToInt(UnitGetCustomValue(EventUnit(), gv_customValuePhalanx));
    lv_change = EventUnitBehaviorChange();

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), lv_player, gv_phalanxFilter) == true))) {
            return false;
        }

        if (!((gf_BehaviorIsPhalanxBuff(EventUnitBehavior()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto051587E5_val = lv_change;
    if (auto051587E5_val == c_unitBehaviorChangeActivate) {
        gv_phalanxBuff[lv_player][lv_phalanx] = EventUnitBehavior();
    }
    else if (auto051587E5_val == c_unitBehaviorChangeDeactivate) {
        gv_phalanxBuff[lv_player][lv_phalanx] = null;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PhalanxBuffChange_Init () {
    gt_PhalanxBuffChange = TriggerCreate("gt_PhalanxBuffChange_Func");
    TriggerAddEventUnitBehaviorChange(gt_PhalanxBuffChange, null, null, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_PhalanxBuffChange, null, null, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreateReserveUnit
//--------------------------------------------------------------------------------------------------
bool gt_CreateReserveUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ReserveUnitCreation(EventPlayerEffectUsedUnit(c_effectUnitCaster), EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), gv_customValuePhalanx)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateReserveUnit_Init () {
    gt_CreateReserveUnit = TriggerCreate("gt_CreateReserveUnit_Func");
    TriggerEnable(gt_CreateReserveUnit, false);
    TriggerAddEventPlayerEffectUsed(gt_CreateReserveUnit, c_playerAny, "CreateReserveUnitTriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: IssueOrderPeriodic
//--------------------------------------------------------------------------------------------------
bool gt_IssueOrderPeriodic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int auto8AC166A9_ae = gv_playerCount;
    const int auto8AC166A9_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = 1;
    for ( ; ( (auto8AC166A9_ai >= 0 && lv_player <= auto8AC166A9_ae) || (auto8AC166A9_ai < 0 && lv_player >= auto8AC166A9_ae) ) ; lv_player += auto8AC166A9_ai ) {
        gf_IssueOrder(true, lv_player);
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IssueOrderPeriodic_Init () {
    gt_IssueOrderPeriodic = TriggerCreate("gt_IssueOrderPeriodic_Func");
    TriggerEnable(gt_IssueOrderPeriodic, false);
    TriggerAddEventTimePeriodic(gt_IssueOrderPeriodic, 4.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AutoCastAlwaysOnEnable
//--------------------------------------------------------------------------------------------------
bool gt_AutoCastAlwaysOnEnable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitFilterMatch(lv_unit, UnitGetOwner(lv_unit), gv_unitFilter) == true)) {
        UnitIssueOrder(lv_unit, OrderSetAutoCast(EventUnitAbility(), true), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutoCastAlwaysOnEnable_Init () {
    gt_AutoCastAlwaysOnEnable = TriggerCreate("gt_AutoCastAlwaysOnEnable_Func");
    TriggerEnable(gt_AutoCastAlwaysOnEnable, false);
    TriggerAddEventUnitAbilityAutoCastChange(gt_AutoCastAlwaysOnEnable, null, null, c_unitAbilAutoCastChangeAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CountUnit
//--------------------------------------------------------------------------------------------------
bool gt_CountUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;
    int lv_team;
    int lv_teamMember;
    int[gv_teamMaximumCount + 1] lv_teamMemberCountAlive;
    int lv_teamCountAlive;
    int[gv_teamMaximumCount + 1] lv_teamAlive;
    bool lv_wait;

    // Automatic Variable Declarations
    int autoB28D99F4_ae;
    const int autoB28D99F4_ai = 1;
    int auto35B8E170_ae;
    const int auto35B8E170_ai = 1;
    int auto3E46C7A4_ae;
    const int auto3E46C7A4_ai = 1;
    int autoFDA1AC7B_ae;
    const int autoFDA1AC7B_ai = 1;
    int auto206E7D71_ae;
    const int auto206E7D71_ai = 1;
    int autoC3985A16_ae;
    const int autoC3985A16_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB28D99F4_ae = gv_teamCount;
    lv_team = 1;
    for ( ; ( (autoB28D99F4_ai >= 0 && lv_team <= autoB28D99F4_ae) || (autoB28D99F4_ai < 0 && lv_team >= autoB28D99F4_ae) ) ; lv_team += autoB28D99F4_ai ) {
        auto35B8E170_ae = gv_teamMemberCount;
        lv_teamMember = 1;
        for ( ; ( (auto35B8E170_ai >= 0 && lv_teamMember <= auto35B8E170_ae) || (auto35B8E170_ai < 0 && lv_teamMember >= auto35B8E170_ae) ) ; lv_teamMember += auto35B8E170_ai ) {
            lv_player = PlayerGroupPlayer(gv_teamGroup[lv_team], lv_teamMember);
            if ((UnitGroupCount(UnitGroup(null, lv_player, gv_battlefield, gv_phalanxFilter, 0), c_unitCountAlive) > 0)) {
                lv_teamMemberCountAlive[lv_team] += 1;
            }

        }
    }
    auto3E46C7A4_ae = gv_teamCount;
    lv_team = 1;
    for ( ; ( (auto3E46C7A4_ai >= 0 && lv_team <= auto3E46C7A4_ae) || (auto3E46C7A4_ai < 0 && lv_team >= auto3E46C7A4_ae) ) ; lv_team += auto3E46C7A4_ai ) {
        if ((lv_teamMemberCountAlive[lv_team] > 0)) {
            lv_teamCountAlive += 1;
            lv_teamAlive[lv_teamCountAlive] = lv_team;
        }

    }
    if ((gv_isBonusRound == false)) {
        if ((lv_teamCountAlive == 1)) {
            gv_teamAlive[1] = lv_teamAlive[1];
            if ((gf_IsFinalRound(gv_round) == true)) {
                if ((gv_round != gv_roundCount)) {
                    autoFDA1AC7B_ae = gv_teamMemberCount;
                    lv_teamMember = 1;
                    for ( ; ( (autoFDA1AC7B_ai >= 0 && lv_teamMember <= autoFDA1AC7B_ae) || (autoFDA1AC7B_ai < 0 && lv_teamMember >= autoFDA1AC7B_ae) ) ; lv_teamMember += autoFDA1AC7B_ai ) {
                        gf_PlayerAtFinalVenueUpdate(PlayerGroupPlayer(gv_teamGroup[gv_teamAlive[1]], lv_teamMember));
                    }
                }

            }

            gf_DisplayMessageAll(gv_round);
            if ((gf_IsFinalRound(gv_round) == true)) {
                lv_wait = false;
            }
            else {
                lv_wait = true;
            }
            if ((gv_round == gv_roundCount)) {
                auto206E7D71_ae = lv_teamCountAlive;
                lv_team = 1;
                for ( ; ( (auto206E7D71_ai >= 0 && lv_team <= auto206E7D71_ae) || (auto206E7D71_ai < 0 && lv_team >= auto206E7D71_ae) ) ; lv_team += auto206E7D71_ai ) {
                    gf_GameOver(lv_teamAlive[lv_team]);
                }
            }
            else {
                autoC3985A16_ae = lv_teamCountAlive;
                lv_team = 1;
                for ( ; ( (autoC3985A16_ai >= 0 && lv_team <= autoC3985A16_ae) || (autoC3985A16_ai < 0 && lv_team >= autoC3985A16_ae) ) ; lv_team += autoC3985A16_ai ) {
                    gf_CountUnitEnable(false);
                    gf_CountUnit(lv_teamAlive[lv_team], lv_wait);
                }
                TriggerExecute(gt_CountUnitControl, true, false);
            }
        }

    }
    else {
        if ((lv_teamCountAlive == 0)) {
            TriggerExecute(gt_CountUnitControl, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CountUnit_Init () {
    gt_CountUnit = TriggerCreate("gt_CountUnit_Func");
    TriggerEnable(gt_CountUnit, false);
    TriggerAddEventPlayerEffectUsed(gt_CountUnit, c_playerAny, "CountUnitTriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CountUnitControl
//--------------------------------------------------------------------------------------------------
bool gt_CountUnitControl_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CountUnitControl_Init () {
    gt_CountUnitControl = TriggerCreate("gt_CountUnitControl_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitDied
//--------------------------------------------------------------------------------------------------
bool gt_UnitDied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unit lv_killUnit;
    int lv_killPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_killUnit = libNtve_gf_KillingUnit();
    lv_killPlayer = libNtve_gf_KillingPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(lv_unit, UnitGetOwner(lv_unit), UnitFilter(0, (1 << (c_targetFilterHallucination - 32)), 0, 0)) == false))) {
            return false;
        }

        if (!((lv_killPlayer != 16))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(lv_killUnit) == true)) {
        if ((lv_killPlayer != UnitGetOwner(lv_unit)) && ((UnitFilterMatch(lv_killUnit, lv_killPlayer, gv_unitFilterScore) == true) || (UnitFilterMatch(lv_killUnit, lv_killPlayer, gv_creepFilterCcore) == true))) {
            gf_KillScoreUnitAndItemAdd(lv_killPlayer, lv_unit);
            gf_KillResourceItemAdd(lv_killPlayer, lv_unit);
        }

    }
    else {
        gf_KillScoreUnitAndItemAdd(lv_killPlayer, lv_unit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitDied_Init () {
    gt_UnitDied = TriggerCreate("gt_UnitDied_Func");
    TriggerEnable(gt_UnitDied, false);
    TriggerAddEventUnitDied(gt_UnitDied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DebugControlPressed
//--------------------------------------------------------------------------------------------------
bool gt_DebugControlPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugControlPressed_Init () {
    gt_DebugControlPressed = TriggerCreate("gt_DebugControlPressed_Func");
    TriggerEnable(gt_DebugControlPressed, false);
    TriggerAddEventKeyPressed(gt_DebugControlPressed, c_playerAny, c_keyF5, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DebugKeyPressed
//--------------------------------------------------------------------------------------------------
bool gt_DebugKeyPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    int autoE60B8AEC_val;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    autoE60B8AEC_val = EventKeyPressed();
    if (autoE60B8AEC_val == c_keyF7) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "hpea", c_unitCreateIgnorePlacement, lv_player, PlayerStartLocation(lv_player));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ewsp", c_unitCreateIgnorePlacement, lv_player, PlayerStartLocation(lv_player));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "opeo", c_unitCreateIgnorePlacement, lv_player, PlayerStartLocation(lv_player));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "uaco", c_unitCreateIgnorePlacement, lv_player, PlayerStartLocation(lv_player));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "nmpe", c_unitCreateIgnorePlacement, lv_player, PlayerStartLocation(lv_player));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ncg3", c_unitCreateIgnorePlacement, lv_player, PlayerStartLocation(lv_player));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "nhew", c_unitCreateIgnorePlacement, lv_player, PlayerStartLocation(lv_player));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ncpn", c_unitCreateIgnorePlacement, lv_player, PlayerStartLocation(lv_player));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dragonspawn", c_unitCreateIgnorePlacement, lv_player, PlayerStartLocation(lv_player));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "npfl", c_unitCreateIgnorePlacement, lv_player, PlayerStartLocation(lv_player));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ndrl", c_unitCreateIgnorePlacement, lv_player, PlayerStartLocation(lv_player));
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "BuildArmyFinal", 1);
        PlayerModifyPropertyInt(lv_player, c_playerPropTerrazine, c_playerPropOperSetTo, 100000);
        PlayerModifyPropertyInt(lv_player, c_playerPropCustom, c_playerPropOperSetTo, 100000);
        PlayerGroupClear(gv_aIGroup);
    }
    else if (autoE60B8AEC_val == c_keyP) {
        SoundPlayForPlayer(SoundLink(gf_RaceGetWarcry("Human"), c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink(gf_RaceGetHorn("Human"), c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("HornOfCenariusSound", c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
    }
    else if (autoE60B8AEC_val == c_keyO) {
        SoundPlayForPlayer(SoundLink(gf_RaceGetWarcry("Orc"), c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink(gf_RaceGetHorn("Orc"), c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("HornOfCenariusSound", c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
    }
    else if (autoE60B8AEC_val == c_keyI) {
        SoundPlayForPlayer(SoundLink(gf_RaceGetWarcry("NightElf"), c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink(gf_RaceGetHorn("NightElf"), c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("HornOfCenariusSound", c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
    }
    else if (autoE60B8AEC_val == c_keyU) {
        SoundPlayForPlayer(SoundLink(gf_RaceGetWarcry("Undead"), c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink(gf_RaceGetHorn("Undead"), c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("HornOfCenariusSound", c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
    }
    else if (autoE60B8AEC_val == c_keyY) {
        SoundPlayForPlayer(SoundLink(gf_RaceGetWarcry("Naga"), c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink(gf_RaceGetHorn("Naga"), c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("HornOfCenariusSound", c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
    }
    else if (autoE60B8AEC_val == c_keyL) {
        SoundPlayForPlayer(SoundLink(gf_RaceGetWarcry("Goblin"), c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink(gf_RaceGetHorn("Goblin"), c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("HornOfCenariusSound", c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
    }
    else if (autoE60B8AEC_val == c_keyK) {
        SoundPlayForPlayer(SoundLink(gf_RaceGetWarcry("BloodElf"), c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink(gf_RaceGetHorn("BloodElf"), c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("HornOfCenariusSound", c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
    }
    else if (autoE60B8AEC_val == c_keyJ) {
        SoundPlayForPlayer(SoundLink(gf_RaceGetWarcry("ChaosOrc"), c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink(gf_RaceGetHorn("ChaosOrc"), c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("HornOfCenariusSound", c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
    }
    else if (autoE60B8AEC_val == c_keyH) {
        SoundPlayForPlayer(SoundLink(gf_RaceGetWarcry("Dragon"), c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink(gf_RaceGetHorn("Dragon"), c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("HornOfCenariusSound", c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
    }
    else if (autoE60B8AEC_val == c_keyM) {
        SoundPlayForPlayer(SoundLink(gf_RaceGetWarcry("Demon"), c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink(gf_RaceGetHorn("Demon"), c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("HornOfCenariusSound", c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
    }
    else if (autoE60B8AEC_val == c_keyN) {
        SoundPlayForPlayer(SoundLink(gf_RaceGetWarcry("Draenei"), c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink(gf_RaceGetHorn("Draenei"), c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("HornOfCenariusSound", c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugKeyPressed_Init () {
    gt_DebugKeyPressed = TriggerCreate("gt_DebugKeyPressed_Func");
    TriggerEnable(gt_DebugKeyPressed, false);
    TriggerAddEventKeyPressed(gt_DebugKeyPressed, c_playerAny, c_keyNone, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DebugUnitRemove
//--------------------------------------------------------------------------------------------------
bool gt_DebugUnitRemove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto38A61D00_g;
    int auto38A61D00_u;
    unit auto38A61D00_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto38A61D00_g = UnitGroupSelected(EventPlayer());
    auto38A61D00_u = UnitGroupCount(auto38A61D00_g, c_unitCountAll);
    for (;; auto38A61D00_u -= 1) {
        auto38A61D00_var = UnitGroupUnitFromEnd(auto38A61D00_g, auto38A61D00_u);
        if (auto38A61D00_var == null) { break; }
        UnitRemove(auto38A61D00_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugUnitRemove_Init () {
    gt_DebugUnitRemove = TriggerCreate("gt_DebugUnitRemove_Func");
    TriggerEnable(gt_DebugUnitRemove, false);
    TriggerAddEventKeyPressed(gt_DebugUnitRemove, c_playerAny, c_keyR, true, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DebugUnitRemoveAll
//--------------------------------------------------------------------------------------------------
bool gt_DebugUnitRemoveAll_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    const int auto632EB304_ae = gv_playerCount;
    const int auto632EB304_ai = 1;
    unitgroup autoC9DFDBBC_g;
    int autoC9DFDBBC_u;
    unit autoC9DFDBBC_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(gt_IssueOrderPeriodic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p = 1;
    for ( ; ( (auto632EB304_ai >= 0 && lv_p <= auto632EB304_ae) || (auto632EB304_ai < 0 && lv_p >= auto632EB304_ae) ) ; lv_p += auto632EB304_ai ) {
        autoC9DFDBBC_g = UnitGroup(null, lv_p, gv_battlefield, gv_unitFilter, 0);
        autoC9DFDBBC_u = UnitGroupCount(autoC9DFDBBC_g, c_unitCountAll);
        for (;; autoC9DFDBBC_u -= 1) {
            autoC9DFDBBC_var = UnitGroupUnitFromEnd(autoC9DFDBBC_g, autoC9DFDBBC_u);
            if (autoC9DFDBBC_var == null) { break; }
            UnitRemove(autoC9DFDBBC_var);
        }
        Wait(0.125, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugUnitRemoveAll_Init () {
    gt_DebugUnitRemoveAll = TriggerCreate("gt_DebugUnitRemoveAll_Func");
    TriggerEnable(gt_DebugUnitRemoveAll, false);
    TriggerAddEventKeyPressed(gt_DebugUnitRemoveAll, c_playerAny, c_keyF5, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DebugRoundPressed
//--------------------------------------------------------------------------------------------------
bool gt_DebugRoundPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoF6D1D5EC_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoF6D1D5EC_val = EventKeyPressed();
    if (autoF6D1D5EC_val == c_key1) {
        gv_debugRound = 1;
    }
    else if (autoF6D1D5EC_val == c_key2) {
        gv_debugRound = 2;
    }
    else if (autoF6D1D5EC_val == c_key3) {
        gv_debugRound = 3;
    }
    else if (autoF6D1D5EC_val == c_key4) {
        gv_debugRound = 4;
    }
    else if (autoF6D1D5EC_val == c_key5) {
        gv_debugRound = 5;
    }
    else if (autoF6D1D5EC_val == c_key6) {
        gv_debugRound = 6;
    }
    else if (autoF6D1D5EC_val == c_key7) {
        gv_debugRound = 7;
    }
    else if (autoF6D1D5EC_val == c_key8) {
        gv_debugRound = 8;
    }
    else if (autoF6D1D5EC_val == c_key9) {
        gv_debugRound = 9;
    }
    else if (autoF6D1D5EC_val == c_key0) {
        gv_debugRound = 10;
    }
    else {
    }
    if ((EventKeyControl() == true)) {
        gv_isBonusRound = true;
    }
    else {
        gv_isBonusRound = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugRoundPressed_Init () {
    gt_DebugRoundPressed = TriggerCreate("gt_DebugRoundPressed_Func");
    TriggerEnable(gt_DebugRoundPressed, false);
    TriggerAddEventKeyPressed(gt_DebugRoundPressed, c_playerAny, c_keyNone, true, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_MapInizialization_Init();
    gt_VenueInizialization_Init();
    gt_BuidingRegionInizialization_Init();
    gt_PreviewerPointInizialization_Init();
    gt_RoundInitialization_Init();
    gt_PlayerColorInitialization_Init();
    gt_ShowPlayerHandle_Init();
    gt_ShowPlayerDifficultyAll_Init();
    gt_GameAttributeInizialization_Init();
    gt_AllianceInizialization_Init();
    gt_ScoreBoardInizialization_Init();
    gt_TimerInizialization_Init();
    gt_PlayerInizialization_Init();
    gt_AsplSearch_Init();
    gt_AsplSplit_Init();
    gt_AimpImpact_Init();
    gt_AbofImpact_Init();
    gt_TimedLifeFateTower_Init();
    gt_DreamIllusion_Init();
    gt_Transmute_Init();
    gt_AOmiRemoveAllNonPermanent_Init();
    gt_AOmiLaunch_Init();
    gt_AOmiMarker_Init();
    gt_Harvest_Init();
    gt_Pillage_Init();
    gt_Pillage2_Init();
    gt_AdefDefendInitRegister_Init();
    gt_AdefDefendDamaged_Init();
    gt_AmdfInitRegister_Init();
    gt_AmdfDamaged_Init();
    gt_MoonstoneInit_Init();
    gt_MoonstoneChangeTOD_Init();
    gt_MoonstoneRestoreTOD_Init();
    gt_CallTideInit_Init();
    gt_CallTideChangeWaterState_Init();
    gt_CallTideRestoreWaterState_Init();
    gt_TideAddRemoveSwimmingPeriodic_Init();
    gt_UnitChangeOwner2_Init();
    gt_UnitDied2_Init();
    gt_PlayerLeft_Init();
    gt_BuildingCreated_Init();
    gt_UnitAbilityMorph_Init();
    gt_PhalanxCreated_Init();
    gt_PortalCreated_Init();
    gt_PhalanxBuffChange_Init();
    gt_CreateReserveUnit_Init();
    gt_IssueOrderPeriodic_Init();
    gt_AutoCastAlwaysOnEnable_Init();
    gt_CountUnit_Init();
    gt_CountUnitControl_Init();
    gt_UnitDied_Init();
    gt_DebugControlPressed_Init();
    gt_DebugKeyPressed_Init();
    gt_DebugUnitRemove_Init();
    gt_DebugUnitRemoveAll_Init();
    gt_DebugRoundPressed_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
