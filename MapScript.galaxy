//==================================================================================================
// 
// Generated Map Script
// 
// Name:   ????????????II
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "LibGAw3"
include "LibGAwX"

//--------------------------------------------------------------------------------------------------
// Library: Wars
//--------------------------------------------------------------------------------------------------
// Constants
const int lib1_gv_playerMaximumCount = 8;
const int lib1_gv_teamMaximumCount = 8;
const int lib1_gv_teamMemberMaximumCount = 2;
const int lib1_gv_teamRoundMaximumCount = 7;
const int lib1_gv_roundMaximumCount = 7;
const int lib1_gv_venueMaximumCount = 8;
const int lib1_gv_buildingRegionMaximumCount = 24;
const int lib1_gv_phalanxMaximumCount = 3;

// Variable Declarations
bool lib1_gv_debugUI;
int lib1_gv_teamCount;
int lib1_gv_teamMemberCount;
int lib1_gv_teamRoundCount;
int lib1_gv_roundCount;
playergroup[lib1_gv_teamMaximumCount + 1] lib1_gv_teamGroup;
playergroup[lib1_gv_teamMaximumCount + 1] lib1_gv_mirrorTeamGroup;
region[lib1_gv_venueMaximumCount + 1] lib1_gv_venue;
region[lib1_gv_buildingRegionMaximumCount + 1][lib1_gv_phalanxMaximumCount + 1] lib1_gv_buildingRegion;
int[lib1_gv_venueMaximumCount + 1][lib1_gv_teamRoundMaximumCount + 1] lib1_gv_teamAtVenue;
int[lib1_gv_venueMaximumCount + 1][lib1_gv_roundMaximumCount + 1] lib1_gv_playerAtVenue;

// Function Declarations
region lib1_gf_IndexGetVenue (int lp_index);
int lib1_gf_PlayerGetMirrorPlayer (int lp_player);
void lib1_gf_SetVenue (region lp_region, int lp_index);
void lib1_gf_SetBuildingRegion (region lp_region, int lp_index, int lp_phalanx);
void lib1_gf_MirrorUnitPosition (int lp_round);
void lib1_gf_EnableDebugMode (string lp_gameValue);

// Trigger Declarations
trigger lib1_gt_ModInizialization;
trigger lib1_gt_GameModeInizialization;
trigger lib1_gt_AllianceInizialization;
trigger lib1_gt_TeamInizialization;
trigger lib1_gt_PlayerInizialization;

// Library Initialization
void lib1_InitVariables ();

//--------------------------------------------------------------------------------------------------
// Library: Wars
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool lib1_InitVariables_completed = false;

void lib1_InitVariables () {
    int init_i;

    if (lib1_InitVariables_completed) {
        return;
    }

    lib1_InitVariables_completed = true;

    for (init_i = 0; init_i <= lib1_gv_teamMaximumCount; init_i += 1) {
        lib1_gv_teamGroup[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= lib1_gv_teamMaximumCount; init_i += 1) {
        lib1_gv_mirrorTeamGroup[init_i] = PlayerGroupEmpty();
    }
}

// Functions
region lib1_gf_IndexGetVenue (int lp_index) {
    // Implementation
    return lib1_gv_venue[lp_index];
}

int lib1_gf_PlayerGetMirrorPlayer (int lp_player) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    lv_player = (lp_player+8);
    return lv_player;
}

void lib1_gf_SetVenue (region lp_region, int lp_index) {
    // Implementation
    lib1_gv_venue[lp_index] = lp_region;
}

void lib1_gf_SetBuildingRegion (region lp_region, int lp_index, int lp_phalanx) {
    // Implementation
    lib1_gv_buildingRegion[lp_index][lp_phalanx] = lp_region;
}

void lib1_gf_MirrorUnitPosition (int lp_round) {
    int autoFB30EC6C_ae;
    int autoFB30EC6C_ai;
    int autoA11FEFA2_n;
    int autoA11FEFA2_i;
    int autoE420D1A9_n;
    int autoE420D1A9_i;
    int auto72F81968_n;
    int auto72F81968_i;

    // Variable Declarations
    int lv_venue;

    // Variable Initialization

    // Implementation
    autoFB30EC6C_ae = lib1_gv_venueMaximumCount;
    autoFB30EC6C_ai = 1;
    lv_venue = 1;
    for ( ; ( (autoFB30EC6C_ai >= 0 && lv_venue <= autoFB30EC6C_ae) || (autoFB30EC6C_ai <= 0 && lv_venue >= autoFB30EC6C_ae) ) ; lv_venue += autoFB30EC6C_ai ) {
        autoA11FEFA2_n = 18;
        for (autoA11FEFA2_i = 1; autoA11FEFA2_i <= autoA11FEFA2_n; autoA11FEFA2_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "unec", c_unitCreateIgnorePlacement, lib1_gf_PlayerGetMirrorPlayer(lib1_gv_playerAtVenue[lv_venue][lp_round]), RegionGetCenter(lib1_gf_IndexGetVenue(lv_venue)));
        }
        autoE420D1A9_n = 18;
        for (autoE420D1A9_i = 1; autoE420D1A9_i <= autoE420D1A9_n; autoE420D1A9_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "hsor", c_unitCreateIgnorePlacement, lib1_gf_PlayerGetMirrorPlayer(lib1_gv_playerAtVenue[lv_venue][lp_round]), RegionGetCenter(lib1_gf_IndexGetVenue(lv_venue)));
        }
        auto72F81968_n = 36;
        for (auto72F81968_i = 1; auto72F81968_i <= auto72F81968_n; auto72F81968_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "hfoo", c_unitCreateIgnorePlacement, lib1_gf_PlayerGetMirrorPlayer(lib1_gv_playerAtVenue[lv_venue][lp_round]), RegionGetCenter(lib1_gf_IndexGetVenue(lv_venue)));
        }
    }
}

void lib1_gf_EnableDebugMode (string lp_gameValue) {
    string autoEFD468EB_val;
    int auto3EF77B1F_ae;
    int auto3EF77B1F_ai;
    int auto77151E02_ae;
    int auto77151E02_ai;

    // Variable Declarations
    int lv_player;
    int lv_team;

    // Variable Initialization

    // Implementation
    lib1_gv_debugUI = true;
    autoEFD468EB_val = lp_gameValue;
    if (autoEFD468EB_val == "0001") {
        auto3EF77B1F_ae = lib1_gv_playerMaximumCount;
        auto3EF77B1F_ai = 1;
        lv_player = 1;
        for ( ; ( (auto3EF77B1F_ai >= 0 && lv_player <= auto3EF77B1F_ae) || (auto3EF77B1F_ai <= 0 && lv_player >= auto3EF77B1F_ae) ) ; lv_player += auto3EF77B1F_ai ) {
            PlayerGroupAdd(lib1_gv_teamGroup[lv_player], (lv_player-1));
            PlayerGroupAdd(lib1_gv_mirrorTeamGroup[lv_player], (lib1_gf_PlayerGetMirrorPlayer(lv_player)-1));
        }
    }
    else if (autoEFD468EB_val == "0002") {
        auto77151E02_ae = lib1_gv_playerMaximumCount;
        auto77151E02_ai = 1;
        lv_player = 1;
        for ( ; ( (auto77151E02_ai >= 0 && lv_player <= auto77151E02_ae) || (auto77151E02_ai <= 0 && lv_player >= auto77151E02_ae) ) ; lv_player += auto77151E02_ai ) {
            if ((ModI(lv_player, 2) == 1)) {
                lv_team += 1;
            }

            PlayerGroupAdd(lib1_gv_teamGroup[lv_team], (lv_player-1));
            PlayerGroupAdd(lib1_gv_mirrorTeamGroup[lv_team], (lib1_gf_PlayerGetMirrorPlayer(lv_player)-1));
        }
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ewsp", 0, 2, PointFromId(98));
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: ModInizialization
//--------------------------------------------------------------------------------------------------
bool lib1_gt_ModInizialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_EnableDebugMode(GameAttributeGameValue("2"));
    TriggerExecute(lib1_gt_GameModeInizialization, true, false);
    TriggerExecute(lib1_gt_AllianceInizialization, true, false);
    TriggerExecute(lib1_gt_TeamInizialization, true, false);
    TriggerExecute(lib1_gt_PlayerInizialization, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_ModInizialization_Init () {
    lib1_gt_ModInizialization = TriggerCreate("lib1_gt_ModInizialization_Func");
    TriggerAddEventMapInit(lib1_gt_ModInizialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameModeInizialization
//--------------------------------------------------------------------------------------------------
bool lib1_gt_GameModeInizialization_Func (bool testConds, bool runActions) {
    string auto6B172583_val;

    // Variable Declarations
    string lv_gameValue;

    // Variable Initialization
    lv_gameValue = GameAttributeGameValue("2");

    // Actions
    if (!runActions) {
        return true;
    }

    auto6B172583_val = lv_gameValue;
    if (auto6B172583_val == "0001") {
        lib1_gv_teamCount = 8;
    }
    else if (auto6B172583_val == "0002") {
        lib1_gv_teamCount = 4;
    }
    else {
    }
    lib1_gv_teamRoundCount = (lib1_gv_teamCount-1);
    lib1_gv_teamMemberCount = (lib1_gv_playerMaximumCount/lib1_gv_teamCount);
    lib1_gv_roundCount = (lib1_gv_teamCount-lib1_gv_teamMemberCount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_GameModeInizialization_Init () {
    lib1_gt_GameModeInizialization = TriggerCreate("lib1_gt_GameModeInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AllianceInizialization
//--------------------------------------------------------------------------------------------------
bool lib1_gt_AllianceInizialization_Func (bool testConds, bool runActions) {
    int auto55B2E47B_ae;
    int auto55B2E47B_ai;
    int auto61D319F4_ae;
    int auto61D319F4_ai;
    int auto37AC6879_ae;
    int auto37AC6879_ai;
    int autoB515AD5D_ae;
    int autoB515AD5D_ai;
    int auto1B77AE87_ae;
    int auto1B77AE87_ai;

    // Variable Declarations
    int lv_team;
    int lv_teamMember;
    int lv_targetTeamMember;
    int lv_round;
    int lv_venueGroup;
    int lv_cycle;
    int[lib1_gv_venueMaximumCount + 1] lv_teamCompetitor;

    // Variable Initialization
    lv_cycle = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1_gv_debugUI == false)) {
        auto55B2E47B_ae = lib1_gv_teamCount;
        auto55B2E47B_ai = 1;
        lv_team = 1;
        for ( ; ( (auto55B2E47B_ai >= 0 && lv_team <= auto55B2E47B_ae) || (auto55B2E47B_ai <= 0 && lv_team >= auto55B2E47B_ae) ) ; lv_team += auto55B2E47B_ai ) {
            auto61D319F4_ae = lib1_gv_teamMemberCount;
            auto61D319F4_ai = 1;
            lv_teamMember = 1;
            for ( ; ( (auto61D319F4_ai >= 0 && lv_teamMember <= auto61D319F4_ae) || (auto61D319F4_ai <= 0 && lv_teamMember >= auto61D319F4_ae) ) ; lv_teamMember += auto61D319F4_ai ) {
                PlayerGroupAdd(lib1_gv_teamGroup[lv_teamMember], PlayerGroupPlayer(GameAttributePlayersForTeam(lv_team), lv_teamMember));
                PlayerGroupAdd(lib1_gv_mirrorTeamGroup[lv_teamMember], lib1_gf_PlayerGetMirrorPlayer(PlayerGroupPlayer(GameAttributePlayersForTeam(lv_team), lv_teamMember)));
            }
        }
    }

    auto37AC6879_ae = lib1_gv_teamCount;
    auto37AC6879_ai = 1;
    lv_team = 1;
    for ( ; ( (auto37AC6879_ai >= 0 && lv_team <= auto37AC6879_ae) || (auto37AC6879_ai <= 0 && lv_team >= auto37AC6879_ae) ) ; lv_team += auto37AC6879_ai ) {
        libNtve_gf_SetPlayerGroupAlliance(lib1_gv_teamGroup[lv_team], libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetPlayerGroupAlliance(lib1_gv_mirrorTeamGroup[lv_team], libNtve_ge_AllianceSetting_AllyWithSharedVision);
        autoB515AD5D_ae = lib1_gv_teamMemberCount;
        autoB515AD5D_ai = 1;
        lv_teamMember = 1;
        for ( ; ( (autoB515AD5D_ai >= 0 && lv_teamMember <= autoB515AD5D_ae) || (autoB515AD5D_ai <= 0 && lv_teamMember >= autoB515AD5D_ae) ) ; lv_teamMember += autoB515AD5D_ai ) {
            PlayerSetColorIndex(PlayerGroupPlayer(lib1_gv_mirrorTeamGroup[lv_team], lv_teamMember), PlayerGetColorIndex(PlayerGroupPlayer(lib1_gv_teamGroup[lv_team], lv_teamMember), false), true);
            auto1B77AE87_ae = lib1_gv_teamMemberCount;
            auto1B77AE87_ai = 1;
            lv_targetTeamMember = 1;
            for ( ; ( (auto1B77AE87_ai >= 0 && lv_targetTeamMember <= auto1B77AE87_ae) || (auto1B77AE87_ai <= 0 && lv_targetTeamMember >= auto1B77AE87_ae) ) ; lv_targetTeamMember += auto1B77AE87_ai ) {
                libNtve_gf_SetAllianceOneWay(PlayerGroupPlayer(lib1_gv_mirrorTeamGroup[lv_team], lv_teamMember), PlayerGroupPlayer(lib1_gv_teamGroup[lv_team], lv_targetTeamMember), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
                libNtve_gf_SetAllianceOneWay(PlayerGroupPlayer(lib1_gv_teamGroup[lv_team], lv_teamMember), PlayerGroupPlayer(lib1_gv_mirrorTeamGroup[lv_team], lv_targetTeamMember), libNtve_ge_AllianceSetting_Ally);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_AllianceInizialization_Init () {
    lib1_gt_AllianceInizialization = TriggerCreate("lib1_gt_AllianceInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TeamInizialization
//--------------------------------------------------------------------------------------------------
bool lib1_gt_TeamInizialization_Func (bool testConds, bool runActions) {
    int auto0A41B7D2_ae;
    int auto0A41B7D2_ai;
    int auto2FCEF7F9_ae;
    int auto2FCEF7F9_ai;
    int autoEF06F3E1_ae;
    int autoEF06F3E1_ai;
    int auto94B1DEE0_ae;
    int auto94B1DEE0_ai;
    int autoB5BFEF63_ae;
    int autoB5BFEF63_ai;

    // Variable Declarations
    int lv_team;
    int lv_teamMember;
    int lv_round;
    int lv_venueGroup;
    int lv_cycle;
    int[lib1_gv_venueMaximumCount + 1] lv_teamCompetitor;

    // Variable Initialization
    lv_cycle = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    auto0A41B7D2_ae = lib1_gv_teamRoundCount;
    auto0A41B7D2_ai = 1;
    lv_round = 1;
    for ( ; ( (auto0A41B7D2_ai >= 0 && lv_round <= auto0A41B7D2_ae) || (auto0A41B7D2_ai <= 0 && lv_round >= auto0A41B7D2_ae) ) ; lv_round += auto0A41B7D2_ai ) {
        auto2FCEF7F9_ae = (lib1_gv_teamCount/2);
        auto2FCEF7F9_ai = 1;
        lv_team = 1;
        for ( ; ( (auto2FCEF7F9_ai >= 0 && lv_team <= auto2FCEF7F9_ae) || (auto2FCEF7F9_ai <= 0 && lv_team >= auto2FCEF7F9_ae) ) ; lv_team += auto2FCEF7F9_ai ) {
            if ((lv_team == 1)) {
                lv_teamCompetitor[lv_team] = 1;
            }
            else {
                if (lv_cycle >= lib1_gv_teamCount) {
                    lv_cycle = 2;
                }
                else {
                    lv_cycle = lv_cycle + 1;
                }
                lv_teamCompetitor[lv_team] = lv_cycle;
            }
        }
        autoEF06F3E1_ae = (lib1_gv_teamCount/2+1);
        autoEF06F3E1_ai = -1;
        lv_team = lib1_gv_teamCount;
        for ( ; ( (autoEF06F3E1_ai >= 0 && lv_team <= autoEF06F3E1_ae) || (autoEF06F3E1_ai <= 0 && lv_team >= autoEF06F3E1_ae) ) ; lv_team += autoEF06F3E1_ai ) {
            if (lv_cycle >= lib1_gv_teamCount) {
                lv_cycle = 2;
            }
            else {
                lv_cycle = lv_cycle + 1;
            }
            lv_teamCompetitor[lv_team] = lv_cycle;
        }
        lv_venueGroup = 0;
        auto94B1DEE0_ae = lib1_gv_teamCount;
        auto94B1DEE0_ai = 1;
        lv_team = 1;
        for ( ; ( (auto94B1DEE0_ai >= 0 && lv_team <= auto94B1DEE0_ae) || (auto94B1DEE0_ai <= 0 && lv_team >= auto94B1DEE0_ae) ) ; lv_team += auto94B1DEE0_ai ) {
            if ((ModI(lv_team, 2) == 1)) {
                lv_venueGroup += 1;
                lib1_gv_teamAtVenue[lv_team][lv_round] = lv_teamCompetitor[lv_venueGroup];
            }
            else {
                lib1_gv_teamAtVenue[lv_team][lv_round] = lv_teamCompetitor[(lv_venueGroup+lib1_gv_teamCount/2)];
            }
        }
        lv_cycle -= 1;
    }
    autoB5BFEF63_ae = lib1_gv_teamRoundCount;
    autoB5BFEF63_ai = 1;
    lv_round = 1;
    for ( ; ( (autoB5BFEF63_ai >= 0 && lv_round <= autoB5BFEF63_ae) || (autoB5BFEF63_ai <= 0 && lv_round >= autoB5BFEF63_ae) ) ; lv_round += autoB5BFEF63_ai ) {
        TextExpressionSetToken("Param/Expression/lib_1_E2BCA4DE", "A", IntToText(lib1_gv_teamAtVenue[1][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_E2BCA4DE", "B", IntToText(lib1_gv_teamAtVenue[2][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_E2BCA4DE", "C", IntToText(lib1_gv_teamAtVenue[3][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_E2BCA4DE", "D", IntToText(lib1_gv_teamAtVenue[4][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_E2BCA4DE", "E", IntToText(lib1_gv_teamAtVenue[5][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_E2BCA4DE", "F", IntToText(lib1_gv_teamAtVenue[6][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_E2BCA4DE", "G", IntToText(lib1_gv_teamAtVenue[7][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_E2BCA4DE", "H", IntToText(lib1_gv_teamAtVenue[8][lv_round]));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_E2BCA4DE"), lib1_gv_debugUI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_TeamInizialization_Init () {
    lib1_gt_TeamInizialization = TriggerCreate("lib1_gt_TeamInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlayerInizialization
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PlayerInizialization_Func (bool testConds, bool runActions) {
    int autoB11EC92B_ae;
    int autoB11EC92B_ai;
    int autoCCC73C74_ae;
    int autoCCC73C74_ai;
    int autoCD49D2BB_n;
    int autoCD49D2BB_i;
    int auto9AC8AF69_ae;
    int auto9AC8AF69_ai;

    // Variable Declarations
    int lv_team;
    int lv_teamMember;
    int lv_round;
    int lv_teamRound;
    int lv_venue;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB11EC92B_ae = lib1_gv_roundCount;
    autoB11EC92B_ai = 1;
    lv_round = 1;
    for ( ; ( (autoB11EC92B_ai >= 0 && lv_round <= autoB11EC92B_ae) || (autoB11EC92B_ai <= 0 && lv_round >= autoB11EC92B_ae) ) ; lv_round += autoB11EC92B_ai ) {
        if (lv_teamRound >= lib1_gv_teamRoundCount) {
            lv_teamRound = 1;
        }
        else {
            lv_teamRound = lv_teamRound + 1;
        }
        autoCCC73C74_ae = lib1_gv_teamCount;
        autoCCC73C74_ai = 1;
        lv_team = 1;
        for ( ; ( (autoCCC73C74_ai >= 0 && lv_team <= autoCCC73C74_ae) || (autoCCC73C74_ai <= 0 && lv_team >= autoCCC73C74_ae) ) ; lv_team += autoCCC73C74_ai ) {
            if ((lv_round >= (lib1_gv_teamRoundCount+1)) && ((lv_team == 1) || (lv_team == (lib1_gv_teamCount/2+1)))) {
                if (lv_teamMember >= lib1_gv_teamMemberCount) {
                    lv_teamMember = 1;
                }
                else {
                    lv_teamMember = lv_teamMember + 1;
                }
            }

            autoCD49D2BB_n = lib1_gv_teamMemberCount;
            for (autoCD49D2BB_i = 1; autoCD49D2BB_i <= autoCD49D2BB_n; autoCD49D2BB_i += 1) {
                if (lv_venue >= lib1_gv_venueMaximumCount) {
                    lv_venue = 1;
                }
                else {
                    lv_venue = lv_venue + 1;
                }
                if (lv_teamMember >= lib1_gv_teamMemberCount) {
                    lv_teamMember = 1;
                }
                else {
                    lv_teamMember = lv_teamMember + 1;
                }
                lib1_gv_playerAtVenue[lv_venue][lv_round] = PlayerGroupPlayer(lib1_gv_teamGroup[lib1_gv_teamAtVenue[lv_team][lv_teamRound]], lv_teamMember);
            }
        }
    }
    auto9AC8AF69_ae = lib1_gv_roundCount;
    auto9AC8AF69_ai = 1;
    lv_round = 1;
    for ( ; ( (auto9AC8AF69_ai >= 0 && lv_round <= auto9AC8AF69_ae) || (auto9AC8AF69_ai <= 0 && lv_round >= auto9AC8AF69_ae) ) ; lv_round += auto9AC8AF69_ai ) {
        TextExpressionSetToken("Param/Expression/lib_1_41A8720E", "A", IntToText(lib1_gv_playerAtVenue[1][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_41A8720E", "B", IntToText(lib1_gv_playerAtVenue[2][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_41A8720E", "C", IntToText(lib1_gv_playerAtVenue[3][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_41A8720E", "D", IntToText(lib1_gv_playerAtVenue[4][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_41A8720E", "E", IntToText(lib1_gv_playerAtVenue[5][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_41A8720E", "F", IntToText(lib1_gv_playerAtVenue[6][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_41A8720E", "G", IntToText(lib1_gv_playerAtVenue[7][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_41A8720E", "H", IntToText(lib1_gv_playerAtVenue[8][lv_round]));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_41A8720E"), lib1_gv_debugUI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_PlayerInizialization_Init () {
    lib1_gt_PlayerInizialization = TriggerCreate("lib1_gt_PlayerInizialization_Func");
}

void lib1_InitTriggers () {
    lib1_gt_ModInizialization_Init();
    lib1_gt_GameModeInizialization_Init();
    lib1_gt_AllianceInizialization_Init();
    lib1_gt_TeamInizialization_Init();
    lib1_gt_PlayerInizialization_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_InitLib_completed = false;

void lib1_InitLib () {
    if (lib1_InitLib_completed) {
        return;
    }

    lib1_InitLib_completed = true;

    lib1_InitLibraries();
    lib1_InitVariables();
    lib1_InitTriggers();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libGAw3_InitLib();
    libGAwX_InitLib();
    lib1_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const fixed gv_moonDuration = 15.0;
const string gv_awarController = "AwarController";
const int gv_bj_MAX_SKELETONS = 73;
const fixed gv_aOclDamageReduce = 0.85;
const fixed gv_aOclDamageDelay = 0.125;
const fixed gv_asplRadius = 5.0;
const fixed gv_asplSplitFactor = 0.1;
const int gv_asplMaxTargets = 4;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_groupCount;
int gv_phalanxCount;
int[4] gv_phalanxColumnCount;
int[4] gv_phalanxRowCount;
int[8] gv_roundRandomized;
int[5] gv_groupRandomized;
int gv_finalRoundCount;
int[17] gv_player;
int[17][17] gv_playerFinal;
bank[17] gv_bank;
int gv_board;
int[17] gv_intRowBoardOfPlayer;
int[17] gv_intSL;
int[17][17] gv_intCountUnit;
string[17][1025][17] gv_typeUnit;
int[17][17] gv_intCountLivingUnit;
int[17] gv_intCountLivingUnitPlayer;
string[17][1025][17][7] gv_typeItem;
bool[17] gv_boolPlayerInBattle;
int gv_intRound;
int gv_intBonusRound;
int gv_intFinalRound;
point[17][17] gv_pointReserve;
playergroup gv_playergroupBonusDone;
unitfilter gv_aOhwTargetFilter;
timer gv_duration;
unitfilter gv_awarFilter;
unitfilter gv_aOclTargetFilter;
unitfilter gv_asplTargetFilter;
string gv_defaultTOD;
text gv_info;
fixed gv_fixedTime;
fixed gv_fixedTimeLastRound;
int[17] gv_intG;
text[17] gv_textPhalanx;
int gv_behaviorFlagRaiseDead;
playergroup gv_playergroupDebug;
bool gv_boolTestMode;
int gv_gameCatalog;
string gv_stringFieldPath;
string gv_stringValue;
bool gv_optionCommandable;
int gv_intCountPlayer;
int gv_intCountPlayerActive;
int gv_intCountRound;
int gv_intCountBonusRound;
int gv_intCountFinalRound;
int gv_intCountGroup;
int[17] gv_intPlayer;
int[17] gv_intPlayerActive;
int[17] gv_intGroupPlayer;
int[9] gv_intRandomGroup;
int[17] gv_intRandomRound;
int[17][17] gv_intScheduleAllPlayAll;
int[17][17] gv_intPlayerFinal;
unit[17] gv_unitWorker;
revealer[17][17] gv_visRevealer;
playergroup gv_playergroupAI;
int gv_intEventPlayer;
int gv_intKillingPlayer;
unit gv_unitEventUnit;
bool gv_boolOwnerChanged;
int[17][17] gv_intCountControlledUnit;
timer gv_timerWinLoss;
int gv_playerEvent;
int gv_playerKilling;
fixed[17] gv_champion;
bool gv_boolKilling;
int[17] gv_intS;
int gv_intSMax;
playergroup gv_playergroupWon;
playergroup gv_playergroupLose;

void InitGlobals () {
    int init_i;
    int init_j;

    gv_board = c_boardNone;
    gv_playergroupBonusDone = PlayerGroupEmpty();
    gv_aOhwTargetFilter = UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterHover) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem) | (1 << c_targetFilterPreventDefeat), (1 << (c_targetFilterDead - 32)));
    gv_duration = TimerCreate();
    gv_awarFilter = UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterAir) | (1 << c_targetFilterHover) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem) | (1 << c_targetFilterPreventDefeat), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    gv_aOclTargetFilter = UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterGround) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterHover) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem) | (1 << c_targetFilterPreventDefeat), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32)));
    gv_asplTargetFilter = UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterHover) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem) | (1 << c_targetFilterPreventDefeat), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32)));
    gv_defaultTOD = "13:00:00";
    gv_info = StringExternal("Param/Value/2FB88B46");
    gv_behaviorFlagRaiseDead = c_unitBehaviorFlagUser1;
    gv_playergroupDebug = PlayerGroupEmpty();
    gv_gameCatalog = c_gameCatalogUnit;
    gv_stringFieldPath = "";
    gv_stringValue = "";
    gv_optionCommandable = true;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        for (init_j = 0; init_j <= 16; init_j += 1) {
            gv_visRevealer[init_i][init_j] = VisRevealerLastCreated();
        }
    }
    gv_playergroupAI = PlayerGroupEmpty();
    gv_timerWinLoss = TimerCreate();
    gv_playergroupWon = PlayerGroupEmpty();
    gv_playergroupLose = PlayerGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
point gf_BattlefieldLocation (int lp_index, int lp_phalanx);
int gf_ConvertIndexToPlayer (int lp_index);
region gf_PlayerBuildingRegion (int lp_player, int lp_phalanx);
point gf_PlayerReserveLocation2 (int lp_p, int lp_phalanx);
point gf_PlayerBonusLocation (int lp_p, int lp_phalanx);
point gf_PlayerBonusMobLocation (int lp_p, int lp_phalanx);
point gf_PlayerBonusReserveLocation (int lp_p, int lp_phalanx);
point gf_PlayerFinalLocation (int lp_p, int lp_phalanx);
point gf_PlayerFinalReserveLocation (int lp_p, int lp_phalanx);
point gf_PlayerWorkerLocation (int lp_p);
bool gf_UnitHasBehaviorFlag (int lp_bf, unit lp_u);
void gf_UnitInventoryCreate (unit lp_u, unit lp_item);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_MapInizialization;
trigger gt_VenueInizialization;
trigger gt_BuidingRegionInizialization;
trigger gt_MapInizialization2;
trigger gt_RoundRandomization;
trigger gt_GroupRandomization;
trigger gt_InitPlayerFinal;
trigger gt_InitBoard;
trigger gt_InitUnit;
trigger gt_Position;
trigger gt_AOhwImpact;
trigger gt_moonMoonstoneChangeTOD;
trigger gt_moonMoonstoneRestoreTOD;
trigger gt_AwarTargetCheck;
trigger gt_AraiSummonCount;
trigger gt_AOclImpact;
trigger gt_AsplMarker;
trigger gt_AsplSplitTemplate;
trigger gt_AsplRegister;
trigger gt_InitMap;
trigger gt_TestMode;
trigger gt_GetRadomItem;
trigger gt_SetOwner;
trigger gt_Restart;
trigger gt_Set;
trigger gt_UnitRemove;
trigger gt_InitPlayer;
trigger gt_InitRandomGroup;
trigger gt_InitRandomRound;
trigger gt_InitScheduleAllPlayAll;
trigger gt_InitPlayerFinal2;
trigger gt_InitTag;
trigger gt_InitWorker;
trigger gt_Waiting;
trigger gt_ItemBinding;
trigger gt_AI;
trigger gt_UnitDied;
trigger gt_UnitOwnerChanged;
trigger gt_Reserve;
trigger gt_WinLossPeriod;
trigger gt_WinLoss;
trigger gt_Build;
trigger gt_Attack;
trigger gt_Revive;
trigger gt_PlayerLeft;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
point gf_BattlefieldLocation (int lp_index, int lp_phalanx) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    return PointFromName(("Battlefield" + IntToString(lv_index) + "," + IntToString(lp_phalanx)));
}

int gf_ConvertIndexToPlayer (int lp_index) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization

    // Implementation
    lv_p = (lp_index-1);
    return lv_p;
}

region gf_PlayerBuildingRegion (int lp_player, int lp_phalanx) {
    // Implementation
    return RegionFromName(("Building" + IntToString(lp_player) + "," + IntToString(lp_phalanx)));
}

point gf_PlayerReserveLocation2 (int lp_p, int lp_phalanx) {
    // Implementation
    return PointFromName(("Reserve" + IntToString(lp_p) + "," + IntToString(lp_phalanx)));
}

point gf_PlayerBonusLocation (int lp_p, int lp_phalanx) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization

    // Implementation
    if ((lp_p <= 8)) {
        lv_p = lp_p;
    }
    else {
        lv_p = (lp_p - 8);
    }
    return PointFromName(("Battlefield" + IntToString(((lv_p * 2) - 1)) + "," + IntToString(lp_phalanx)));
}

point gf_PlayerBonusMobLocation (int lp_p, int lp_phalanx) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization

    // Implementation
    if ((lp_p <= 8)) {
        lv_p = lp_p;
    }
    else {
        lv_p = (lp_p - 8);
    }
    return PointFromName(("Battlefield" + IntToString((lv_p * 2)) + "," + IntToString(lp_phalanx)));
}

point gf_PlayerBonusReserveLocation (int lp_p, int lp_phalanx) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization

    // Implementation
    if ((lp_p <= 8)) {
        lv_p = lp_p;
    }
    else {
        lv_p = (lp_p - 8);
    }
    return PointFromName(("Reserve" + IntToString(((lv_p * 2) - 1)) + "," + IntToString(lp_phalanx)));
}

point gf_PlayerFinalLocation (int lp_p, int lp_phalanx) {
    // Implementation
    return PointFromName(("FinalBattlefield" + IntToString(lp_p) + "," + IntToString(lp_phalanx)));
}

point gf_PlayerFinalReserveLocation (int lp_p, int lp_phalanx) {
    // Implementation
    return PointFromName(("FinalReserve" + IntToString(lp_p) + "," + IntToString(lp_phalanx)));
}

point gf_PlayerWorkerLocation (int lp_p) {
    // Implementation
    return PointFromName(("Worker" + IntToString(lp_p)));
}

bool gf_UnitHasBehaviorFlag (int lp_bf, unit lp_u) {
    int autoFB1BA38D_ae;
    int autoFB1BA38D_ai;

    // Variable Declarations
    int lv_i;
    bool lv_b;

    // Variable Initialization

    // Implementation
    autoFB1BA38D_ae = UnitBehaviorCountAll(lp_u);
    autoFB1BA38D_ai = 1;
    lv_i = 1;
    for ( ; ( (autoFB1BA38D_ai >= 0 && lv_i <= autoFB1BA38D_ae) || (autoFB1BA38D_ai <= 0 && lv_i >= autoFB1BA38D_ae) ) ; lv_i += autoFB1BA38D_ai ) {
        if ((UnitBehaviorHasFlag(UnitBehaviorGet(lp_u, lv_i), lp_bf) == true)) {
            lv_b = true;
        }

    }
    return lv_b;
}

void gf_UnitInventoryCreate (unit lp_u, unit lp_item) {
    // Variable Declarations
    order lv_dropOrder;
    string lv_itemType;
    int lv_p;
    unit lv_newItem;
    int lv_container;
    int lv_slot;

    // Variable Initialization
    lv_dropOrder = OrderTargetingUnit(AbilityCommand("TodGodInventory", 0), lp_u);
    lv_itemType = UnitGetType(lp_item);
    lv_p = UnitGetOwner(lp_u);
    lv_container = EventUnitInventoryItemContainer();
    lv_slot = EventUnitInventoryItemSlot();

    // Implementation
    libNtve_gf_CreateUnitsAtPoint2(1, lv_itemType, c_unitCreateIgnorePlacement, 0, UnitGetPosition(libGAwX_gv_god));
    lv_newItem = UnitLastCreated();
    UnitRemove(lp_item);
    OrderSetTargetItem(lv_dropOrder, lv_newItem);
    UnitIssueOrder(libGAwX_gv_god, OrderTargetingUnit(AbilityCommand("TodGodInventory", 2), lv_newItem), c_orderQueueReplace);
    UnitIssueOrder(libGAwX_gv_god, lv_dropOrder, c_orderQueueAddToEnd);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MapInizialization
//--------------------------------------------------------------------------------------------------
bool gt_MapInizialization_Func (bool testConds, bool runActions) {
    int auto11556C4E_ae;
    int auto11556C4E_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    MeleeInitUnits();
    MeleeInitAI();
    libGAwX_gf_SetWar3TimeOfDay("12:00:00");
    libGAwX_gf_PauseUnpauseTimeOfDayWar3(true);
    TriggerExecute(gt_VenueInizialization, true, false);
    TriggerExecute(gt_BuidingRegionInizialization, true, false);
    lib1_gf_MirrorUnitPosition(1);
    auto11556C4E_ae = lib1_gv_playerMaximumCount;
    auto11556C4E_ai = 1;
    lv_player = 1;
    for ( ; ( (auto11556C4E_ai >= 0 && lv_player <= auto11556C4E_ae) || (auto11556C4E_ai <= 0 && lv_player >= auto11556C4E_ae) ) ; lv_player += auto11556C4E_ai ) {
        VisRevealArea((lv_player-1), RegionEntireMap(), 0.0, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInizialization_Init () {
    gt_MapInizialization = TriggerCreate("gt_MapInizialization_Func");
    TriggerAddEventMapInit(gt_MapInizialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VenueInizialization
//--------------------------------------------------------------------------------------------------
bool gt_VenueInizialization_Func (bool testConds, bool runActions) {
    string auto480E4CF2_val;

    // Variable Declarations
    string lv_gameValue;

    // Variable Initialization
    lv_gameValue = GameAttributeGameValue("2");

    // Actions
    if (!runActions) {
        return true;
    }

    auto480E4CF2_val = lv_gameValue;
    if (auto480E4CF2_val == "0001") {
        lib1_gf_SetVenue(RegionFromId(25), 1);
        lib1_gf_SetVenue(RegionFromId(27), 2);
        lib1_gf_SetVenue(RegionFromId(29), 3);
        lib1_gf_SetVenue(RegionFromId(31), 4);
        lib1_gf_SetVenue(RegionFromId(33), 5);
        lib1_gf_SetVenue(RegionFromId(34), 6);
        lib1_gf_SetVenue(RegionFromId(35), 7);
        lib1_gf_SetVenue(RegionFromId(36), 8);
    }
    else if (auto480E4CF2_val == "0002") {
        lib1_gf_SetVenue(RegionFromId(25), 1);
        lib1_gf_SetVenue(RegionFromId(26), 2);
        lib1_gf_SetVenue(RegionFromId(27), 3);
        lib1_gf_SetVenue(RegionFromId(28), 4);
        lib1_gf_SetVenue(RegionFromId(29), 5);
        lib1_gf_SetVenue(RegionFromId(30), 6);
        lib1_gf_SetVenue(RegionFromId(31), 7);
        lib1_gf_SetVenue(RegionFromId(32), 8);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VenueInizialization_Init () {
    gt_VenueInizialization = TriggerCreate("gt_VenueInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BuidingRegionInizialization
//--------------------------------------------------------------------------------------------------
bool gt_BuidingRegionInizialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_SetBuildingRegion(RegionFromId(1), 1, 1);
    lib1_gf_SetBuildingRegion(RegionFromId(2), 1, 2);
    lib1_gf_SetBuildingRegion(RegionFromId(3), 1, 3);
    lib1_gf_SetBuildingRegion(RegionFromId(4), 2, 1);
    lib1_gf_SetBuildingRegion(RegionFromId(5), 2, 2);
    lib1_gf_SetBuildingRegion(RegionFromId(6), 2, 3);
    lib1_gf_SetBuildingRegion(RegionFromId(7), 3, 1);
    lib1_gf_SetBuildingRegion(RegionFromId(8), 3, 2);
    lib1_gf_SetBuildingRegion(RegionFromId(9), 3, 3);
    lib1_gf_SetBuildingRegion(RegionFromId(10), 4, 1);
    lib1_gf_SetBuildingRegion(RegionFromId(11), 4, 2);
    lib1_gf_SetBuildingRegion(RegionFromId(12), 4, 3);
    lib1_gf_SetBuildingRegion(RegionFromId(13), 5, 1);
    lib1_gf_SetBuildingRegion(RegionFromId(14), 5, 2);
    lib1_gf_SetBuildingRegion(RegionFromId(15), 5, 3);
    lib1_gf_SetBuildingRegion(RegionFromId(16), 6, 1);
    lib1_gf_SetBuildingRegion(RegionFromId(17), 6, 2);
    lib1_gf_SetBuildingRegion(RegionFromId(18), 6, 3);
    lib1_gf_SetBuildingRegion(RegionFromId(19), 7, 1);
    lib1_gf_SetBuildingRegion(RegionFromId(20), 7, 2);
    lib1_gf_SetBuildingRegion(RegionFromId(21), 7, 3);
    lib1_gf_SetBuildingRegion(RegionFromId(22), 8, 1);
    lib1_gf_SetBuildingRegion(RegionFromId(23), 8, 2);
    lib1_gf_SetBuildingRegion(RegionFromId(24), 8, 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuidingRegionInizialization_Init () {
    gt_BuidingRegionInizialization = TriggerCreate("gt_BuidingRegionInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Inizialization2
//--------------------------------------------------------------------------------------------------
bool gt_MapInizialization2_Func (bool testConds, bool runActions) {
    int auto33144F83_ae;
    int auto33144F83_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf_SetWar3TimeOfDay("12:00:00");
    libGAwX_gf_PauseUnpauseTimeOfDayWar3(true);
    gv_phalanxCount = 3;
    gv_phalanxRowCount[1] = 6;
    gv_phalanxColumnCount[1] = 6;
    gv_phalanxRowCount[2] = 6;
    gv_phalanxColumnCount[2] = 6;
    gv_phalanxRowCount[3] = 6;
    gv_phalanxColumnCount[3] = 6;
    lib1_gv_teamCount = 8;
    lib1_gv_teamRoundCount = 7;
    gv_groupCount = (lib1_gv_teamCount/2);
    TriggerExecute(gt_VenueInizialization, true, false);
    auto33144F83_ae = lib1_gv_venueMaximumCount;
    auto33144F83_ai = 1;
    lv_i = 1;
    for ( ; ( (auto33144F83_ai >= 0 && lv_i <= auto33144F83_ae) || (auto33144F83_ai <= 0 && lv_i >= auto33144F83_ae) ) ; lv_i += auto33144F83_ai ) {
        VisRevealArea(2, lib1_gv_venue[lv_i], 0.0, true);
    }
    TriggerExecute(gt_InitBoard, true, false);
    TriggerExecute(gt_Position, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInizialization2_Init () {
    gt_MapInizialization2 = TriggerCreate("gt_MapInizialization2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Round Randomization
//--------------------------------------------------------------------------------------------------
bool gt_RoundRandomization_Func (bool testConds, bool runActions) {
    int auto3128B7BC_ae;
    int auto3128B7BC_ai;
    int autoA7DEE237_ae;
    int autoA7DEE237_ai;

    // Variable Declarations
    int lv_r1;
    int lv_r2;
    bool lv_repeated;
    int[8] lv_roundRandomized;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto3128B7BC_ae = lib1_gv_teamRoundCount;
    auto3128B7BC_ai = 1;
    lv_r1 = 1;
    for ( ; ( (auto3128B7BC_ai >= 0 && lv_r1 <= auto3128B7BC_ae) || (auto3128B7BC_ai <= 0 && lv_r1 >= auto3128B7BC_ae) ) ; lv_r1 += auto3128B7BC_ai ) {
        while (true) {
            lv_roundRandomized[lv_r1] = RandomInt(1, lib1_gv_teamRoundCount);
            lv_repeated = false;
            autoA7DEE237_ae = lib1_gv_teamRoundCount;
            autoA7DEE237_ai = 1;
            lv_r2 = 1;
            for ( ; ( (autoA7DEE237_ai >= 0 && lv_r2 <= autoA7DEE237_ae) || (autoA7DEE237_ai <= 0 && lv_r2 >= autoA7DEE237_ae) ) ; lv_r2 += autoA7DEE237_ai ) {
                if ((lv_roundRandomized[lv_r1] == gv_roundRandomized[lv_r2])) {
                    lv_repeated = true;
                }

            }
            if ((lv_repeated == false)) {
                gv_roundRandomized[lv_r1] = lv_roundRandomized[lv_r1];
                break;
            }

        }
    }
    TextExpressionSetToken("Param/Expression/303F886F", "A", IntToText(1));
    TextExpressionSetToken("Param/Expression/303F886F", "B", IntToText(lv_roundRandomized[1]));
    TextExpressionSetToken("Param/Expression/303F886F", "C", IntToText(2));
    TextExpressionSetToken("Param/Expression/303F886F", "D", IntToText(lv_roundRandomized[2]));
    TextExpressionSetToken("Param/Expression/303F886F", "E", IntToText(3));
    TextExpressionSetToken("Param/Expression/303F886F", "F", IntToText(lv_roundRandomized[3]));
    TextExpressionSetToken("Param/Expression/303F886F", "G", IntToText(4));
    TextExpressionSetToken("Param/Expression/303F886F", "H", IntToText(lv_roundRandomized[4]));
    TextExpressionSetToken("Param/Expression/303F886F", "I", IntToText(5));
    TextExpressionSetToken("Param/Expression/303F886F", "J", IntToText(lv_roundRandomized[5]));
    TextExpressionSetToken("Param/Expression/303F886F", "K", IntToText(6));
    TextExpressionSetToken("Param/Expression/303F886F", "L", IntToText(lv_roundRandomized[6]));
    TextExpressionSetToken("Param/Expression/303F886F", "M", IntToText(7));
    TextExpressionSetToken("Param/Expression/303F886F", "N", IntToText(lv_roundRandomized[7]));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/303F886F"), lib1_gv_debugUI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoundRandomization_Init () {
    gt_RoundRandomization = TriggerCreate("gt_RoundRandomization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Group Randomization
//--------------------------------------------------------------------------------------------------
bool gt_GroupRandomization_Func (bool testConds, bool runActions) {
    int autoB14C761D_ae;
    int autoB14C761D_ai;
    int auto64EDE13C_ae;
    int auto64EDE13C_ai;

    // Variable Declarations
    int lv_g1;
    int lv_g2;
    bool lv_repeated;
    int[5] lv_groupRandomized;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB14C761D_ae = gv_groupCount;
    autoB14C761D_ai = 1;
    lv_g1 = 1;
    for ( ; ( (autoB14C761D_ai >= 0 && lv_g1 <= autoB14C761D_ae) || (autoB14C761D_ai <= 0 && lv_g1 >= autoB14C761D_ae) ) ; lv_g1 += autoB14C761D_ai ) {
        while (true) {
            lv_groupRandomized[lv_g1] = RandomInt(1, gv_groupCount);
            lv_repeated = false;
            auto64EDE13C_ae = gv_groupCount;
            auto64EDE13C_ai = 1;
            lv_g2 = 1;
            for ( ; ( (auto64EDE13C_ai >= 0 && lv_g2 <= auto64EDE13C_ae) || (auto64EDE13C_ai <= 0 && lv_g2 >= auto64EDE13C_ae) ) ; lv_g2 += auto64EDE13C_ai ) {
                if ((lv_groupRandomized[lv_g1] == gv_groupRandomized[lv_g2])) {
                    lv_repeated = true;
                }

            }
            if ((lv_repeated == false)) {
                gv_groupRandomized[lv_g1] = lv_groupRandomized[lv_g1];
                break;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GroupRandomization_Init () {
    gt_GroupRandomization = TriggerCreate("gt_GroupRandomization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitPlayerFinal
//--------------------------------------------------------------------------------------------------
bool gt_InitPlayerFinal_Func (bool testConds, bool runActions) {
    int autoE6E3D4FF_ae;
    int autoE6E3D4FF_ai;
    int autoFF31CA13_ae;
    int autoFF31CA13_ai;
    int auto4B336D01_ae;
    int auto4B336D01_ai;
    int auto8B8810FE_ae;
    int auto8B8810FE_ai;

    // Variable Declarations
    int lv_p;
    bool lv_bRpt;
    int lv_rPlyr;
    int[17] lv_r;
    int lv_rF;
    int lv_rnd;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE6E3D4FF_ae = gv_finalRoundCount;
    autoE6E3D4FF_ai = 1;
    lv_rF = 1;
    for ( ; ( (autoE6E3D4FF_ai >= 0 && lv_rF <= autoE6E3D4FF_ae) || (autoE6E3D4FF_ai <= 0 && lv_rF >= autoE6E3D4FF_ae) ) ; lv_rF += autoE6E3D4FF_ai ) {
        autoFF31CA13_ae = lib1_gv_teamCount;
        autoFF31CA13_ai = 1;
        lv_rPlyr = 1;
        for ( ; ( (autoFF31CA13_ai >= 0 && lv_rPlyr <= autoFF31CA13_ae) || (autoFF31CA13_ai <= 0 && lv_rPlyr >= autoFF31CA13_ae) ) ; lv_rPlyr += autoFF31CA13_ai ) {
            while (true) {
                lv_r[lv_rPlyr] = RandomInt(1, lib1_gv_teamCount);
                lv_bRpt = false;
                auto4B336D01_ae = lib1_gv_teamCount;
                auto4B336D01_ai = 1;
                lv_p = 1;
                for ( ; ( (auto4B336D01_ai >= 0 && lv_p <= auto4B336D01_ae) || (auto4B336D01_ai <= 0 && lv_p >= auto4B336D01_ae) ) ; lv_p += auto4B336D01_ai ) {
                    if ((lv_r[lv_rPlyr] == gv_playerFinal[lv_p][lv_rF])) {
                        lv_bRpt = true;
                    }

                }
                if ((lv_bRpt == false)) {
                    gv_playerFinal[lv_rPlyr][lv_rF] = lv_r[lv_rPlyr];
                    break;
                }

            }
        }
        auto8B8810FE_ae = lib1_gv_teamCount;
        auto8B8810FE_ai = 1;
        lv_p = 1;
        for ( ; ( (auto8B8810FE_ai >= 0 && lv_p <= auto8B8810FE_ae) || (auto8B8810FE_ai <= 0 && lv_p >= auto8B8810FE_ae) ) ; lv_p += auto8B8810FE_ai ) {
            gv_playerFinal[lv_p][lv_rF] = gv_player[gv_playerFinal[lv_p][lv_rF]];
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitPlayerFinal_Init () {
    gt_InitPlayerFinal = TriggerCreate("gt_InitPlayerFinal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitBoard
//--------------------------------------------------------------------------------------------------
bool gt_InitBoard_Func (bool testConds, bool runActions) {
    int auto0EE4EC57_ae;
    int auto0EE4EC57_ai;
    int autoC4130CD8_ae;
    int autoC4130CD8_ai;
    int auto4B819939_ae;
    int auto4B819939_ai;
    int autoAD47A2B3_ae;
    int autoAD47A2B3_ai;

    // Variable Declarations
    int lv_r;
    int lv_c;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    BoardCreate(6, 8, StringExternal("Param/Value/238E2B6F"), Color(100.00, 100.00, 100.00));
    gv_board = BoardLastCreated();
    auto0EE4EC57_ae = 6;
    auto0EE4EC57_ai = 1;
    lv_c = 1;
    for ( ; ( (auto0EE4EC57_ai >= 0 && lv_c <= auto0EE4EC57_ae) || (auto0EE4EC57_ai <= 0 && lv_c >= auto0EE4EC57_ae) ) ; lv_c += auto0EE4EC57_ai ) {
        BoardItemSetFontSize(gv_board, lv_c, c_boardRowHeader, 20);
    }
    BoardItemSetText(gv_board, 1, c_boardRowHeader, StringExternal("Param/Value/95818AF9"));
    BoardItemSetText(gv_board, 2, c_boardRowHeader, StringExternal("Param/Value/35070B48"));
    BoardItemSetText(gv_board, 3, c_boardRowHeader, StringExternal("Param/Value/1DD38C47"));
    BoardItemSetText(gv_board, 4, c_boardRowHeader, StringExternal("Param/Value/EF7E7E04"));
    BoardItemSetText(gv_board, 5, c_boardRowHeader, StringExternal("Param/Value/DFF97864"));
    BoardItemSetText(gv_board, 6, c_boardRowHeader, StringExternal("Param/Value/D10032ED"));
    autoC4130CD8_ae = 8;
    autoC4130CD8_ai = 1;
    lv_r = 1;
    for ( ; ( (autoC4130CD8_ai >= 0 && lv_r <= autoC4130CD8_ae) || (autoC4130CD8_ai <= 0 && lv_r >= autoC4130CD8_ae) ) ; lv_r += autoC4130CD8_ai ) {
        gv_intRowBoardOfPlayer[lv_r] = lv_r;
        auto4B819939_ae = 6;
        auto4B819939_ai = 1;
        lv_c = 1;
        for ( ; ( (auto4B819939_ai >= 0 && lv_c <= auto4B819939_ae) || (auto4B819939_ai <= 0 && lv_c >= auto4B819939_ae) ) ; lv_c += auto4B819939_ai ) {
            BoardItemSetFontSize(gv_board, lv_c, lv_r, 16);
        }
        BoardItemSetText(gv_board, 1, lv_r, PlayerName(gf_ConvertIndexToPlayer(lv_r)));
        BoardItemSetTextColor(gv_board, 1, lv_r, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gf_ConvertIndexToPlayer(lv_r), false)));
        BoardItemSetProgressColor(gv_board, 2, lv_r, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gf_ConvertIndexToPlayer(lv_r), false)), 1);
        BoardItemSetText(gv_board, 2, lv_r, IntToText(0));
        BoardItemSetProgressValue(gv_board, 2, lv_r, 0.0);
        BoardItemSetProgressRange(gv_board, 2, lv_r, 0.0, 0.0);
        BoardItemSetProgressShow(gv_board, 2, lv_r, true);
        BoardItemSetProgressColor(gv_board, 3, lv_r, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gf_ConvertIndexToPlayer(lv_r), false)), 1);
        BoardItemSetText(gv_board, 3, lv_r, IntToText(0));
        BoardItemSetProgressValue(gv_board, 3, lv_r, 0.0);
        BoardItemSetProgressRange(gv_board, 3, lv_r, 0.0, 0.0);
        BoardItemSetProgressShow(gv_board, 3, lv_r, true);
        BoardItemSetText(gv_board, 6, lv_r, IntToText(0));
        if ((PlayerType(lv_r) == c_playerTypeUser) && (PlayerType(lv_r) == c_playerTypeComputer)) {
        }

    }
    autoAD47A2B3_ae = 8;
    autoAD47A2B3_ai = 1;
    lv_r = 1;
    for ( ; ( (autoAD47A2B3_ai >= 0 && lv_r <= autoAD47A2B3_ae) || (autoAD47A2B3_ai <= 0 && lv_r >= autoAD47A2B3_ae) ) ; lv_r += autoAD47A2B3_ai ) {
        if ((BankVerify(gv_bank[gf_ConvertIndexToPlayer(lv_r)]) == true)) {
            if ((BankValueGetAsInt(gv_bank[gf_ConvertIndexToPlayer(lv_r)], "Score", "GameCount") > 0)) {
                BoardItemSetText(gv_board, 4, gv_intRowBoardOfPlayer[lv_r], IntToText(BankValueGetAsInt(gv_bank[lv_r], "Score", "GameCount")));
                BoardItemSetText(gv_board, 5, gv_intRowBoardOfPlayer[lv_r], FixedToText((IntToFixed(BankValueGetAsInt(gv_bank[lv_r], "Score", "Win")) / IntToFixed(BankValueGetAsInt(gv_bank[lv_r], "Score", "GameCount"))), 2));
            }

        }
        else {
            UIDisplayMessage(PlayerGroupSingle(gf_ConvertIndexToPlayer(lv_r)), c_messageAreaSubtitle, StringExternal("Param/Value/9F20FF5A"));
            BankSectionRemove(gv_bank[gf_ConvertIndexToPlayer(lv_r)], "Score");
            BankSave(gv_bank[gf_ConvertIndexToPlayer(lv_r)]);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitBoard_Init () {
    gt_InitBoard = TriggerCreate("gt_InitBoard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitUnit
//--------------------------------------------------------------------------------------------------
bool gt_InitUnit_Func (bool testConds, bool runActions) {
    int auto403616AB_ae;
    int auto403616AB_ai;
    int autoFDE25A86_ae;
    int autoFDE25A86_ai;
    int auto3B9010B7_ae;
    int auto3B9010B7_ai;
    int auto59DC9002_ae;
    int auto59DC9002_ai;
    int auto8F5AF3B1_ae;
    int auto8F5AF3B1_ai;
    fixed autoA23027C4_ae;
    fixed autoA23027C4_ai;
    fixed auto0A2ACFEA_ae;
    fixed auto0A2ACFEA_ai;
    int autoD6A764A9_ae;
    int autoD6A764A9_ai;
    int auto24BBC129_ae;
    int auto24BBC129_ai;
    int auto0E75276C_ae;
    int auto0E75276C_ai;

    // Variable Declarations
    int lv_p;
    int lv_u;
    int lv_i;
    int lv_s;
    int lv_sMax;
    int lv_phalanx;
    fixed lv_c;
    fixed lv_r;
    region lv_region;
    int lv_item;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    gv_intSMax = 0;
    auto403616AB_ae = 8;
    auto403616AB_ai = 1;
    lv_p = 1;
    for ( ; ( (auto403616AB_ai >= 0 && lv_p <= auto403616AB_ae) || (auto403616AB_ai <= 0 && lv_p >= auto403616AB_ae) ) ; lv_p += auto403616AB_ai ) {
        gv_intS[gf_ConvertIndexToPlayer(lv_p)] = 0;
        BoardItemSetText(gv_board, 3, gf_ConvertIndexToPlayer(lv_p), IntToText(0));
        BoardItemSetProgressValue(gv_board, 3, gf_ConvertIndexToPlayer(lv_p), 0.0);
        BoardItemSetProgressRange(gv_board, 3, gf_ConvertIndexToPlayer(lv_p), 0.0, 0.0);
        autoFDE25A86_ae = gv_phalanxCount;
        autoFDE25A86_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (autoFDE25A86_ai >= 0 && lv_phalanx <= autoFDE25A86_ae) || (autoFDE25A86_ai <= 0 && lv_phalanx >= autoFDE25A86_ae) ) ; lv_phalanx += autoFDE25A86_ai ) {
            auto3B9010B7_ae = gv_intCountUnit[gf_ConvertIndexToPlayer(lv_p)][lv_phalanx];
            auto3B9010B7_ai = 1;
            lv_u = 1;
            for ( ; ( (auto3B9010B7_ai >= 0 && lv_u <= auto3B9010B7_ae) || (auto3B9010B7_ai <= 0 && lv_u >= auto3B9010B7_ae) ) ; lv_u += auto3B9010B7_ai ) {
                gv_typeUnit[gf_ConvertIndexToPlayer(lv_p)][lv_u][lv_phalanx] = null;
            }
            gv_intCountUnit[gf_ConvertIndexToPlayer(lv_p)][lv_phalanx] = 0;
            gv_intCountLivingUnit[gf_ConvertIndexToPlayer(lv_p)][lv_phalanx] = 0;
            gv_intCountControlledUnit[gf_ConvertIndexToPlayer(lv_p)][lv_phalanx] = 0;
        }
        gv_intCountLivingUnitPlayer[gf_ConvertIndexToPlayer(lv_p)] = 0;
        gv_boolPlayerInBattle[gf_ConvertIndexToPlayer(lv_p)] = true;
    }
    lv_sMax = 0;
    auto59DC9002_ae = 8;
    auto59DC9002_ai = 1;
    lv_p = 1;
    for ( ; ( (auto59DC9002_ai >= 0 && lv_p <= auto59DC9002_ae) || (auto59DC9002_ai <= 0 && lv_p >= auto59DC9002_ae) ) ; lv_p += auto59DC9002_ai ) {
        lv_s = 0;
        auto8F5AF3B1_ae = gv_phalanxCount;
        auto8F5AF3B1_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto8F5AF3B1_ai >= 0 && lv_phalanx <= auto8F5AF3B1_ae) || (auto8F5AF3B1_ai <= 0 && lv_phalanx >= auto8F5AF3B1_ae) ) ; lv_phalanx += auto8F5AF3B1_ai ) {
            autoA23027C4_ae = (libNtve_gf_HeightOfRegion(gf_PlayerBuildingRegion(gf_ConvertIndexToPlayer(lv_p), lv_phalanx)) - 1.0);
            autoA23027C4_ai = 1.0;
            lv_r = 0.0;
            for ( ; ( (autoA23027C4_ai >= 0 && lv_r <= autoA23027C4_ae) || (autoA23027C4_ai <= 0 && lv_r >= autoA23027C4_ae) ) ; lv_r += autoA23027C4_ai ) {
                auto0A2ACFEA_ae = (libNtve_gf_WidthOfRegion(gf_PlayerBuildingRegion(gf_ConvertIndexToPlayer(lv_p), lv_phalanx)) - 1.0);
                auto0A2ACFEA_ai = 1.0;
                lv_c = 0.0;
                for ( ; ( (auto0A2ACFEA_ai >= 0 && lv_c <= auto0A2ACFEA_ae) || (auto0A2ACFEA_ai <= 0 && lv_c >= auto0A2ACFEA_ae) ) ; lv_c += auto0A2ACFEA_ai ) {
                    lv_region = RegionRect((PointGetX(RegionGetBoundsMin(gf_PlayerBuildingRegion(gf_ConvertIndexToPlayer(lv_p), lv_phalanx)))+lv_c), ((PointGetY(RegionGetBoundsMax(gf_PlayerBuildingRegion(gf_ConvertIndexToPlayer(lv_p), lv_phalanx))) - lv_r) - 1.0), ((PointGetX(RegionGetBoundsMin(gf_PlayerBuildingRegion(gf_ConvertIndexToPlayer(lv_p), lv_phalanx))) + lv_c) + 1.0), (PointGetY(RegionGetBoundsMax(gf_PlayerBuildingRegion(gf_ConvertIndexToPlayer(lv_p), lv_phalanx))) - lv_r));
                    UnitGroupLoopBegin(UnitGroup(null, gf_ConvertIndexToPlayer(lv_p), lv_region, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        autoD6A764A9_ae = CatalogFieldValueCount(c_gameCatalogUnit, UnitGetType(UnitGroupLoopCurrent()), "TechTreeProducedUnitArray", gf_ConvertIndexToPlayer(lv_p));
                        autoD6A764A9_ai = 1;
                        lv_i = 1;
                        for ( ; ( (autoD6A764A9_ai >= 0 && lv_i <= autoD6A764A9_ae) || (autoD6A764A9_ai <= 0 && lv_i >= autoD6A764A9_ae) ) ; lv_i += autoD6A764A9_ai ) {
                            gv_intCountLivingUnitPlayer[gf_ConvertIndexToPlayer(lv_p)] += 1;
                            gv_intCountUnit[gf_ConvertIndexToPlayer(lv_p)][lv_phalanx] += 1;
                            gv_intCountLivingUnit[gf_ConvertIndexToPlayer(lv_p)][lv_phalanx] += 1;
                            gv_typeUnit[gf_ConvertIndexToPlayer(lv_p)][gv_intCountUnit[gf_ConvertIndexToPlayer(lv_p)][lv_phalanx]][lv_phalanx] = UnitTypeFromString(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(UnitGroupLoopCurrent()), "TechTreeProducedUnitArray[" + IntToString((lv_i + -1)) + "]", gf_ConvertIndexToPlayer(lv_p)));
                            auto24BBC129_ae = UnitInventoryCount(UnitGroupLoopCurrent(), c_unitInventoryCountTotal);
                            auto24BBC129_ai = 1;
                            lv_item = 1;
                            for ( ; ( (auto24BBC129_ai >= 0 && lv_item <= auto24BBC129_ae) || (auto24BBC129_ai <= 0 && lv_item >= auto24BBC129_ae) ) ; lv_item += auto24BBC129_ai ) {
                                gv_typeItem[gf_ConvertIndexToPlayer(lv_p)][gv_intCountUnit[gf_ConvertIndexToPlayer(lv_p)][lv_phalanx]][lv_phalanx][lv_item] = UnitGetType(UnitInventoryItem(UnitGroupLoopCurrent(), lv_item));
                            }
                            lv_s += CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitTypeFromString(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(UnitGroupLoopCurrent()), "TechTreeProducedUnitArray[" + IntToString((lv_i + -1)) + "]", gf_ConvertIndexToPlayer(lv_p))), "KillResource[" + IntToString(3) + "]", gf_ConvertIndexToPlayer(lv_p));
                        }
                    }
                    UnitGroupLoopEnd();
                }
            }
            if ((gv_intCountUnit[lv_p][lv_phalanx] == 0)) {
                gv_intCountLivingUnitPlayer[gf_ConvertIndexToPlayer(lv_p)] += 1;
                gv_intCountUnit[gf_ConvertIndexToPlayer(lv_p)][lv_phalanx] += 1;
                gv_intCountLivingUnit[gf_ConvertIndexToPlayer(lv_p)][lv_phalanx] += 1;
                gv_typeUnit[gf_ConvertIndexToPlayer(lv_p)][gv_intCountUnit[gf_ConvertIndexToPlayer(lv_p)][lv_phalanx]][lv_phalanx] = "nban";
                lv_s += CatalogFieldValueGetAsInt(c_gameCatalogUnit, "nban", "KillResource[" + IntToString(3) + "]", gf_ConvertIndexToPlayer(lv_p));
            }

        }
        gv_intSL[gf_ConvertIndexToPlayer(lv_p)] = lv_s;
        BoardItemSetProgressValue(gv_board, 2, gv_intRowBoardOfPlayer[gf_ConvertIndexToPlayer(lv_p)], lv_s);
        BoardItemSetText(gv_board, 2, gv_intRowBoardOfPlayer[gf_ConvertIndexToPlayer(lv_p)], IntToText(lv_s));
        if ((lv_s > lv_sMax)) {
            lv_sMax = lv_s;
        }

    }
    auto0E75276C_ae = gv_intCountPlayer;
    auto0E75276C_ai = 1;
    lv_p = 1;
    for ( ; ( (auto0E75276C_ai >= 0 && lv_p <= auto0E75276C_ae) || (auto0E75276C_ai <= 0 && lv_p >= auto0E75276C_ae) ) ; lv_p += auto0E75276C_ai ) {
        BoardItemSetProgressRange(gv_board, 2, gv_intRowBoardOfPlayer[gf_ConvertIndexToPlayer(lv_p)], 0.0, lv_sMax);
    }
    TriggerExecute(gt_Position, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitUnit_Init () {
    gt_InitUnit = TriggerCreate("gt_InitUnit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Position
//--------------------------------------------------------------------------------------------------
bool gt_Position_Func (bool testConds, bool runActions) {
    int autoE79C7576_ae;
    int autoE79C7576_ai;
    int auto9FE429D4_ae;
    int auto9FE429D4_ai;
    int auto90AE55EB_ae;
    int auto90AE55EB_ai;
    int auto5C284603_ae;
    int auto5C284603_ai;

    // Variable Declarations
    int lv_venue;
    int lv_c;
    int lv_r;
    int lv_i;
    int lv_g;
    int lv_pB;
    int lv_pF;
    int lv_phalanx;
    int lv_item;
    point lv_battlefieldLocation;
    point lv_battlefieldLocationInRow;
    point lv_battlefieldLocationInColumn;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE79C7576_ae = 8;
    autoE79C7576_ai = 1;
    lv_venue = 1;
    for ( ; ( (autoE79C7576_ai >= 0 && lv_venue <= autoE79C7576_ae) || (autoE79C7576_ai <= 0 && lv_venue >= autoE79C7576_ae) ) ; lv_venue += autoE79C7576_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "hfoo", c_unitCreateIgnorePlacement, lib1_gv_playerAtVenue[lv_venue][1], RegionGetCenter(lib1_gf_IndexGetVenue(lv_venue)));
        auto9FE429D4_ae = gv_phalanxCount;
        auto9FE429D4_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto9FE429D4_ai >= 0 && lv_phalanx <= auto9FE429D4_ae) || (auto9FE429D4_ai <= 0 && lv_phalanx >= auto9FE429D4_ae) ) ; lv_phalanx += auto9FE429D4_ai ) {
            auto90AE55EB_ae = gv_phalanxRowCount[lv_phalanx];
            auto90AE55EB_ai = 1;
            lv_r = 1;
            for ( ; ( (auto90AE55EB_ai >= 0 && lv_r <= auto90AE55EB_ae) || (auto90AE55EB_ai <= 0 && lv_r >= auto90AE55EB_ae) ) ; lv_r += auto90AE55EB_ai ) {
                auto5C284603_ae = gv_phalanxColumnCount[lv_phalanx];
                auto5C284603_ai = 1;
                lv_c = 1;
                for ( ; ( (auto5C284603_ai >= 0 && lv_c <= auto5C284603_ae) || (auto5C284603_ai <= 0 && lv_c >= auto5C284603_ae) ) ; lv_c += auto5C284603_ai ) {
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Position_Init () {
    gt_Position = TriggerCreate("gt_Position_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AOhw - Impact
//--------------------------------------------------------------------------------------------------
bool gt_AOhwImpact_Func (bool testConds, bool runActions) {
    unitgroup auto6F07972A_g;
    int auto6F07972A_u;

    // Variable Declarations
    unit lv_caster;
    int lv_level;
    int lv_targetsThisLevel;
    unit lv_lastTarget;
    unit lv_nextTarget;
    unitgroup lv_searchPool;
    unitgroup lv_searchPoolHeroes;
    unitgroup lv_marked;
    fixed lv_healing;
    int lv_markedTargets;
    point lv_searchPoint;
    int lv_casterPlayer;
    unitgroup lv_tempug;
    unit lv_tempu;

    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_level = UnitAbilityGetLevel(lv_caster, libGAwX_gv_aOhwAbilLink);
    lv_targetsThisLevel = (libGAwX_gv_aOhwTargetsBase + (libGAwX_gv_aOhwExtraTargetPerLevel * lv_level));
    lv_lastTarget = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_searchPool = UnitGroupEmpty();
    lv_searchPoolHeroes = UnitGroupEmpty();
    lv_marked = UnitGroupEmpty();
    lv_healing = libGAwX_gv_aOhwHealingArray[lv_level];
    lv_markedTargets = 1;
    lv_casterPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_tempug = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitGroupIsDead(lv_searchPoolHeroes) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gf_HealUnit(lv_lastTarget, lv_healing, lv_caster);
    while ((lv_markedTargets < lv_targetsThisLevel)) {
        UnitGroupAdd(lv_marked, lv_lastTarget);
        lv_markedTargets += 1;
        lv_searchPoint = UnitGetPosition(lv_lastTarget);
        lv_healing *= libGAwX_gv_aOhwHealingReduce;
        lv_searchPool = UnitGroupSearch(null, lv_casterPlayer, lv_searchPoint, libGAwX_gv_aOhwAoERange, gv_aOhwTargetFilter, 0);
        auto6F07972A_g = lv_searchPool;
        auto6F07972A_u = 1;
        for ( ; auto6F07972A_u <= UnitGroupCount(auto6F07972A_g, c_unitCountAll) ; auto6F07972A_u += BoolToInt(lv_tempu == UnitGroupUnit(auto6F07972A_g, auto6F07972A_u)) ) {
            lv_tempu = UnitGroupUnit(auto6F07972A_g, auto6F07972A_u);
            if ((libGAwX_gf_UnitLifeIsFull(lv_tempu) == false)) {
                UnitGroupAdd(lv_tempug, lv_tempu);
            }

        }
        lv_searchPool = lv_tempug;
        UnitGroupRemoveUnitGroup(lv_searchPool, lv_marked);
        lv_searchPoolHeroes = UnitGroupFilter(null, c_playerAny, lv_searchPool, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((libNtve_gf_UnitGroupIsDead(lv_searchPoolHeroes) == false)) {
            lv_nextTarget = UnitGroupClosestToPoint(lv_searchPoolHeroes, lv_searchPoint);
        }
        else {
            lv_nextTarget = UnitGroupClosestToPoint(lv_searchPool, lv_searchPoint);
        }
        if ((UnitIsValid(lv_nextTarget) == true)) {
            UnitCreateEffectUnit(lv_lastTarget, "AOhwSecondaryLightningDummy", lv_nextTarget);
            Wait(libGAwX_gv_aOhwHealingDelay, c_timeGame);
            libGAwX_gf_HealUnit(lv_nextTarget, lv_healing, lv_caster);
            lv_lastTarget = lv_nextTarget;
        }
        else {
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AOhwImpact_Init () {
    gt_AOhwImpact = TriggerCreate("gt_AOhwImpact_Func");
    TriggerAddEventPlayerEffectUsed(gt_AOhwImpact, c_playerAny, "AOhwMainmIpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: moon - Moonstone - Change TOD
//--------------------------------------------------------------------------------------------------
bool gt_moonMoonstoneChangeTOD_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGAwX_gv_moonTODCritSection == 0)) {
        libGAwX_gv_oldTOD = GameTimeOfDayGet();
        libGAwX_gf_SetWar3TimeOfDay(libGAwX_gv_newTOD);
        libGAwX_gf_PauseUnpauseTimeOfDayWar3(true);
        ActorSend(libGAwX_gv_tODActor, "AnimPlay Cover Cover");
    }

    libGAwX_gv_moonTODCritSection += 1;
    Wait(gv_moonDuration, c_timeGame);
    TriggerExecute(gt_moonMoonstoneRestoreTOD, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_moonMoonstoneChangeTOD_Init () {
    gt_moonMoonstoneChangeTOD = TriggerCreate("gt_moonMoonstoneChangeTOD_Func");
    TriggerAddEventPlayerEffectUsed(gt_moonMoonstoneChangeTOD, c_playerAny, "AIct");
}

//--------------------------------------------------------------------------------------------------
// Trigger: moon - Moonstone - Restore TOD
//--------------------------------------------------------------------------------------------------
bool gt_moonMoonstoneRestoreTOD_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGAwX_gv_moonTODCritSection -= 1;
    if ((libGAwX_gv_moonTODCritSection <= 0)) {
        libGAwX_gf_SetWar3TimeOfDay(gv_defaultTOD);
        libGAwX_gf_PauseUnpauseTimeOfDayWar3(false);
        ActorSend(libGAwX_gv_tODActor, "AnimClear Cover");
        Wait(0.125, c_timeGame);
        libGAwX_gf_PauseUnpauseTimeOfDayWar3(true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_moonMoonstoneRestoreTOD_Init () {
    gt_moonMoonstoneRestoreTOD = TriggerCreate("gt_moonMoonstoneRestoreTOD_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Awar - Target Check
//--------------------------------------------------------------------------------------------------
bool gt_AwarTargetCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    int lv_player;

    // Variable Initialization
    lv_caster = EventUnit();
    lv_target = EventUnitTarget();
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitFilterMatch(lv_target, lv_player, gv_awarFilter) == true)) {
        UnitBehaviorRemove(lv_caster, gv_awarController, c_unitBehaviorCountAll);
    }
    else {
        UnitBehaviorAdd(lv_caster, gv_awarController, lv_caster, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AwarTargetCheck_Init () {
    gt_AwarTargetCheck = TriggerCreate("gt_AwarTargetCheck_Func");
    TriggerAddEventUnitStartedAttack2(gt_AwarTargetCheck, null, "otau1");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Arai - Summon Count
//--------------------------------------------------------------------------------------------------
bool gt_AraiSummonCount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;
    int lv_c;
    int lv_i;
    unit lv_ukill;
    unitgroup lv_ug;

    // Variable Initialization
    lv_u = EventUnitCreatedUnit();
    lv_p = UnitGetOwner(lv_u);
    lv_ug = libGAwX_gv_playerSkeletons[lv_p];

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lv_ug, lv_u);
    while ((UnitGroupCount(lv_ug, c_unitCountAlive) > gv_bj_MAX_SKELETONS)) {
        lv_ukill = UnitGroupUnit(lv_ug, 1);
        UnitGroupRemove(lv_ug, lv_ukill);
        UnitKill(lv_ukill);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AraiSummonCount_Init () {
    gt_AraiSummonCount = TriggerCreate("gt_AraiSummonCount_Func");
    TriggerAddEventUnitCreated(gt_AraiSummonCount, null, "Arai", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AOcl - Impact
//--------------------------------------------------------------------------------------------------
bool gt_AOclImpact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_level;
    int lv_targetsThisLevel;
    unit lv_lastTarget;
    unit lv_nextTarget;
    unitgroup lv_searchPool;
    unitgroup lv_marked;
    fixed lv_damage;
    int lv_markedTargets;
    point lv_searchPoint;
    int lv_casterPlayer;

    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_level = UnitAbilityGetLevel(lv_caster, libGAwX_gv_aOclAbilLink);
    lv_targetsThisLevel = 8;
    lv_lastTarget = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_searchPool = UnitGroupEmpty();
    lv_marked = UnitGroupEmpty();
    lv_damage = libGAwX_gv_aOclDamageArray[lv_level];
    lv_markedTargets = 1;
    lv_casterPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_markedTargets < lv_targetsThisLevel)) {
        UnitGroupAdd(lv_marked, lv_lastTarget);
        lv_markedTargets += 1;
        lv_searchPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
        lv_damage *= gv_aOclDamageReduce;
        lv_searchPool = UnitGroupSearch(null, lv_casterPlayer, lv_searchPoint, libGAwX_gv_aOclAoERange, gv_aOclTargetFilter, libGAwX_gv_aOclTargetsMax);
        UnitGroupRemoveUnitGroup(lv_searchPool, lv_marked);
        lv_nextTarget = UnitGroupClosestToPoint(lv_searchPool, lv_searchPoint);
        if ((UnitIsValid(lv_nextTarget) == true) && (UnitIsAlive(lv_nextTarget) == true)) {
            UnitCreateEffectUnit(lv_lastTarget, "AOclSecondaryLightningDummy", lv_nextTarget);
            Wait(gv_aOclDamageDelay, c_timeGame);
            if ((UnitIsValid(lv_nextTarget) == true) && (UnitIsAlive(lv_nextTarget) == true)) {
                UnitDamage(lv_caster, "AOclSecondaryTriggerDamage", lv_nextTarget, lv_damage);
            }

            lv_lastTarget = lv_nextTarget;
        }
        else {
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AOclImpact_Init () {
    gt_AOclImpact = TriggerCreate("gt_AOclImpact_Func");
    TriggerAddEventPlayerEffectUsed(gt_AOclImpact, c_playerAny, "AOclMainmIpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aspl - Marker
//--------------------------------------------------------------------------------------------------
bool gt_AsplMarker_Func (bool testConds, bool runActions) {
    int autoA30234EA_ae;
    int autoA30234EA_ai;
    unitgroup autoC765B577_g;
    int autoC765B577_u;
    unitgroup auto2E2455BD_g;
    int auto2E2455BD_u;

    // Variable Declarations
    unitgroup lv_ug;
    unit lv_target;
    int lv_player;
    unit lv_a;
    unit lv_b;
    unitgroup lv_unfitGroup;
    unit lv_testUnit;
    fixed lv_life;
    int lv_i;
    unit lv_u;

    // Variable Initialization
    lv_ug = UnitGroupEmpty();
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_unfitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_target, libGAwX_gv_asplMarkerBuff, c_unitBehaviorCountAll);
    Wait(0.0625, c_timeGame);
    autoA30234EA_ae = (libGAwX_gv_asplMaxTargets - 1);
    autoA30234EA_ai = 1;
    lv_i = 1;
    for ( ; ( (autoA30234EA_ai >= 0 && lv_i <= autoA30234EA_ae) || (autoA30234EA_ai <= 0 && lv_i >= autoA30234EA_ae) ) ; lv_i += autoA30234EA_ai ) {
        lv_life = 0.0;
        UnitGroupLoopBegin(UnitGroupSearch(null, lv_player, UnitGetPosition(lv_target), gv_asplRadius, gv_asplTargetFilter, 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitHasBehavior(UnitGroupLoopCurrent(), libGAwX_gv_asplMarkerBuff) == false) && (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) > lv_life) && (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) > 25.0) && (UnitGroupHasUnit(lv_ug, UnitGroupLoopCurrent()) == false)) {
                lv_life = UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent);
                lv_u = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitGroupAdd(lv_ug, lv_u);
    }
    UnitGroupAdd(lv_ug, lv_target);
    autoC765B577_g = lv_ug;
    autoC765B577_u = 1;
    for ( ; autoC765B577_u <= UnitGroupCount(autoC765B577_g, c_unitCountAll) ; autoC765B577_u += BoolToInt(lv_a == UnitGroupUnit(autoC765B577_g, autoC765B577_u)) ) {
        lv_a = UnitGroupUnit(autoC765B577_g, autoC765B577_u);
        auto2E2455BD_g = lv_ug;
        auto2E2455BD_u = 1;
        for ( ; auto2E2455BD_u <= UnitGroupCount(auto2E2455BD_g, c_unitCountAll) ; auto2E2455BD_u += BoolToInt(lv_b == UnitGroupUnit(auto2E2455BD_g, auto2E2455BD_u)) ) {
            lv_b = UnitGroupUnit(auto2E2455BD_g, auto2E2455BD_u);
            UnitCreateEffectUnit(lv_a, libGAwX_gv_asplMarkerEffect, lv_b);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AsplMarker_Init () {
    gt_AsplMarker = TriggerCreate("gt_AsplMarker_Func");
    TriggerAddEventPlayerEffectUsed(gt_AsplMarker, c_playerAny, libGAwX_gv_asplNoticeEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aspl - Split Template
//--------------------------------------------------------------------------------------------------
bool gt_AsplSplitTemplate_Func (bool testConds, bool runActions) {
    int autoCB423A90_ae;
    int autoCB423A90_ai;

    // Variable Declarations
    unit lv_u;
    int lv_player;
    int lv_stack;
    fixed lv_originalDamage;
    fixed lv_actuallDamage;
    unit lv_damager;
    fixed lv_mainDamage;
    fixed lv_splitDamage;
    unitgroup lv_linkedGroup;
    unit lv_splitTarget;
    int lv_i;

    // Variable Initialization
    lv_u = EventUnit();
    lv_player = EventPlayer();
    lv_stack = UnitBehaviorCount(lv_u, libGAwX_gv_asplMarkerBuff);
    lv_originalDamage = EventUnitDamageAbsorbed();
    lv_actuallDamage = EventUnitDamageAmount();
    lv_damager = EventUnitDamageSourceUnit();
    lv_mainDamage = (lv_originalDamage * gv_asplSplitFactor);
    lv_linkedGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_damager) == true))) {
            return false;
        }

        if (!((lv_actuallDamage == 0.0))) {
            return false;
        }

        if (!((lv_originalDamage != 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_stack > 0)) {
        UnitDamage(lv_damager, libGAwX_gv_asplMainDamageEffect, lv_u, lv_mainDamage);
        lv_splitDamage = ((lv_originalDamage - lv_mainDamage) / lv_stack);
        autoCB423A90_ae = (lv_stack - 1);
        autoCB423A90_ai = 1;
        lv_i = 0;
        for ( ; ( (autoCB423A90_ai >= 0 && lv_i <= autoCB423A90_ae) || (autoCB423A90_ai <= 0 && lv_i >= autoCB423A90_ae) ) ; lv_i += autoCB423A90_ai ) {
            lv_splitTarget = UnitBehaviorEffectUnit(lv_u, libGAwX_gv_asplMarkerBuff, c_effectUnitCaster, lv_i);
            if ((UnitIsAlive(lv_splitTarget) == true)) {
                UnitDamage(lv_damager, libGAwX_gv_asplSplitDamageEffect, lv_splitTarget, lv_splitDamage);
            }

        }
    }
    else {
        UnitDamage(lv_damager, libGAwX_gv_asplMainDamageEffect, lv_u, lv_originalDamage);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AsplSplitTemplate_Init () {
    gt_AsplSplitTemplate = TriggerCreate("gt_AsplSplitTemplate_Func");
    TriggerEnable(gt_AsplSplitTemplate, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aspl - Register
//--------------------------------------------------------------------------------------------------
bool gt_AsplRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    trigger lv_trigger;
    unit lv_u;
    int lv_uid;

    // Variable Initialization
    lv_trigger = TriggerCreate("gt_AsplSplitTemplate_Func");;
    lv_u = EventUnit();
    lv_uid = UnitGetTag(lv_u);

    // Actions
    if (!runActions) {
        return true;
    }

    GAw3_AddEventUnitDamaged(lv_trigger, lv_u, c_unitDamageTypeAny, c_unitDamageEither, null);
    libGAwX_gf_SetUnitTriggerMarker(lv_u, libGAwX_gv_asplTriggerMarker, lv_trigger);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AsplRegister_Init () {
    gt_AsplRegister = TriggerCreate("gt_AsplRegister_Func");
    TriggerAddEventUnitBehaviorChange(gt_AsplRegister, null, libGAwX_gv_asplMarkerBuff, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitMap
//--------------------------------------------------------------------------------------------------
bool gt_InitMap_Func (bool testConds, bool runActions) {
    playergroup autoC889599C_g;
    int autoC889599C_p;
    int auto4C92AB19_ae;
    int auto4C92AB19_ai;

    // Variable Declarations
    int lv_p;
    playergroup lv_pg;
    string lv_race;
    string lv_raceAtt;
    int lv_r;

    // Variable Initialization
    lv_pg = PlayerGroupActive();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boolTestMode = false;
    TriggerEnable(libGAwX_gt_AegrElunesGraceRegister, false);
    TriggerEnable(libGAwX_gt_AdefDefendInitRegister, false);
    TriggerEnable(libGAwX_gt_AsplMarker, false);
    TriggerEnable(libGAwX_gt_AsplRegister, false);
    TriggerEnable(libGAwX_gt_AOclImpact, false);
    TriggerEnable(libGAwX_gt_AraiSummonCount, false);
    TriggerEnable(libGAwX_gt_AwarTargetCheck, false);
    TriggerEnable(libGAwX_gt_moonMoonstoneChangeTOD, false);
    TriggerEnable(libGAwX_gt_AOhwImpact, false);
    BankLoad("AncientWar", 1);
    gv_bank[1] = BankLastCreated();
    BankLoad("AncientWar", 2);
    gv_bank[2] = BankLastCreated();
    BankLoad("AncientWar", 3);
    gv_bank[3] = BankLastCreated();
    BankLoad("AncientWar", 4);
    gv_bank[4] = BankLastCreated();
    BankLoad("AncientWar", 5);
    gv_bank[5] = BankLastCreated();
    BankLoad("AncientWar", 6);
    gv_bank[6] = BankLastCreated();
    BankLoad("AncientWar", 7);
    gv_bank[7] = BankLastCreated();
    BankLoad("AncientWar", 8);
    gv_bank[8] = BankLastCreated();
    VisEnable(c_visTypeMask, true);
    VisEnable(c_visTypeFog, true);
    libGAwX_gf_SetWar3TimeOfDay("13:00:00");
    libGAwX_gf_PauseUnpauseTimeOfDayWar3(true);
    libNtve_gf_SetPlayerGroupAlliance(PlayerGroupActive(), libNtve_ge_AllianceSetting_Enemy);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, gv_info);
    autoC889599C_g = lv_pg; 
    autoC889599C_p = 1;
    for ( ; autoC889599C_p <= PlayerGroupCount(autoC889599C_g) ; autoC889599C_p += BoolToInt(lv_p == PlayerGroupPlayer(autoC889599C_g, autoC889599C_p)) ) {
        lv_p = PlayerGroupPlayer(autoC889599C_g, autoC889599C_p);
        lv_raceAtt = GameAttributePlayerValue("[bnet:War3 Extra (GA)/0.0/60618,file:Mods\\WarCraft\\WarCraftDataAbil.SC2Mod]1", lv_p);
        lv_race = libGAwX_gf_GenerateRaceFromRaceAttribute(lv_raceAtt);
        libGAwX_gf_SetPlayerUIRace(lv_p, lv_race);
        PlayerOptionOverride(lv_p, "displayunitstatus", "All");
        PlayerOptionOverride(lv_p, "simplecommandcard", "0");
        PlayerOptionOverride(lv_p, "selectuncontrolable", "1");
        CameraLockInput(lv_p, true);
        BankOptionSet(gv_bank[lv_p], c_bankOptionSignature, true);
    }
    gv_optionCommandable = true;
    gv_playergroupDebug = PlayerGroupEmpty();
    gv_behaviorFlagRaiseDead = c_unitBehaviorFlagUser1;
    gv_phalanxCount = 3;
    gv_phalanxColumnCount[1] = 6;
    gv_phalanxRowCount[1] = 6;
    gv_textPhalanx[1] = StringExternal("Param/Value/783E1AF7");
    gv_phalanxColumnCount[2] = 6;
    gv_phalanxRowCount[2] = 6;
    gv_textPhalanx[2] = StringExternal("Param/Value/AEAE1864");
    gv_phalanxColumnCount[3] = 6;
    gv_phalanxRowCount[3] = 6;
    gv_textPhalanx[3] = StringExternal("Param/Value/36BBF8DE");
    gv_fixedTime = 40.0;
    gv_fixedTimeLastRound = 100.0;
    auto4C92AB19_ae = 16;
    auto4C92AB19_ai = 1;
    lv_r = 1;
    for ( ; ( (auto4C92AB19_ai >= 0 && lv_r <= auto4C92AB19_ae) || (auto4C92AB19_ai <= 0 && lv_r >= auto4C92AB19_ae) ) ; lv_r += auto4C92AB19_ai ) {
        gv_intG[lv_r] = 225;
    }
    gv_intG[1] = 75;
    gv_intG[2] = 75;
    gv_intG[3] = 150;
    gv_intG[4] = 150;
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_InitPlayer, true, false);
    TriggerExecute(gt_InitRandomGroup, true, false);
    TriggerExecute(gt_InitRandomRound, true, false);
    TriggerExecute(gt_InitScheduleAllPlayAll, true, false);
    TriggerExecute(gt_InitPlayerFinal2, true, false);
    TriggerExecute(gt_InitBoard, true, false);
    TriggerExecute(gt_InitTag, true, false);
    TriggerExecute(gt_InitWorker, true, false);
    if ((gv_boolTestMode == true)) {
        TriggerExecute(gt_TestMode, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitMap_Init () {
    gt_InitMap = TriggerCreate("gt_InitMap_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TestMode
//--------------------------------------------------------------------------------------------------
bool gt_TestMode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    int lv_r;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playergroupDebug = PlayerGroupAll();
    TriggerEnable(gt_GetRadomItem, true);
    TriggerEnable(gt_SetOwner, true);
    TriggerEnable(gt_Restart, true);
    TriggerEnable(gt_Set, true);
    TriggerEnable(gt_UnitRemove, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestMode_Init () {
    gt_TestMode = TriggerCreate("gt_TestMode_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: GetRadomItem
//--------------------------------------------------------------------------------------------------
bool gt_GetRadomItem_Func (bool testConds, bool runActions) {
    bool autoCF0C3BAC_val;

    // Variable Declarations
    int lv_r;
    bool lv_b;
    fixed lv_t;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_b = false;
    while (true) {
        if ((lv_b == false)) {
            lv_r = RandomInt(1, CatalogFieldValueCount(c_gameCatalogUnit, "Item", "TechTreeProducedUnitArray", EventPlayer()));
            if ((CatalogFieldValueGetAsInt(c_gameCatalogItem, UnitTypeFromString(CatalogFieldValueGet(c_gameCatalogUnit, "Item", "TechTreeProducedUnitArray[" + IntToString((lv_r + -1)) + "]", EventPlayer())), "Level", EventPlayer()) <= (gv_intRound + TechTreeUpgradeCount(EventPlayer(), "ItemLevel", c_techCountCompleteOnly))) && (CatalogFieldValueGetAsInt(c_gameCatalogItem, UnitTypeFromString(CatalogFieldValueGet(c_gameCatalogUnit, "Item", "TechTreeProducedUnitArray[" + IntToString((lv_r + -1)) + "]", EventPlayer())), "Level", EventPlayer()) > TechTreeUpgradeCount(EventPlayer(), "ItemLevel", c_techCountCompleteOnly))) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitTypeFromString(CatalogFieldValueGet(c_gameCatalogUnit, "Item", "TechTreeProducedUnitArray[" + IntToString((lv_r + -1)) + "]", EventPlayer())), 0, 0, UnitGetPosition(gv_unitWorker[EventPlayer()]));
                autoCF0C3BAC_val = EventKeyControl();
                if (autoCF0C3BAC_val == true) {
                    UnitGroupLoopBegin(UnitGroupSelected(EventPlayer()));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        libGAwX_gf_UnitInventoryCreate(UnitGroupLoopCurrent(), UnitLastCreated());
                    }
                    UnitGroupLoopEnd();
                }
                else if (autoCF0C3BAC_val == false) {
                    libGAwX_gf_UnitInventoryCreate(gv_unitWorker[EventPlayer()], UnitLastCreated());
                }
                else {
                }
                lv_b = true;
            }
            else {
                lv_b = false;
            }
        }
        else {
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GetRadomItem_Init () {
    gt_GetRadomItem = TriggerCreate("gt_GetRadomItem_Func");
    TriggerEnable(gt_GetRadomItem, false);
    TriggerAddEventKeyPressed(gt_GetRadomItem, c_playerAny, c_keyZ, true, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SetOwner
//--------------------------------------------------------------------------------------------------
bool gt_SetOwner_Func (bool testConds, bool runActions) {
    int auto1B29A88B_ae;
    int auto1B29A88B_ai;
    int auto41930F85_ae;
    int auto41930F85_ai;

    // Variable Declarations
    int lv_p;
    int lv_phalanx;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((AbilityClass(EventUnitCreatedAbil()) == c_classIdCAbilBuild)) {
        Wait(5.0, c_timeGame);
        auto1B29A88B_ae = gv_intCountPlayer;
        auto1B29A88B_ai = 1;
        lv_p = 1;
        for ( ; ( (auto1B29A88B_ai >= 0 && lv_p <= auto1B29A88B_ae) || (auto1B29A88B_ai <= 0 && lv_p >= auto1B29A88B_ae) ) ; lv_p += auto1B29A88B_ai ) {
            auto41930F85_ae = gv_phalanxCount;
            auto41930F85_ai = 1;
            lv_phalanx = 1;
            for ( ; ( (auto41930F85_ai >= 0 && lv_phalanx <= auto41930F85_ae) || (auto41930F85_ai <= 0 && lv_phalanx >= auto41930F85_ae) ) ; lv_phalanx += auto41930F85_ai ) {
                if ((RegionContainsPoint(gf_PlayerBuildingRegion(lv_p, lv_phalanx), UnitGetPosition(EventUnitCreatedUnit())) == true)) {
                    UnitSetOwner(EventUnitCreatedUnit(), gv_intPlayer[lv_p], true);
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetOwner_Init () {
    gt_SetOwner = TriggerCreate("gt_SetOwner_Func");
    TriggerEnable(gt_SetOwner, false);
    TriggerAddEventUnitCreated(gt_SetOwner, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Restart
//--------------------------------------------------------------------------------------------------
bool gt_Restart_Func (bool testConds, bool runActions) {
    int auto572301AB_val;
    playergroup auto15328222_g;
    int auto15328222_p;

    // Variable Declarations
    int lv_p;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto572301AB_val = EventKeyPressed();
    if (auto572301AB_val == c_keyF5) {
        TriggerExecute(gt_InitUnit, true, false);
    }
    else if (auto572301AB_val == c_keyF6) {
        TriggerExecute(gt_AI, true, false);
    }
    else if (auto572301AB_val == c_keyF7) {
        if ((TriggerIsEnabled(gt_WinLossPeriod) == false)) {
            TriggerEnable(gt_WinLossPeriod, true);
        }
        else {
            TriggerEnable(gt_WinLossPeriod, false);
        }
    }
    else {
    }
    auto15328222_g = PlayerGroupActive(); 
    auto15328222_p = 1;
    for ( ; auto15328222_p <= PlayerGroupCount(auto15328222_g) ; auto15328222_p += BoolToInt(lv_p == PlayerGroupPlayer(auto15328222_g, auto15328222_p)) ) {
        lv_p = PlayerGroupPlayer(auto15328222_g, auto15328222_p);
        TechTreeUpgradeAddLevel(lv_p, "Pause", 1);
        TechTreeUpgradeAddLevel(lv_p, "Final", 1);
        VisRevealArea(lv_p, RegionPlayableMap(), 0.0, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Restart_Init () {
    gt_Restart = TriggerCreate("gt_Restart_Func");
    TriggerEnable(gt_Restart, false);
    TriggerAddEventKeyPressed(gt_Restart, c_playerAny, c_keyNone, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set
//--------------------------------------------------------------------------------------------------
bool gt_Set_Func (bool testConds, bool runActions) {
    string auto8299A310_val;
    int auto8231EE13_ae;
    int auto8231EE13_ai;
    int autoFBE129DA_ae;
    int autoFBE129DA_ai;
    int autoF3E03BF2_ae;
    int autoF3E03BF2_ai;
    int auto75282EDF_ae;
    int auto75282EDF_ai;
    int auto8443F99F_ae;
    int auto8443F99F_ai;
    int auto3A5FA517_ae;
    int auto3A5FA517_ai;
    int autoB88749DF_ae;
    int autoB88749DF_ai;
    int auto8666E55C_ae;
    int auto8666E55C_ai;
    int autoFD23C56A_ae;
    int autoFD23C56A_ai;

    // Variable Declarations
    int lv_p;
    int lv_phalanx;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_stringFieldPath = StringWord(EventChatMessage(false), 2);
    gv_stringValue = StringWord(EventChatMessage(false), 3);
    auto8299A310_val = StringWord(EventChatMessage(false), 1);
    if (auto8299A310_val == "Score") {
        BankValueSetFromInt(gv_bank[EventPlayer()], "Score", StringWord(EventChatMessage(false), 2), StringToInt(StringWord(EventChatMessage(false), 3)));
    }
    else if (auto8299A310_val == "Save") {
        BankSave(gv_bank[EventPlayer()]);
    }
    else if (auto8299A310_val == "Living") {
        auto8231EE13_ae = gv_intCountPlayer;
        auto8231EE13_ai = 1;
        lv_p = 1;
        for ( ; ( (auto8231EE13_ai >= 0 && lv_p <= auto8231EE13_ae) || (auto8231EE13_ai <= 0 && lv_p >= auto8231EE13_ae) ) ; lv_p += auto8231EE13_ai ) {
            UIDisplayMessage(gv_playergroupDebug, c_messageAreaSubtitle, (TextWithColor(PlayerName(gv_intPlayer[lv_p]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_intPlayer[lv_p], false))) + StringExternal("Param/Value/3D471B02") + IntToText(gv_intCountLivingUnitPlayer[gv_intPlayer[lv_p]])));
        }
    }
    else if (auto8299A310_val == "Gold") {
        autoFBE129DA_ae = gv_intCountPlayer;
        autoFBE129DA_ai = 1;
        lv_p = 1;
        for ( ; ( (autoFBE129DA_ai >= 0 && lv_p <= autoFBE129DA_ae) || (autoFBE129DA_ai <= 0 && lv_p >= autoFBE129DA_ae) ) ; lv_p += autoFBE129DA_ai ) {
            PlayerModifyPropertyInt(gv_intPlayer[lv_p], c_playerPropTerrazine, c_playerPropOperSetTo, StringToInt(StringWord(EventChatMessage(false), 2)));
        }
    }
    else if (auto8299A310_val == "Lumber") {
        autoF3E03BF2_ae = gv_intCountPlayer;
        autoF3E03BF2_ai = 1;
        lv_p = 1;
        for ( ; ( (autoF3E03BF2_ai >= 0 && lv_p <= autoF3E03BF2_ae) || (autoF3E03BF2_ai <= 0 && lv_p >= autoF3E03BF2_ae) ) ; lv_p += autoF3E03BF2_ai ) {
            PlayerModifyPropertyInt(gv_intPlayer[lv_p], c_playerPropCustom, c_playerPropOperSetTo, StringToInt(StringWord(EventChatMessage(false), 2)));
        }
    }
    else if (auto8299A310_val == "Round") {
        gv_intRound = StringToInt(StringWord(EventChatMessage(false), 2));
        gv_intBonusRound = 0;
        gv_intFinalRound = 0;
        auto75282EDF_ae = gv_phalanxCount;
        auto75282EDF_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto75282EDF_ai >= 0 && lv_phalanx <= auto75282EDF_ae) || (auto75282EDF_ai <= 0 && lv_phalanx >= auto75282EDF_ae) ) ; lv_phalanx += auto75282EDF_ai ) {
            gv_phalanxRowCount[lv_phalanx] = 6;
        }
    }
    else if (auto8299A310_val == "BonusRound") {
        gv_intRound = (gv_intCountRound + 1);
        gv_intBonusRound = StringToInt(StringWord(EventChatMessage(false), 2));
        gv_intFinalRound = 0;
        auto8443F99F_ae = gv_phalanxCount;
        auto8443F99F_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto8443F99F_ai >= 0 && lv_phalanx <= auto8443F99F_ae) || (auto8443F99F_ai <= 0 && lv_phalanx >= auto8443F99F_ae) ) ; lv_phalanx += auto8443F99F_ai ) {
            gv_phalanxRowCount[lv_phalanx] = 6;
        }
    }
    else if (auto8299A310_val == "FinalRound") {
        gv_intRound = (gv_intCountRound + 1);
        gv_intBonusRound = (gv_intCountBonusRound + 1);
        gv_intFinalRound = StringToInt(StringWord(EventChatMessage(false), 2));
        auto3A5FA517_ae = gv_phalanxCount;
        auto3A5FA517_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto3A5FA517_ai >= 0 && lv_phalanx <= auto3A5FA517_ae) || (auto3A5FA517_ai <= 0 && lv_phalanx >= auto3A5FA517_ae) ) ; lv_phalanx += auto3A5FA517_ai ) {
            gv_phalanxRowCount[lv_phalanx] = 16;
        }
    }
    else if (auto8299A310_val == "I") {
        if ((StringWord(EventChatMessage(false), 2) == "A")) {
            UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "oli2", 0, 0, UnitGetPosition(UnitGroupLoopCurrent()));
                libGAwX_gf_UnitInventoryCreate(UnitGroupLoopCurrent(), UnitLastCreated());
            }
            UnitGroupLoopEnd();
        }
        else {
            UnitGroupLoopBegin(UnitGroupSelected(EventPlayer()));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitTypeFromString(StringWord(EventChatMessage(false), 2)), 0, 0, UnitGetPosition(UnitGroupLoopCurrent()));
                libGAwX_gf_UnitInventoryCreate(UnitGroupLoopCurrent(), UnitLastCreated());
            }
            UnitGroupLoopEnd();
        }
    }
    else if (auto8299A310_val == "U") {
        gv_gameCatalog = c_gameCatalogUnit;
        UnitGroupLoopBegin(UnitGroupSelected(EventPlayer()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            autoB88749DF_ae = gv_intCountPlayer;
            autoB88749DF_ai = 1;
            lv_p = 1;
            for ( ; ( (autoB88749DF_ai >= 0 && lv_p <= autoB88749DF_ae) || (autoB88749DF_ai <= 0 && lv_p >= autoB88749DF_ae) ) ; lv_p += autoB88749DF_ai ) {
                CatalogFieldValueSet(gv_gameCatalog, UnitGetType(UnitGroupLoopCurrent()), gv_stringFieldPath, gv_intPlayer[lv_p], gv_stringValue);
            }
        }
        UnitGroupLoopEnd();
    }
    else if (auto8299A310_val == "E") {
        gv_gameCatalog = c_gameCatalogEffect;
        UnitGroupLoopBegin(UnitGroupSelected(EventPlayer()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            auto8666E55C_ae = gv_intCountPlayer;
            auto8666E55C_ai = 1;
            lv_p = 1;
            for ( ; ( (auto8666E55C_ai >= 0 && lv_p <= auto8666E55C_ae) || (auto8666E55C_ai <= 0 && lv_p >= auto8666E55C_ae) ) ; lv_p += auto8666E55C_ai ) {
                CatalogFieldValueSet(gv_gameCatalog, ((UnitGetType(UnitGroupLoopCurrent())) + "1"), gv_stringFieldPath, gv_intPlayer[lv_p], gv_stringValue);
            }
        }
        UnitGroupLoopEnd();
    }
    else if (auto8299A310_val == "W") {
        gv_gameCatalog = c_gameCatalogWeapon;
        UnitGroupLoopBegin(UnitGroupSelected(EventPlayer()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            autoFD23C56A_ae = gv_intCountPlayer;
            autoFD23C56A_ai = 1;
            lv_p = 1;
            for ( ; ( (autoFD23C56A_ai >= 0 && lv_p <= autoFD23C56A_ae) || (autoFD23C56A_ai <= 0 && lv_p >= autoFD23C56A_ae) ) ; lv_p += autoFD23C56A_ai ) {
                CatalogFieldValueSet(gv_gameCatalog, ((UnitGetType(UnitGroupLoopCurrent())) + "1"), gv_stringFieldPath, gv_intPlayer[lv_p], gv_stringValue);
            }
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Set_Init () {
    gt_Set = TriggerCreate("gt_Set_Func");
    TriggerEnable(gt_Set, false);
    TriggerAddEventChatMessage(gt_Set, c_playerAny, " ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitRemove
//--------------------------------------------------------------------------------------------------
bool gt_UnitRemove_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroupSelected(EventPlayer()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitRemove_Init () {
    gt_UnitRemove = TriggerCreate("gt_UnitRemove_Func");
    TriggerEnable(gt_UnitRemove, false);
    TriggerAddEventKeyPressed(gt_UnitRemove, c_playerAny, c_keyB, true, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitPlayer
//--------------------------------------------------------------------------------------------------
bool gt_InitPlayer_Func (bool testConds, bool runActions) {
    int auto9E09E3A6_ae;
    int auto9E09E3A6_ai;
    int autoB3544A31_ae;
    int autoB3544A31_ai;
    int autoC37108B5_ae;
    int autoC37108B5_ai;
    int auto9E8EA631_val;

    // Variable Declarations
    int lv_p;
    int lv_pActv;
    int lv_g;
    int lv_r;
    bool lv_bRpt;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_p += 1;
        gv_intPlayerActive[lv_p] = PlayerGroupLoopCurrent();
        gv_intPlayer[lv_p] = PlayerGroupLoopCurrent();
    }
    PlayerGroupLoopEnd();
    gv_intCountPlayerActive = lv_p;
    if ((ModI(gv_intCountPlayerActive, 2) != 0)) {
        while (true) {
            lv_bRpt = false;
            lv_r = RandomInt(1, (gv_intCountPlayerActive + 1));
            auto9E09E3A6_ae = gv_intCountPlayerActive;
            auto9E09E3A6_ai = 1;
            lv_pActv = 1;
            for ( ; ( (auto9E09E3A6_ai >= 0 && lv_pActv <= auto9E09E3A6_ae) || (auto9E09E3A6_ai <= 0 && lv_pActv >= auto9E09E3A6_ae) ) ; lv_pActv += auto9E09E3A6_ai ) {
                if ((lv_r == gv_intPlayerActive[lv_pActv])) {
                    lv_bRpt = true;
                }

            }
            if ((lv_bRpt == false)) {
                lv_p += 1;
                gv_intPlayer[lv_p] = lv_r;
                break;
            }

        }
    }

    gv_intCountPlayer = lv_p;
    gv_intCountRound = (gv_intCountPlayer - 1);
    if ((gv_intCountPlayer <= 8)) {
        gv_intCountBonusRound = 1;
    }
    else {
        gv_intCountBonusRound = 2;
    }
    gv_intCountFinalRound = (gv_intCountPlayer - 1);
    autoB3544A31_ae = gv_intCountPlayer;
    autoB3544A31_ai = 1;
    lv_p = 1;
    for ( ; ( (autoB3544A31_ai >= 0 && lv_p <= autoB3544A31_ae) || (autoB3544A31_ai <= 0 && lv_p >= autoB3544A31_ae) ) ; lv_p += autoB3544A31_ai ) {
        if ((ModI(lv_p, 2) == 1)) {
            lv_g += 1;
        }

        gv_intGroupPlayer[lv_p] = lv_g;
    }
    gv_intCountGroup = lv_g;
    autoC37108B5_ae = gv_intCountPlayer;
    autoC37108B5_ai = 1;
    lv_p = 1;
    for ( ; ( (autoC37108B5_ai >= 0 && lv_p <= autoC37108B5_ae) || (autoC37108B5_ai <= 0 && lv_p >= autoC37108B5_ae) ) ; lv_p += autoC37108B5_ai ) {
        if ((PlayerType(gv_intPlayer[lv_p]) != c_playerTypeUser)) {
            PlayerGroupAdd(gv_playergroupAI, gv_intPlayer[lv_p]);
        }

        if ((PlayerRace(gv_intPlayer[lv_p]) == "")) {
            lv_r = RandomInt(1, 4);
            auto9E8EA631_val = lv_r;
            if (auto9E8EA631_val == 1) {
                PlayerSetRace(gv_intPlayer[lv_p], "NightElf");
            }
            else if (auto9E8EA631_val == 2) {
                PlayerSetRace(gv_intPlayer[lv_p], "Human");
            }
            else if (auto9E8EA631_val == 3) {
                PlayerSetRace(gv_intPlayer[lv_p], "Orc");
            }
            else if (auto9E8EA631_val == 4) {
                PlayerSetRace(gv_intPlayer[lv_p], "Undead");
            }
            else {
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitPlayer_Init () {
    gt_InitPlayer = TriggerCreate("gt_InitPlayer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitRandomGroup
//--------------------------------------------------------------------------------------------------
bool gt_InitRandomGroup_Func (bool testConds, bool runActions) {
    int auto374C4964_ae;
    int auto374C4964_ai;
    int autoF9FB10C7_ae;
    int autoF9FB10C7_ai;

    // Variable Declarations
    int lv_g;
    bool lv_bRpt;
    int lv_rG;
    int[17] lv_r;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto374C4964_ae = gv_intCountGroup;
    auto374C4964_ai = 1;
    lv_rG = 1;
    for ( ; ( (auto374C4964_ai >= 0 && lv_rG <= auto374C4964_ae) || (auto374C4964_ai <= 0 && lv_rG >= auto374C4964_ae) ) ; lv_rG += auto374C4964_ai ) {
        while (true) {
            lv_r[lv_rG] = RandomInt(1, gv_intCountGroup);
            lv_bRpt = false;
            autoF9FB10C7_ae = gv_intCountGroup;
            autoF9FB10C7_ai = 1;
            lv_g = 1;
            for ( ; ( (autoF9FB10C7_ai >= 0 && lv_g <= autoF9FB10C7_ae) || (autoF9FB10C7_ai <= 0 && lv_g >= autoF9FB10C7_ae) ) ; lv_g += autoF9FB10C7_ai ) {
                if ((lv_r[lv_rG] == gv_intRandomGroup[lv_g])) {
                    lv_bRpt = true;
                }

            }
            if ((lv_bRpt == false)) {
                gv_intRandomGroup[lv_rG] = lv_r[lv_rG];
                break;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitRandomGroup_Init () {
    gt_InitRandomGroup = TriggerCreate("gt_InitRandomGroup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitRandomRound
//--------------------------------------------------------------------------------------------------
bool gt_InitRandomRound_Func (bool testConds, bool runActions) {
    int auto0866B959_ae;
    int auto0866B959_ai;
    int auto632DFA41_ae;
    int auto632DFA41_ai;

    // Variable Declarations
    int lv_rnd;
    bool lv_bRpt;
    int lv_rRnd;
    int[17] lv_r;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto0866B959_ae = gv_intCountRound;
    auto0866B959_ai = 1;
    lv_rRnd = 1;
    for ( ; ( (auto0866B959_ai >= 0 && lv_rRnd <= auto0866B959_ae) || (auto0866B959_ai <= 0 && lv_rRnd >= auto0866B959_ae) ) ; lv_rRnd += auto0866B959_ai ) {
        while (true) {
            lv_r[lv_rRnd] = RandomInt(1, gv_intCountRound);
            lv_bRpt = false;
            auto632DFA41_ae = gv_intCountRound;
            auto632DFA41_ai = 1;
            lv_rnd = 1;
            for ( ; ( (auto632DFA41_ai >= 0 && lv_rnd <= auto632DFA41_ae) || (auto632DFA41_ai <= 0 && lv_rnd >= auto632DFA41_ae) ) ; lv_rnd += auto632DFA41_ai ) {
                if ((lv_r[lv_rRnd] == gv_intRandomRound[lv_rnd])) {
                    lv_bRpt = true;
                }

            }
            if ((lv_bRpt == false)) {
                gv_intRandomRound[lv_rRnd] = lv_r[lv_rRnd];
                break;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitRandomRound_Init () {
    gt_InitRandomRound = TriggerCreate("gt_InitRandomRound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitScheduleAllPlayAll
//--------------------------------------------------------------------------------------------------
bool gt_InitScheduleAllPlayAll_Func (bool testConds, bool runActions) {
    int auto978707CC_ae;
    int auto978707CC_ai;
    int autoF3D6F9B9_ae;
    int autoF3D6F9B9_ai;
    int autoE14BB1BE_ae;
    int autoE14BB1BE_ai;
    int autoE23A2768_ae;
    int autoE23A2768_ai;

    // Variable Declarations
    int lv_rnd;
    int lv_p;
    int lv_iCcl;
    int lv_g;
    int[17] lv_pOpp;
    int lv_opp;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_iCcl = 1;
    auto978707CC_ae = gv_intCountRound;
    auto978707CC_ai = 1;
    lv_rnd = 1;
    for ( ; ( (auto978707CC_ai >= 0 && lv_rnd <= auto978707CC_ae) || (auto978707CC_ai <= 0 && lv_rnd >= auto978707CC_ae) ) ; lv_rnd += auto978707CC_ai ) {
        autoF3D6F9B9_ae = (gv_intCountPlayer / 2);
        autoF3D6F9B9_ai = 1;
        lv_p = 1;
        for ( ; ( (autoF3D6F9B9_ai >= 0 && lv_p <= autoF3D6F9B9_ae) || (autoF3D6F9B9_ai <= 0 && lv_p >= autoF3D6F9B9_ae) ) ; lv_p += autoF3D6F9B9_ai ) {
            if ((lv_p == 1)) {
                lv_pOpp[lv_p] = 1;
            }
            else {
                if (lv_iCcl >= gv_intCountPlayer) {
                    lv_iCcl = 2;
                }
                else {
                    lv_iCcl = lv_iCcl + 1;
                }
                lv_pOpp[lv_p] = lv_iCcl;
            }
        }
        autoE14BB1BE_ae = ((gv_intCountPlayer / 2) + 1);
        autoE14BB1BE_ai = -1;
        lv_p = gv_intCountPlayer;
        for ( ; ( (autoE14BB1BE_ai >= 0 && lv_p <= autoE14BB1BE_ae) || (autoE14BB1BE_ai <= 0 && lv_p >= autoE14BB1BE_ae) ) ; lv_p += autoE14BB1BE_ai ) {
            if (lv_iCcl >= gv_intCountPlayer) {
                lv_iCcl = 2;
            }
            else {
                lv_iCcl = lv_iCcl + 1;
            }
            lv_pOpp[lv_p] = lv_iCcl;
        }
        lv_g = 0;
        autoE23A2768_ae = gv_intCountPlayer;
        autoE23A2768_ai = 1;
        lv_p = 1;
        for ( ; ( (autoE23A2768_ai >= 0 && lv_p <= autoE23A2768_ae) || (autoE23A2768_ai <= 0 && lv_p >= autoE23A2768_ae) ) ; lv_p += autoE23A2768_ai ) {
            if ((ModI(lv_p, 2) == 1)) {
                lv_g += 1;
                if (gv_intRandomGroup[lv_g] >= gv_intCountGroup) {
                    gv_intRandomGroup[lv_g] = 1;
                }
                else {
                    gv_intRandomGroup[lv_g] = gv_intRandomGroup[lv_g] + 1;
                }
                gv_intScheduleAllPlayAll[gv_intPlayer[lv_p]][gv_intRandomRound[lv_rnd]] = gv_intPlayer[lv_pOpp[gv_intRandomGroup[lv_g]]];
            }
            else {
                gv_intScheduleAllPlayAll[gv_intPlayer[lv_p]][gv_intRandomRound[lv_rnd]] = gv_intPlayer[lv_pOpp[(gv_intRandomGroup[lv_g] + (gv_intCountPlayer / 2))]];
            }
        }
        lv_iCcl -= 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitScheduleAllPlayAll_Init () {
    gt_InitScheduleAllPlayAll = TriggerCreate("gt_InitScheduleAllPlayAll_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitPlayerFinal 2
//--------------------------------------------------------------------------------------------------
bool gt_InitPlayerFinal2_Func (bool testConds, bool runActions) {
    int auto1571DFE9_ae;
    int auto1571DFE9_ai;
    int autoFA85D529_ae;
    int autoFA85D529_ai;
    int auto1C973052_ae;
    int auto1C973052_ai;
    int auto53C710AD_ae;
    int auto53C710AD_ai;

    // Variable Declarations
    int lv_p;
    bool lv_bRpt;
    int lv_rPlyr;
    int[17] lv_r;
    int lv_rF;
    int lv_rnd;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto1571DFE9_ae = gv_intCountFinalRound;
    auto1571DFE9_ai = 1;
    lv_rF = 1;
    for ( ; ( (auto1571DFE9_ai >= 0 && lv_rF <= auto1571DFE9_ae) || (auto1571DFE9_ai <= 0 && lv_rF >= auto1571DFE9_ae) ) ; lv_rF += auto1571DFE9_ai ) {
        autoFA85D529_ae = gv_intCountPlayer;
        autoFA85D529_ai = 1;
        lv_rPlyr = 1;
        for ( ; ( (autoFA85D529_ai >= 0 && lv_rPlyr <= autoFA85D529_ae) || (autoFA85D529_ai <= 0 && lv_rPlyr >= autoFA85D529_ae) ) ; lv_rPlyr += autoFA85D529_ai ) {
            while (true) {
                lv_r[lv_rPlyr] = RandomInt(1, gv_intCountPlayer);
                lv_bRpt = false;
                auto1C973052_ae = gv_intCountPlayer;
                auto1C973052_ai = 1;
                lv_p = 1;
                for ( ; ( (auto1C973052_ai >= 0 && lv_p <= auto1C973052_ae) || (auto1C973052_ai <= 0 && lv_p >= auto1C973052_ae) ) ; lv_p += auto1C973052_ai ) {
                    if ((lv_r[lv_rPlyr] == gv_intPlayerFinal[lv_p][lv_rF])) {
                        lv_bRpt = true;
                    }

                }
                if ((lv_bRpt == false)) {
                    gv_intPlayerFinal[lv_rPlyr][lv_rF] = lv_r[lv_rPlyr];
                    break;
                }

            }
        }
        auto53C710AD_ae = gv_intCountPlayer;
        auto53C710AD_ai = 1;
        lv_p = 1;
        for ( ; ( (auto53C710AD_ai >= 0 && lv_p <= auto53C710AD_ae) || (auto53C710AD_ai <= 0 && lv_p >= auto53C710AD_ae) ) ; lv_p += auto53C710AD_ai ) {
            gv_intPlayerFinal[lv_p][lv_rF] = gv_intPlayer[gv_intPlayerFinal[lv_p][lv_rF]];
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitPlayerFinal2_Init () {
    gt_InitPlayerFinal2 = TriggerCreate("gt_InitPlayerFinal2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitTag
//--------------------------------------------------------------------------------------------------
bool gt_InitTag_Func (bool testConds, bool runActions) {
    int autoE44B1688_ae;
    int autoE44B1688_ai;
    int auto9B880194_ae;
    int auto9B880194_ai;
    int autoD68B96D9_ae;
    int autoD68B96D9_ai;
    int auto847732AF_ae;
    int auto847732AF_ai;

    // Variable Declarations
    int lv_p;
    int lv_phalanx;
    point lv_campionPoint;

    // Variable Initialization
    lv_campionPoint = Point(128.0, 128.0);

    // Actions
    if (!runActions) {
        return true;
    }

    autoE44B1688_ae = 16;
    autoE44B1688_ai = 1;
    lv_p = 1;
    for ( ; ( (autoE44B1688_ai >= 0 && lv_p <= autoE44B1688_ae) || (autoE44B1688_ai <= 0 && lv_p >= autoE44B1688_ae) ) ; lv_p += autoE44B1688_ai ) {
        auto9B880194_ae = gv_phalanxCount;
        auto9B880194_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto9B880194_ai >= 0 && lv_phalanx <= auto9B880194_ae) || (auto9B880194_ai <= 0 && lv_phalanx >= auto9B880194_ae) ) ; lv_phalanx += auto9B880194_ai ) {
            TextTagCreate(gv_textPhalanx[lv_phalanx], 36, gf_BattlefieldLocation(lv_p, lv_phalanx), 1.0, true, false, PlayerGroupAll());
        }
    }
    autoD68B96D9_ae = gv_intCountPlayer;
    autoD68B96D9_ai = 1;
    lv_p = 1;
    for ( ; ( (autoD68B96D9_ai >= 0 && lv_p <= autoD68B96D9_ae) || (autoD68B96D9_ai <= 0 && lv_p >= autoD68B96D9_ae) ) ; lv_p += autoD68B96D9_ai ) {
        auto847732AF_ae = gv_phalanxCount;
        auto847732AF_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto847732AF_ai >= 0 && lv_phalanx <= auto847732AF_ae) || (auto847732AF_ai <= 0 && lv_phalanx >= auto847732AF_ae) ) ; lv_phalanx += auto847732AF_ai ) {
            TextTagCreate(gv_textPhalanx[lv_phalanx], 48, RegionGetCenter(gf_PlayerBuildingRegion(lv_p, lv_phalanx)), 1.0, true, false, PlayerGroupAll());
        }
    }
    TextTagCreate(StringExternal("Param/Value/CD72A9EB"), 24, lv_campionPoint, 4.0, true, false, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitTag_Init () {
    gt_InitTag = TriggerCreate("gt_InitTag_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitWorker
//--------------------------------------------------------------------------------------------------
bool gt_InitWorker_Func (bool testConds, bool runActions) {
    int auto435D956C_ae;
    int auto435D956C_ai;
    int auto54568909_ae;
    int auto54568909_ai;
    int autoEF613BFA_ae;
    int autoEF613BFA_ai;
    int auto0176916E_ae;
    int auto0176916E_ai;
    int auto108E6383_ae;
    int auto108E6383_ai;
    int autoE92595B6_ae;
    int autoE92595B6_ai;
    string autoECE4DBF6_val;

    // Variable Declarations
    int lv_p;
    int lv_phalanx;
    int lv_r;
    bool lv_b;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto435D956C_ae = gv_intCountPlayer;
    auto435D956C_ai = 1;
    lv_p = 1;
    for ( ; ( (auto435D956C_ai >= 0 && lv_p <= auto435D956C_ae) || (auto435D956C_ai <= 0 && lv_p >= auto435D956C_ae) ) ; lv_p += auto435D956C_ai ) {
        libNtve_gf_SetAlliance(lv_p, 0, libNtve_ge_AllianceSetting_Ally);
        auto54568909_ae = gv_phalanxCount;
        auto54568909_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto54568909_ai >= 0 && lv_phalanx <= auto54568909_ae) || (auto54568909_ai <= 0 && lv_phalanx >= auto54568909_ae) ) ; lv_phalanx += auto54568909_ai ) {
            VisRevealerCreate(gv_intPlayer[lv_p], gf_PlayerBuildingRegion(gv_intPlayer[lv_p], lv_phalanx));
            gv_visRevealer[gv_intPlayer[lv_p]][lv_phalanx] = VisRevealerLastCreated();
            VisRevealerEnable(gv_visRevealer[gv_intPlayer[lv_p]][lv_phalanx], true);
        }
    }
    if ((gv_boolTestMode == false)) {
        autoEF613BFA_ae = gv_phalanxCount;
        autoEF613BFA_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (autoEF613BFA_ai >= 0 && lv_phalanx <= autoEF613BFA_ae) || (autoEF613BFA_ai <= 0 && lv_phalanx >= autoEF613BFA_ae) ) ; lv_phalanx += autoEF613BFA_ai ) {
            auto0176916E_ae = gv_intCountPlayer;
            auto0176916E_ai = 1;
            lv_p = 1;
            for ( ; ( (auto0176916E_ai >= 0 && lv_p <= auto0176916E_ae) || (auto0176916E_ai <= 0 && lv_p >= auto0176916E_ae) ) ; lv_p += auto0176916E_ai ) {
                CameraPan(lv_p, RegionGetCenter(gf_PlayerBuildingRegion(lv_p, lv_phalanx)), 1.0, -1, 10.0, false);
            }
            Wait(2.0, c_timeGame);
        }
    }

    auto108E6383_ae = gv_intCountPlayer;
    auto108E6383_ai = 1;
    lv_p = 1;
    for ( ; ( (auto108E6383_ai >= 0 && lv_p <= auto108E6383_ae) || (auto108E6383_ai <= 0 && lv_p >= auto108E6383_ae) ) ; lv_p += auto108E6383_ai ) {
        CameraPan(gv_intPlayer[lv_p], gf_PlayerWorkerLocation(gv_intPlayer[lv_p]), 1.0, -1, 10.0, false);
    }
    Wait(1.0, c_timeGame);
    autoE92595B6_ae = gv_intCountPlayer;
    autoE92595B6_ai = 1;
    lv_p = 1;
    for ( ; ( (autoE92595B6_ai >= 0 && lv_p <= autoE92595B6_ae) || (autoE92595B6_ai <= 0 && lv_p >= autoE92595B6_ae) ) ; lv_p += autoE92595B6_ai ) {
        autoECE4DBF6_val = PlayerRace(gv_intPlayer[lv_p]);
        if (autoECE4DBF6_val == "NightElf") {
            libNtve_gf_CreateUnitsAtPoint2(1, "ewsp", c_unitCreateIgnorePlacement, gv_intPlayer[lv_p], gf_PlayerWorkerLocation(gv_intPlayer[lv_p]));
        }
        else if (autoECE4DBF6_val == "Human") {
            libNtve_gf_CreateUnitsAtPoint2(1, "hpea", c_unitCreateIgnorePlacement, gv_intPlayer[lv_p], gf_PlayerWorkerLocation(gv_intPlayer[lv_p]));
        }
        else if (autoECE4DBF6_val == "Undead") {
            libNtve_gf_CreateUnitsAtPoint2(1, "uaco", c_unitCreateIgnorePlacement, gv_intPlayer[lv_p], gf_PlayerWorkerLocation(gv_intPlayer[lv_p]));
        }
        else if (autoECE4DBF6_val == "Orc") {
            libNtve_gf_CreateUnitsAtPoint2(1, "opeo", c_unitCreateIgnorePlacement, gv_intPlayer[lv_p], gf_PlayerWorkerLocation(gv_intPlayer[lv_p]));
        }
        else {
        }
        gv_unitWorker[gv_intPlayer[lv_p]] = UnitLastCreated();
        libNtve_gf_CreateUnitsAtPoint2(1, "hrdh", c_unitCreateIgnorePlacement, gv_intPlayer[lv_p], gf_PlayerWorkerLocation(gv_intPlayer[lv_p]));
        if ((gv_boolTestMode == true)) {
            libNtve_gf_CreateUnitsAtPoint2(1, "ewsp", c_unitCreateIgnorePlacement, gv_intPlayer[lv_p], gf_PlayerWorkerLocation(gv_intPlayer[lv_p]));
            libNtve_gf_CreateUnitsAtPoint2(1, "hpea", c_unitCreateIgnorePlacement, gv_intPlayer[lv_p], gf_PlayerWorkerLocation(gv_intPlayer[lv_p]));
            libNtve_gf_CreateUnitsAtPoint2(1, "uaco", c_unitCreateIgnorePlacement, gv_intPlayer[lv_p], gf_PlayerWorkerLocation(gv_intPlayer[lv_p]));
            libNtve_gf_CreateUnitsAtPoint2(1, "opeo", c_unitCreateIgnorePlacement, gv_intPlayer[lv_p], gf_PlayerWorkerLocation(gv_intPlayer[lv_p]));
        }

        CameraLockInput(lv_p, false);
    }
    TriggerExecute(gt_Waiting, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitWorker_Init () {
    gt_InitWorker = TriggerCreate("gt_InitWorker_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Waiting
//--------------------------------------------------------------------------------------------------
bool gt_Waiting_Func (bool testConds, bool runActions) {
    int autoD85700B4_ae;
    int autoD85700B4_ai;
    int auto9A7FB928_ae;
    int auto9A7FB928_ai;
    int auto116B406A_ae;
    int auto116B406A_ai;

    // Variable Declarations
    int lv_p;
    int lv_phalanx;
    int lv_r;
    bool lv_b;
    fixed lv_t;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Revive, false);
    TriggerEnable(gt_UnitDied, false);
    TriggerEnable(gt_UnitOwnerChanged, false);
    TriggerEnable(gt_Attack, false);
    TriggerEnable(gt_WinLossPeriod, false);
    TriggerEnable(libGAwX_gt_NonHeroItemDeathDrop, true);
    if ((gv_boolTestMode == false)) {
        VisEnable(c_visTypeMask, true);
        VisEnable(c_visTypeFog, true);
    }

    TimerRestart(gv_timerWinLoss);
    TimerPause(gv_timerWinLoss, true);
    gv_intRound += 1;
    if ((gv_intRound <= gv_intCountRound)) {
        BoardSetName(gv_board, (StringExternal("Param/Value/D2A417E9") + IntToText(gv_intRound) + StringExternal("Param/Value/1E7E027B") + IntToText(gv_intCountRound) + StringExternal("Param/Value/7945E5E7")), Color(100.00, 100.00, 100.00));
    }
    else {
        gv_intBonusRound += 1;
        if ((gv_intBonusRound <= gv_intCountBonusRound)) {
            BoardSetName(gv_board, (StringExternal("Param/Value/75B1F959")), Color(100.00, 100.00, 100.00));
        }
        else {
            gv_intFinalRound += 1;
            if ((gv_intFinalRound <= gv_intCountFinalRound)) {
                BoardSetName(gv_board, (StringExternal("Param/Value/F262FF9F")), Color(100.00, 100.00, 100.00));
                autoD85700B4_ae = gv_phalanxCount;
                autoD85700B4_ai = 1;
                lv_phalanx = 1;
                for ( ; ( (autoD85700B4_ai >= 0 && lv_phalanx <= autoD85700B4_ae) || (autoD85700B4_ai <= 0 && lv_phalanx >= autoD85700B4_ae) ) ; lv_phalanx += autoD85700B4_ai ) {
                    gv_phalanxRowCount[lv_phalanx] = 16;
                }
            }

        }
    }
    auto9A7FB928_ae = gv_intCountPlayer;
    auto9A7FB928_ai = 1;
    lv_p = 1;
    for ( ; ( (auto9A7FB928_ai >= 0 && lv_p <= auto9A7FB928_ae) || (auto9A7FB928_ai <= 0 && lv_p >= auto9A7FB928_ae) ) ; lv_p += auto9A7FB928_ai ) {
        libNtve_gf_SetUpgradeLevelForPlayer(gv_intPlayer[lv_p], "Pause", 1);
        if ((gv_intBonusRound > gv_intCountBonusRound)) {
            libNtve_gf_SetUpgradeLevelForPlayer(gv_intPlayer[lv_p], "Final", 1);
        }

        auto116B406A_ae = gv_phalanxCount;
        auto116B406A_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto116B406A_ai >= 0 && lv_phalanx <= auto116B406A_ae) || (auto116B406A_ai <= 0 && lv_phalanx >= auto116B406A_ae) ) ; lv_phalanx += auto116B406A_ai ) {
            VisRevealerEnable(gv_visRevealer[gv_intPlayer[lv_p]][lv_phalanx], true);
        }
        PlayerModifyPropertyInt(gv_intPlayer[lv_p], c_playerPropTerrazine, c_playerPropOperAdd, gv_intG[gv_intRound]);
        PlayerModifyPropertyInt(gv_intPlayer[lv_p], c_playerPropCustom, c_playerPropOperAdd, gv_intSL[gv_intPlayer[lv_p]]);
        CameraPan(gv_intPlayer[lv_p], gf_PlayerWorkerLocation(gv_intPlayer[lv_p]), 1.0, -1, 10.0, false);
        if ((PlayerGroupHasPlayer(gv_playergroupAI, gv_intPlayer[lv_p]) == false)) {
            lv_b = false;
            while (true) {
                if ((lv_b == false)) {
                    lv_r = RandomInt(1, CatalogFieldValueCount(c_gameCatalogUnit, "Item", "TechTreeProducedUnitArray", gv_intPlayer[lv_p]));
                    if ((CatalogFieldValueGetAsInt(c_gameCatalogItem, UnitTypeFromString(CatalogFieldValueGet(c_gameCatalogUnit, "Item", "TechTreeProducedUnitArray[" + IntToString((lv_r + -1)) + "]", gv_intPlayer[lv_p])), "Level", gv_intPlayer[lv_p]) <= (gv_intRound + TechTreeUpgradeCount(gv_intPlayer[lv_p], "ItemLevel", c_techCountCompleteOnly))) && (CatalogFieldValueGetAsInt(c_gameCatalogItem, UnitTypeFromString(CatalogFieldValueGet(c_gameCatalogUnit, "Item", "TechTreeProducedUnitArray[" + IntToString((lv_r + -1)) + "]", gv_intPlayer[lv_p])), "Level", gv_intPlayer[lv_p]) > TechTreeUpgradeCount(gv_intPlayer[lv_p], "ItemLevel", c_techCountCompleteOnly))) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitTypeFromString(CatalogFieldValueGet(c_gameCatalogUnit, "Item", "TechTreeProducedUnitArray[" + IntToString((lv_r + -1)) + "]", gv_intPlayer[lv_p])), 0, 0, UnitGetPosition(gv_unitWorker[gv_intPlayer[lv_p]]));
                        libGAwX_gf_UnitInventoryCreate(gv_unitWorker[gv_intPlayer[lv_p]], UnitLastCreated());
                        lv_b = true;
                    }
                    else {
                        lv_b = false;
                    }
                }
                else {
                    break;
                }
            }
        }

    }
    if ((gv_boolTestMode == false)) {
        if ((gv_intBonusRound > gv_intCountBonusRound)) {
            lv_t = (gv_fixedTimeLastRound + (4.0 * gv_intRound));
        }
        else {
            lv_t = (gv_fixedTime + (4.0 * gv_intRound));
        }
        TimerStart(TimerCreate(), lv_t, false, c_timeGame);
        TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/250B4B9A"), true, false);
        Wait(lv_t, c_timeGame);
        TimerWindowDestroy(TimerWindowLastCreated());
        TriggerExecute(gt_AI, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Waiting_Init () {
    gt_Waiting = TriggerCreate("gt_Waiting_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Item Binding
//--------------------------------------------------------------------------------------------------
bool gt_ItemBinding_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_iT;
    unit lv_unit;
    unit lv_targetUnit;
    int lv_targetPlayer;
    int lv_p;
    unit lv_item;
    int lv_container;
    int lv_slot;
    int lv_iM;
    order lv_dropOrder;
    order lv_takeOrder;
    order lv_takeOrder2;
    order lv_takeOrder3;
    order lv_takeOrder4;
    order lv_takeOrder5;
    order lv_takeOrder6;
    point lv_unitPosition;
    unitgroup lv_ug;
    unit lv_u;

    // Variable Initialization
    lv_iT = UnitGetType(lv_item);
    lv_unit = EventUnit();
    lv_targetUnit = EventUnitInventoryItemTargetUnit();
    lv_targetPlayer = UnitGetOwner(lv_targetUnit);
    lv_p = UnitGetOwner(lv_unit);
    lv_item = EventUnitInventoryItem();
    lv_container = EventUnitInventoryItemContainer();
    lv_slot = EventUnitInventoryItemSlot();
    lv_iM = EventUnitInventoryChange();
    lv_dropOrder = OrderTargetingUnit(AbilityCommand("TodGodInventory", 0), lv_unit);
    lv_takeOrder = OrderTargetingUnit(AbilityCommand("Inventory2", 2), lv_unit);
    lv_takeOrder2 = OrderTargetingUnit(AbilityCommand("Inventory2", 2), lv_unit);
    lv_takeOrder3 = OrderTargetingUnit(AbilityCommand("Inventory3", 2), lv_unit);
    lv_takeOrder4 = OrderTargetingUnit(AbilityCommand("Inventory4", 2), lv_unit);
    lv_takeOrder5 = OrderTargetingUnit(AbilityCommand("Inventory5", 2), lv_unit);
    lv_takeOrder6 = OrderTargetingUnit(AbilityCommand("Inventory6", 2), lv_unit);
    lv_unitPosition = UnitGetPosition(lv_unit);
    lv_ug = UnitGroup(null, c_playerAny, RegionCircle(lv_unitPosition, 50.0), UnitFilter((1 << c_targetFilterItem), 0, 0, 0), 0);

    // Conditions
    if (testConds) {
        if (!((lv_unit != libGAwX_gv_god))) {
            return false;
        }

        if (!((lv_targetUnit != libGAwX_gv_god))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_targetPlayer != lv_p) && ((lv_iM == c_unitInventoryChangeDrops) || (lv_iM == c_unitInventoryChangeGives))) {
        gf_UnitInventoryCreate(lv_unit, lv_item);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ItemBinding_Init () {
    gt_ItemBinding = TriggerCreate("gt_ItemBinding_Func");
    TriggerAddEventUnitInventoryChange(gt_ItemBinding, null, c_unitInventoryChangeDrops, null);
    TriggerAddEventUnitInventoryChange(gt_ItemBinding, null, c_unitInventoryChangeGives, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI
//--------------------------------------------------------------------------------------------------
bool gt_AI_Func (bool testConds, bool runActions) {
    int autoF2749DA9_ae;
    int autoF2749DA9_ai;
    string auto66F222FA_val;
    int autoE721B814_ae;
    int autoE721B814_ai;
    int auto6D0AAECB_ae;
    int auto6D0AAECB_ai;

    // Variable Declarations
    int lv_p;
    int lv_r;
    int lv_phalanx;
    int lv_rPhalanx;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoF2749DA9_ae = gv_intCountPlayer;
    autoF2749DA9_ai = 1;
    lv_p = 1;
    for ( ; ( (autoF2749DA9_ai >= 0 && lv_p <= autoF2749DA9_ae) || (autoF2749DA9_ai <= 0 && lv_p >= autoF2749DA9_ae) ) ; lv_p += autoF2749DA9_ai ) {
        if ((PlayerGroupHasPlayer(gv_playergroupAI, gv_intPlayer[lv_p]) == true)) {
            PlayerModifyPropertyInt(gv_intPlayer[lv_p], c_playerPropTerrazine, c_playerPropOperSetTo, FixedToInt((PlayerGetPropertyInt(gv_intPlayer[lv_p], c_playerPropTerrazine) * 1.1)));
            PlayerModifyPropertyInt(gv_intPlayer[lv_p], c_playerPropCustom, c_playerPropOperSetTo, FixedToInt((PlayerGetPropertyInt(gv_intPlayer[lv_p], c_playerPropCustom) * 1.1)));
            while (true) {
                if ((PlayerGetPropertyInt(gv_intPlayer[lv_p], c_playerPropCustom) >= CatalogFieldValueGetAsInt(c_gameCatalogAbil, "ANlg", "Cost[" + IntToString(0) + "].Resource[" + IntToString(3) + "]", gv_intPlayer[lv_p]))) {
                    UnitIssueOrder(gv_unitWorker[gv_intPlayer[lv_p]], Order(AbilityCommand("ANlg", 0)), c_orderQueueReplace);
                }
                else {
                    break;
                }
            }
            while (true) {
                if ((PlayerGetPropertyInt(gv_intPlayer[lv_p], c_playerPropTerrazine) >= 15)) {
                    lv_r = RandomInt(0, 29);
                    lv_phalanx = RandomInt(1, gv_phalanxCount);
                    auto66F222FA_val = PlayerRace(gv_intPlayer[lv_p]);
                    if (auto66F222FA_val == "NightElf") {
                        UnitIssueOrder(gv_unitWorker[gv_intPlayer[lv_p]], OrderTargetingPoint(AbilityCommand("AEbu", lv_r), RegionRandomPoint(gf_PlayerBuildingRegion(gv_intPlayer[lv_p], lv_phalanx))), c_orderQueueReplace);
                    }
                    else if (auto66F222FA_val == "Human") {
                        UnitIssueOrder(gv_unitWorker[gv_intPlayer[lv_p]], OrderTargetingPoint(AbilityCommand("AHbu", lv_r), RegionRandomPoint(gf_PlayerBuildingRegion(gv_intPlayer[lv_p], lv_phalanx))), c_orderQueueReplace);
                    }
                    else if (auto66F222FA_val == "Undead") {
                        UnitIssueOrder(gv_unitWorker[gv_intPlayer[lv_p]], OrderTargetingPoint(AbilityCommand("AUbu", lv_r), RegionRandomPoint(gf_PlayerBuildingRegion(gv_intPlayer[lv_p], lv_phalanx))), c_orderQueueReplace);
                    }
                    else if (auto66F222FA_val == "Orc") {
                        UnitIssueOrder(gv_unitWorker[gv_intPlayer[lv_p]], OrderTargetingPoint(AbilityCommand("AObu", lv_r), RegionRandomPoint(gf_PlayerBuildingRegion(gv_intPlayer[lv_p], lv_phalanx))), c_orderQueueReplace);
                    }
                    else {
                    }
                }
                else {
                    break;
                }
            }
        }

    }
    if ((gv_boolTestMode == false)) {
        autoE721B814_ae = gv_intCountPlayer;
        autoE721B814_ai = 1;
        lv_p = 1;
        for ( ; ( (autoE721B814_ai >= 0 && lv_p <= autoE721B814_ae) || (autoE721B814_ai <= 0 && lv_p >= autoE721B814_ae) ) ; lv_p += autoE721B814_ai ) {
            libNtve_gf_SetUpgradeLevelForPlayer(gv_intPlayer[lv_p], "Pause", 0);
            if ((gv_intBonusRound > gv_intCountBonusRound)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_intPlayer[lv_p], "Final", 0);
            }

            auto6D0AAECB_ae = gv_phalanxCount;
            auto6D0AAECB_ai = 1;
            lv_phalanx = 1;
            for ( ; ( (auto6D0AAECB_ai >= 0 && lv_phalanx <= auto6D0AAECB_ae) || (auto6D0AAECB_ai <= 0 && lv_phalanx >= auto6D0AAECB_ae) ) ; lv_phalanx += auto6D0AAECB_ai ) {
                VisRevealerEnable(gv_visRevealer[gv_intPlayer[lv_p]][lv_phalanx], false);
            }
        }
        TriggerExecute(gt_InitUnit, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AI_Init () {
    gt_AI = TriggerCreate("gt_AI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitDied
//--------------------------------------------------------------------------------------------------
bool gt_UnitDied_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetCustomValue(EventUnit(), 1) == 0.0))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boolOwnerChanged = false;
    if ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeSummoned) == false) && (gf_UnitHasBehaviorFlag(gv_behaviorFlagRaiseDead, libNtve_gf_KillingUnit()) == false) && (gv_boolKilling == false)) {
        gv_intKillingPlayer = libNtve_gf_KillingPlayer();
    }

    gv_intEventPlayer = EventPlayer();
    gv_unitEventUnit = EventUnit();
    TriggerExecute(gt_Reserve, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitDied_Init () {
    gt_UnitDied = TriggerCreate("gt_UnitDied_Func");
    TriggerEnable(gt_UnitDied, false);
    TriggerAddEventUnitDied(gt_UnitDied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitOwnerChanged
//--------------------------------------------------------------------------------------------------
bool gt_UnitOwnerChanged_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((gf_UnitHasBehaviorFlag(gv_behaviorFlagRaiseDead, EventUnit()) == false))) {
            return false;
        }

        if (!((gv_boolKilling == false))) {
            return false;
        }

        if (!((EventUnitOwnerNew() != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_boolOwnerChanged = true;
    UIDisplayMessage(gv_playergroupDebug, c_messageAreaSubtitle, (TextWithColor(UnitTypeGetName(UnitGetType(EventUnit())), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventUnitOwnerOld(), false))) + StringExternal("Param/Value/3D35FBBA") + TextWithColor(PlayerName(EventUnitOwnerNew()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventUnitOwnerNew(), false))) + StringExternal("Param/Value/A3C99860")));
    gv_intCountControlledUnit[EventUnitOwnerNew()][FixedToInt(UnitGetCustomValue(EventUnit(), 0))] += 1;
    gv_intCountUnit[EventUnitOwnerNew()][FixedToInt(UnitGetCustomValue(EventUnit(), 0))] += 1;
    gv_intCountLivingUnit[EventUnitOwnerNew()][FixedToInt(UnitGetCustomValue(EventUnit(), 0))] += 1;
    gv_intCountLivingUnitPlayer[EventUnitOwnerNew()] += 1;
    libNtve_gf_MakeUnitUncommandable(EventUnit(), gv_optionCommandable);
    gv_intEventPlayer = EventUnitOwnerOld();
    gv_intKillingPlayer = EventUnitOwnerNew();
    gv_unitEventUnit = EventUnit();
    TriggerExecute(gt_Reserve, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitOwnerChanged_Init () {
    gt_UnitOwnerChanged = TriggerCreate("gt_UnitOwnerChanged_Func");
    TriggerEnable(gt_UnitOwnerChanged, false);
    TriggerAddEventUnitChangeOwner(gt_UnitOwnerChanged, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reserve
//--------------------------------------------------------------------------------------------------
bool gt_Reserve_Func (bool testConds, bool runActions) {
    int auto51707BA5_ae;
    int auto51707BA5_ai;
    int autoA2575D1E_ae;
    int autoA2575D1E_ai;

    // Variable Declarations
    int lv_i;
    int lv_p;
    int lv_pL;
    int lv_pWn;
    int lv_pLs;
    int lv_phalanx;
    int lv_item;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_phalanx = FixedToInt(UnitGetCustomValue(gv_unitEventUnit, 0));
    if ((gv_boolOwnerChanged == false) && (gv_intKillingPlayer != 15)) {
        gv_intS[gv_intKillingPlayer] += CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(gv_unitEventUnit), "KillResource[" + IntToString(3) + "]", gv_intEventPlayer);
        BoardItemSetText(gv_board, 3, gv_intRowBoardOfPlayer[gv_intKillingPlayer], IntToText(gv_intS[gv_intKillingPlayer]));
        BoardItemSetProgressValue(gv_board, 3, gv_intRowBoardOfPlayer[gv_intKillingPlayer], gv_intS[gv_intKillingPlayer]);
        if ((gv_intS[gv_intKillingPlayer] > gv_intSMax)) {
            gv_intSMax = gv_intS[gv_intKillingPlayer];
        }

        auto51707BA5_ae = gv_intCountPlayer;
        auto51707BA5_ai = 1;
        lv_p = 1;
        for ( ; ( (auto51707BA5_ai >= 0 && lv_p <= auto51707BA5_ae) || (auto51707BA5_ai <= 0 && lv_p >= auto51707BA5_ae) ) ; lv_p += auto51707BA5_ai ) {
            BoardItemSetProgressRange(gv_board, 3, lv_p, 0.0, gv_intSMax);
        }
    }

    if ((gv_intEventPlayer != 15)) {
        gv_playerEvent = gv_intEventPlayer;
        gv_playerKilling = gv_intKillingPlayer;
        gv_intCountLivingUnit[gv_intEventPlayer][lv_phalanx] -= 1;
        gv_intCountLivingUnitPlayer[gv_intEventPlayer] -= 1;
        lv_i = ((gv_intCountUnit[gv_intEventPlayer][lv_phalanx] - gv_intCountLivingUnit[gv_intEventPlayer][lv_phalanx]) + (gv_phalanxColumnCount[lv_phalanx] * gv_phalanxRowCount[lv_phalanx]));
        UIDisplayMessage(gv_playergroupDebug, c_messageAreaSubtitle, (StringExternal("Param/Value/21088924") + IntToText(gv_intCountUnit[gv_intEventPlayer][lv_phalanx]) + StringExternal("Param/Value/45B3B4C7") + IntToText(gv_intCountLivingUnit[gv_intEventPlayer][lv_phalanx]) + StringExternal("Param/Value/38101C6D") + IntToText(gv_phalanxColumnCount[lv_phalanx]) + StringExternal("Param/Value/601E6BEA") + IntToText(gv_phalanxRowCount[lv_phalanx]) + StringExternal("Param/Value/71432913") + IntToText(lv_i) + StringExternal("Param/Value/266430E5") + IntToText(lv_phalanx) + StringExternal("Param/Value/A23B12F9") + IntToText(gv_intCountLivingUnit[gv_intEventPlayer][lv_phalanx]) + StringExternal("Param/Value/DE18C66E") + IntToText(gv_intCountLivingUnitPlayer[gv_intEventPlayer]) + StringExternal("Param/Value/8876615F") + IntToText(gv_intCountUnit[gv_intEventPlayer][lv_phalanx]) + StringExternal("Param/Value/86BF11AC") + TextWithColor(UnitTypeGetName(UnitGetType(gv_unitEventUnit)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_intEventPlayer, false)))));
        if ((lv_i <= (gv_intCountUnit[gv_intEventPlayer][lv_phalanx] - gv_intCountControlledUnit[gv_intEventPlayer][lv_phalanx])) && ((gv_intCountUnit[gv_intEventPlayer][lv_phalanx] - gv_intCountLivingUnit[gv_intEventPlayer][lv_phalanx]) > 0)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_typeUnit[gv_intEventPlayer][lv_i][lv_phalanx], c_unitCreateIgnorePlacement, gv_intEventPlayer, gv_pointReserve[gv_intEventPlayer][lv_phalanx]);
            UnitSetCustomValue(UnitLastCreated(), 0, lv_phalanx);
            UnitSetFacing(UnitLastCreated(), PointGetFacing(gf_PlayerReserveLocation2(gv_intEventPlayer, lv_phalanx)), 0.0);
            libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), gv_optionCommandable);
            autoA2575D1E_ae = UnitInventoryCount(UnitLastCreated(), c_unitInventoryCountTotal);
            autoA2575D1E_ai = 1;
            lv_item = 1;
            for ( ; ( (autoA2575D1E_ai >= 0 && lv_item <= autoA2575D1E_ae) || (autoA2575D1E_ai <= 0 && lv_item >= autoA2575D1E_ae) ) ; lv_item += autoA2575D1E_ai ) {
                UnitInventoryCreate(UnitLastCreated(), gv_typeItem[gv_intEventPlayer][lv_i][lv_phalanx][lv_item]);
            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Reserve_Init () {
    gt_Reserve = TriggerCreate("gt_Reserve_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: WinLossPeriod
//--------------------------------------------------------------------------------------------------
bool gt_WinLossPeriod_Func (bool testConds, bool runActions) {
    int autoAF20E121_ae;
    int autoAF20E121_ai;
    int autoC24B061E_ae;
    int autoC24B061E_ai;

    // Variable Declarations
    int[17] lv_i;
    int lv_p;
    int lv_pw;
    int lv_phalanx;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoAF20E121_ae = gv_intCountPlayer;
    autoAF20E121_ai = 1;
    lv_p = 1;
    for ( ; ( (autoAF20E121_ai >= 0 && lv_p <= autoAF20E121_ae) || (autoAF20E121_ai <= 0 && lv_p >= autoAF20E121_ae) ) ; lv_p += autoAF20E121_ai ) {
        if ((lv_i[gv_intPlayer[lv_p]] == 0)) {
            gv_intCountLivingUnitPlayer[gv_intPlayer[lv_p]] = 0;
            autoC24B061E_ae = gv_phalanxCount;
            autoC24B061E_ai = 1;
            lv_phalanx = 1;
            for ( ; ( (autoC24B061E_ai >= 0 && lv_phalanx <= autoC24B061E_ae) || (autoC24B061E_ai <= 0 && lv_phalanx >= autoC24B061E_ae) ) ; lv_phalanx += autoC24B061E_ai ) {
                gv_intCountLivingUnit[gv_intPlayer[lv_p]][lv_phalanx] = 0;
            }
        }

    }
    TimerStart(gv_timerWinLoss, 0.0625, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WinLossPeriod_Init () {
    gt_WinLossPeriod = TriggerCreate("gt_WinLossPeriod_Func");
    TriggerEnable(gt_WinLossPeriod, false);
    TriggerAddEventTimePeriodic(gt_WinLossPeriod, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WinLoss
//--------------------------------------------------------------------------------------------------
bool gt_WinLoss_Func (bool testConds, bool runActions) {
    int autoC736665D_ae;
    int autoC736665D_ai;
    int auto411351B3_ae;
    int auto411351B3_ai;
    int auto42B5B2E2_ae;
    int auto42B5B2E2_ai;
    int auto108FCA49_n;
    int auto108FCA49_i;

    // Variable Declarations
    int lv_p;
    int lv_pL;
    int lv_pWn;
    int lv_pLs;
    unit lv_item;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_intRound <= gv_intCountRound)) {
        if ((gv_boolKilling == false)) {
            auto42B5B2E2_ae = gv_intCountPlayer;
            auto42B5B2E2_ai = 1;
            lv_p = 1;
            for ( ; ( (auto42B5B2E2_ai >= 0 && lv_p <= auto42B5B2E2_ae) || (auto42B5B2E2_ai <= 0 && lv_p >= auto42B5B2E2_ae) ) ; lv_p += auto42B5B2E2_ai ) {
                if ((gv_intCountLivingUnitPlayer[gv_intPlayer[lv_p]] > 0)) {
                    lv_pL += 1;
                    lv_pWn = gv_intPlayer[lv_p];
                }

            }
            if ((lv_pL <= 1)) {
                TriggerEnable(gt_WinLossPeriod, false);
                if ((lv_pL == 0)) {
                    lv_pWn = gv_playerKilling;
                }

                gv_boolKilling = true;
                libGAwX_gv_moonTODCritSection = 1;
                TriggerExecute(gt_moonMoonstoneRestoreTOD, true, false);
                gv_champion[lv_pWn] += 0.2;
                BoardItemSetText(gv_board, 6, gv_intRowBoardOfPlayer[lv_pWn], FixedToText(gv_champion[lv_pWn], 1));
                TriggerEnable(libGAwX_gt_ankhAnkhofReincarnationRemove, false);
                Wait(2.0, c_timeGame);
                auto108FCA49_n = 50;
                for (auto108FCA49_i = 1; auto108FCA49_i <= auto108FCA49_n; auto108FCA49_i += 1) {
                    if ((gv_intCountLivingUnitPlayer[lv_pWn] > 0)) {
                    }
                    else {
                        break;
                    }
                }
                Wait(2.0, c_timeGame);
                gv_boolKilling = false;
                TriggerEnable(libGAwX_gt_ankhAnkhofReincarnationRemove, true);
                TriggerExecute(gt_Waiting, true, false);
            }

        }

    }
    else {
        if ((gv_intBonusRound <= gv_intCountBonusRound)) {
            auto411351B3_ae = gv_intCountPlayer;
            auto411351B3_ai = 1;
            lv_p = 1;
            for ( ; ( (auto411351B3_ai >= 0 && lv_p <= auto411351B3_ae) || (auto411351B3_ai <= 0 && lv_p >= auto411351B3_ae) ) ; lv_p += auto411351B3_ai ) {
                if ((gv_boolPlayerInBattle[gv_intPlayer[lv_p]] == true)) {
                    if ((gv_intCountLivingUnitPlayer[gv_intPlayer[lv_p]] > 0)) {
                        lv_pL += 1;
                    }
                    else {
                        PlayerGroupAdd(gv_playergroupBonusDone, gv_intPlayer[lv_p]);
                    }
                }

            }
            if ((lv_pL == 0)) {
                TriggerEnable(gt_WinLossPeriod, false);
                libGAwX_gv_moonTODCritSection = 1;
                TriggerExecute(gt_moonMoonstoneRestoreTOD, true, false);
                gv_boolKilling = true;
                Wait(2.0, c_timeGame);
                Wait(2.0, c_timeGame);
                gv_boolKilling = false;
                if ((gv_intBonusRound == gv_intCountBonusRound)) {
                    TriggerExecute(gt_Waiting, true, false);
                }
                else {
                    TriggerExecute(gt_InitUnit, true, false);
                }
            }

        }
        else {
            if ((gv_intFinalRound <= gv_intCountFinalRound)) {
                autoC736665D_ae = gv_intCountPlayer;
                autoC736665D_ai = 1;
                lv_p = 1;
                for ( ; ( (autoC736665D_ai >= 0 && lv_p <= autoC736665D_ae) || (autoC736665D_ai <= 0 && lv_p >= autoC736665D_ae) ) ; lv_p += autoC736665D_ai ) {
                    if ((gv_boolPlayerInBattle[gv_intPlayer[lv_p]] == true)) {
                        if ((gv_intCountLivingUnitPlayer[gv_intPlayer[lv_p]] > 0)) {
                            lv_pL += 1;
                            lv_pWn = gv_intPlayer[lv_p];
                        }
                        else {
                            lv_pLs = gv_intPlayer[lv_p];
                        }
                    }

                }
                if ((lv_pL <= 1)) {
                    TriggerEnable(gt_WinLossPeriod, false);
                    if ((lv_pL == 0)) {
                        lv_pWn = gv_playerKilling;
                        lv_pLs = gv_playerEvent;
                    }

                    if ((gv_intFinalRound == gv_intCountFinalRound)) {
                        gv_champion[lv_pWn] += 3.0;
                        BoardItemSetText(gv_board, 6, gv_intRowBoardOfPlayer[lv_pWn], FixedToText(gv_champion[lv_pWn], 1));
                        TriggerEnable(gt_PlayerLeft, false);
                        libGAwX_gv_moonTODCritSection = 1;
                        TriggerExecute(gt_moonMoonstoneRestoreTOD, true, false);
                        PlayerGroupLoopBegin(PlayerGroupActive());
                        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                            BankValueSetFromInt(gv_bank[PlayerGroupLoopCurrent()], "Score", "GameCount", (BankValueGetAsInt(gv_bank[PlayerGroupLoopCurrent()], "Score", "GameCount") + 1));
                            if ((PlayerGroupLoopCurrent() == lv_pWn)) {
                                BankValueSetFromInt(gv_bank[PlayerGroupLoopCurrent()], "Score", "Win", (BankValueGetAsInt(gv_bank[PlayerGroupLoopCurrent()], "Score", "Win") + 1));
                            }

                            BankSave(gv_bank[PlayerGroupLoopCurrent()]);
                            BoardItemSetText(gv_board, 4, gv_intRowBoardOfPlayer[PlayerGroupLoopCurrent()], IntToText(BankValueGetAsInt(gv_bank[PlayerGroupLoopCurrent()], "Score", "GameCount")));
                            BoardItemSetText(gv_board, 5, gv_intRowBoardOfPlayer[PlayerGroupLoopCurrent()], FixedToText((IntToFixed(BankValueGetAsInt(gv_bank[PlayerGroupLoopCurrent()], "Score", "Win")) / IntToFixed(BankValueGetAsInt(gv_bank[PlayerGroupLoopCurrent()], "Score", "GameCount"))), 2));
                        }
                        PlayerGroupLoopEnd();
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(lv_pWn), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_pWn, false))) + StringExternal("Param/Value/5BAB9FA5")));
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, gv_info);
                        Wait(15.0, c_timeGame);
                        PlayerGroupLoopBegin(PlayerGroupActive());
                        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                            if ((PlayerGroupLoopCurrent() == lv_pWn)) {
                                GameOver(PlayerGroupLoopCurrent(), c_gameOverVictory, true, true);
                            }
                            else {
                                GameOver(PlayerGroupLoopCurrent(), c_gameOverDefeat, true, true);
                            }
                        }
                        PlayerGroupLoopEnd();
                    }
                    else {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(lv_pWn), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_pWn, false))) + StringExternal("Param/Value/BF314443")));
                        PlayerGroupAdd(gv_playergroupWon, lv_pWn);
                        PlayerGroupAdd(gv_playergroupLose, lv_pLs);
                        BoardItemSetTextColor(gv_board, 1, gv_intRowBoardOfPlayer[lv_pLs], Color(100.00, 100.00, 100.00));
                        BoardItemSetTextColor(gv_board, 2, gv_intRowBoardOfPlayer[lv_pLs], Color(0.00, 0.00, 0.00));
                        BoardItemSetProgressColor(gv_board, 2, gv_intRowBoardOfPlayer[lv_pLs], Color(100.00, 100.00, 100.00), 1);
                        BoardItemSetTextColor(gv_board, 3, gv_intRowBoardOfPlayer[lv_pLs], Color(0.00, 0.00, 0.00));
                        BoardItemSetProgressColor(gv_board, 3, gv_intRowBoardOfPlayer[lv_pLs], Color(100.00, 100.00, 100.00), 1);
                        gv_boolKilling = true;
                        libGAwX_gv_moonTODCritSection = 1;
                        TriggerExecute(gt_moonMoonstoneRestoreTOD, true, false);
                        gv_champion[lv_pWn] += 1.0;
                        BoardItemSetText(gv_board, 6, gv_intRowBoardOfPlayer[lv_pWn], FixedToText(gv_champion[lv_pWn], 1));
                        Wait(2.0, c_timeGame);
                        Wait(2.0, c_timeGame);
                        gv_boolKilling = false;
                        gv_intFinalRound += 1;
                        TriggerExecute(gt_InitUnit, true, false);
                    }
                }

            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WinLoss_Init () {
    gt_WinLoss = TriggerCreate("gt_WinLoss_Func");
    TriggerAddEventTimer(gt_WinLoss, gv_timerWinLoss);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Build
//--------------------------------------------------------------------------------------------------
bool gt_Build_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((AbilityClass(EventUnitCreatedAbil()) == c_classIdCAbilBuild)) {
        UnitBehaviorAddPlayer(EventUnitCreatedUnit(), "Building", UnitGetOwner(EventUnitCreatedUnit()), 1);
        UnitSetFacing(EventUnitCreatedUnit(), 270.0, 0.0);
    }
    else if ((UnitTypeTestAttribute(UnitGetType(EventUnitCreatedUnit()), c_unitAttributeSummoned) == true)) {
        libNtve_gf_MakeUnitUncommandable(EventUnitCreatedUnit(), gv_optionCommandable);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Build_Init () {
    gt_Build = TriggerCreate("gt_Build_Func");
    TriggerAddEventUnitCreated(gt_Build, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack
//--------------------------------------------------------------------------------------------------
bool gt_Attack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_r;
    unitfilter lv_unfilter;
    abilcmd lv_abilCmd;

    // Variable Initialization
    lv_unfilter = UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    lv_abilCmd = AbilityCommand("Aatk", 0);

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Attack_Init () {
    gt_Attack = TriggerCreate("gt_Attack_Func");
    TriggerEnable(gt_Attack, false);
    TriggerAddEventTimePeriodic(gt_Attack, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Revive
//--------------------------------------------------------------------------------------------------
bool gt_Revive_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), gv_optionCommandable);
    if ((gf_UnitHasBehaviorFlag(gv_behaviorFlagRaiseDead, EventUnit()) == true)) {
        UnitSetCustomValue(EventUnit(), 1, 1.0);
        UIDisplayMessage(gv_playergroupDebug, c_messageAreaSubtitle, (TextWithColor(UnitTypeGetName(UnitGetType(EventUnit())), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/BA2D6DA6")));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Revive_Init () {
    gt_Revive = TriggerCreate("gt_Revive_Func");
    TriggerEnable(gt_Revive, false);
    TriggerAddEventUnitRevive(gt_Revive, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlayerLeft
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeft_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_playergroupAI, EventPlayer());
    BankValueSetFromInt(gv_bank[EventPlayer()], "Score", "GameCount", (BankValueGetAsInt(gv_bank[EventPlayer()], "Score", "GameCount") + 1));
    BankSave(gv_bank[EventPlayer()]);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/C76786CC")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeft_Init () {
    gt_PlayerLeft = TriggerCreate("gt_PlayerLeft_Func");
    TriggerAddEventPlayerLeft(gt_PlayerLeft, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_MapInizialization_Init();
    gt_VenueInizialization_Init();
    gt_BuidingRegionInizialization_Init();
    gt_MapInizialization2_Init();
    gt_RoundRandomization_Init();
    gt_GroupRandomization_Init();
    gt_InitPlayerFinal_Init();
    gt_InitBoard_Init();
    gt_InitUnit_Init();
    gt_Position_Init();
    gt_AOhwImpact_Init();
    gt_moonMoonstoneChangeTOD_Init();
    gt_moonMoonstoneRestoreTOD_Init();
    gt_AwarTargetCheck_Init();
    gt_AraiSummonCount_Init();
    gt_AOclImpact_Init();
    gt_AsplMarker_Init();
    gt_AsplSplitTemplate_Init();
    gt_AsplRegister_Init();
    gt_InitMap_Init();
    gt_TestMode_Init();
    gt_GetRadomItem_Init();
    gt_SetOwner_Init();
    gt_Restart_Init();
    gt_Set_Init();
    gt_UnitRemove_Init();
    gt_InitPlayer_Init();
    gt_InitRandomGroup_Init();
    gt_InitRandomRound_Init();
    gt_InitScheduleAllPlayAll_Init();
    gt_InitPlayerFinal2_Init();
    gt_InitTag_Init();
    gt_InitWorker_Init();
    gt_Waiting_Init();
    gt_ItemBinding_Init();
    gt_AI_Init();
    gt_UnitDied_Init();
    gt_UnitOwnerChanged_Init();
    gt_Reserve_Init();
    gt_WinLossPeriod_Init();
    gt_WinLoss_Init();
    gt_Build_Init();
    gt_Attack_Init();
    gt_Revive_Init();
    gt_PlayerLeft_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
