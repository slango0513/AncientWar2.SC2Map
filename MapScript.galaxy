//==================================================================================================
// 
// Generated Map Script
// 
// Name:   ????????????II
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "LibGAwX"

//--------------------------------------------------------------------------------------------------
// Library: Ancient Wars II
//--------------------------------------------------------------------------------------------------
// Constants
const fixed lib1_gv_minimumPeriod = 0.0625;
const int lib1_gv_customValuePhalanx = 1;
const string lib1_gv_unitTypeUserType = "UnitTypeData";
const string lib1_gv_phalanxUserType = "PhalanxData";
const string lib1_gv_portalUserType = "PortalData";
const string lib1_gv_phalanxBuffUserType = "PhalanxBuffData";
const string lib1_gv_creepUnitTypeUserType = "CreepUnitTypeData";
const int lib1_gv_unitMaximumCountPerPhalanx = 72;
const int lib1_gv_portalMaximumCount = 2;
const int lib1_gv_phalanxMaximumCount = 3;
const int lib1_gv_venueMaximumCount = 8;
const int lib1_gv_roundMaximumCount = 10;
const int lib1_gv_teamRoundMaximumCount = 7;
const int lib1_gv_teamMemberMaximumCount = 2;
const int lib1_gv_teamMaximumCount = 8;
const int lib1_gv_playerCount = 8;
const int lib1_gv_playerMaximumIndex = 15;
const int lib1_gv_venueGroupMaximumCount = (lib1_gv_teamMaximumCount/2);

// Variable Declarations
int[lib1_gv_playerCount + 1] lib1_gv_userPlayer;
int[lib1_gv_playerCount + 1] lib1_gv_mirrorPlayer;
int lib1_gv_teamCount;
int lib1_gv_teamMemberCount;
int lib1_gv_teamRoundCount;
int lib1_gv_roundCount;
playergroup[lib1_gv_teamMaximumCount + 1] lib1_gv_teamGroup;
playergroup[lib1_gv_teamMaximumCount + 1] lib1_gv_mirrorTeamGroup;
region[lib1_gv_venueMaximumCount + 1] lib1_gv_venue;
fixed[lib1_gv_venueMaximumCount + 1] lib1_gv_venueFacing;
revealer[lib1_gv_venueMaximumCount + 1][lib1_gv_playerMaximumIndex + 1] lib1_gv_venueRevealer;
region[lib1_gv_venueMaximumCount + 1] lib1_gv_bonusVenue;
fixed[lib1_gv_venueMaximumCount + 1] lib1_gv_bonusVenueFacing;
revealer[lib1_gv_venueMaximumCount + 1][lib1_gv_playerMaximumIndex + 1] lib1_gv_bonusVenueRevealer;
region[lib1_gv_venueMaximumCount + 1] lib1_gv_venueInitial;
fixed[lib1_gv_venueMaximumCount + 1] lib1_gv_venueInitialFacing;
revealer[lib1_gv_venueMaximumCount + 1][lib1_gv_playerMaximumIndex + 1] lib1_gv_venueInitialRevealer;
region[lib1_gv_playerCount + 1][lib1_gv_phalanxMaximumCount + 1] lib1_gv_buildingRegion;
revealer[lib1_gv_playerMaximumIndex + 1][lib1_gv_playerMaximumIndex + 1][lib1_gv_phalanxMaximumCount + 1] lib1_gv_buildingRegionRevealer;
revealer[lib1_gv_playerMaximumIndex + 1][lib1_gv_playerMaximumIndex + 1][lib1_gv_phalanxMaximumCount + 1] lib1_gv_previewRegionRevealer;
int[lib1_gv_venueMaximumCount + 1][lib1_gv_teamRoundMaximumCount + 1] lib1_gv_teamAtVenue;
int[lib1_gv_venueMaximumCount + 1][lib1_gv_roundMaximumCount + 1] lib1_gv_playerAtVenue;
int[lib1_gv_venueMaximumCount + 1][lib1_gv_roundMaximumCount + 1] lib1_gv_creepPlayerAtVenue;
int[lib1_gv_playerCount + 1] lib1_gv_playerAtBuildingRegion;
string[lib1_gv_playerMaximumIndex + 1][lib1_gv_phalanxMaximumCount + 1][lib1_gv_unitMaximumCountPerPhalanx + 1] lib1_gv_unitType;
int[lib1_gv_playerMaximumIndex + 1] lib1_gv_phalanxIndex;
actor[lib1_gv_playerMaximumIndex + 1][lib1_gv_phalanxMaximumCount + 1][lib1_gv_unitMaximumCountPerPhalanx + 1] lib1_gv_previewModel;
unit[lib1_gv_playerMaximumIndex + 1][lib1_gv_phalanxMaximumCount + 1] lib1_gv_previewer;
region[lib1_gv_playerCount + 1][lib1_gv_phalanxMaximumCount + 1] lib1_gv_previewRegion;
revealer[lib1_gv_playerMaximumIndex + 1] lib1_gv_battlefieldRevealer;
region lib1_gv_battlefield;
timer lib1_gv_timer;
int lib1_gv_timerWindow;
int[lib1_gv_playerMaximumIndex + 1][lib1_gv_phalanxMaximumCount + 1] lib1_gv_reserveUnitIndex;
int[lib1_gv_playerMaximumIndex + 1] lib1_gv_killScore;
int[lib1_gv_playerMaximumIndex + 1] lib1_gv_buildingScore;
int lib1_gv_scoreBoard;
int[lib1_gv_roundMaximumCount + 1] lib1_gv_roundGold;
bool[lib1_gv_roundMaximumCount + 1] lib1_gv_bonusRoundIsOn;
int[lib1_gv_teamRoundMaximumCount + 1] lib1_gv_teamRoundRandomized;
int[lib1_gv_venueGroupMaximumCount + 1][lib1_gv_teamRoundMaximumCount + 1] lib1_gv_venueGroupRandomized;
point[lib1_gv_venueMaximumCount + 1] lib1_gv_creepPoint;
string[lib1_gv_venueMaximumCount + 1][lib1_gv_roundMaximumCount + 1] lib1_gv_creepUnitType;
playergroup lib1_gv_aIGroup;
int[lib1_gv_teamMaximumCount + 1] lib1_gv_teamAlive;
int[lib1_gv_roundMaximumCount + 1] lib1_gv_teamCountAlive;
int[lib1_gv_venueMaximumCount + 1][lib1_gv_roundMaximumCount + 1] lib1_gv_playerAtFinalVenue;
int lib1_gv_round;
int lib1_gv_finalRoundCount;
bool lib1_gv_testPassed;
playergroup lib1_gv_uIPlayergroup;
unitfilter lib1_gv_workerFilter;
unitfilter lib1_gv_phalanxFilter;
unitfilter lib1_gv_portalFilter;
unitfilter lib1_gv_buildingFilter;
unitfilter lib1_gv_creepFilter;
unitfilter lib1_gv_unitFilter;
unitfilter lib1_gv_phalanxPlaceholderFilter;
unitfilter lib1_gv_pathBlockerFilter;
unit[lib1_gv_playerMaximumIndex + 1][lib1_gv_phalanxMaximumCount + 1] lib1_gv_phalanx;
string[lib1_gv_playerMaximumIndex + 1][lib1_gv_phalanxMaximumCount + 1] lib1_gv_phalanxBuff;

// Function Declarations
string lib1_gf_AttributeGetRace (string lp_attribute);
void lib1_gf_ReserveUnitCreation2 (int lp_player, int lp_phalanx);
region lib1_gf_IndexGetVenue (int lp_index);
int lib1_gf_IndexGetUserPlayer (int lp_index);
int lib1_gf_UserPlayerGetMirrorPlayer (int lp_player);
int lib1_gf_MirrorPlayerGetUserPlayer (int lp_player);
string lib1_gf_RaceGetPhalanxType (string lp_race);
int lib1_gf_UnitTypeGetPhalanxCapacity (string lp_unitType);
fixed lib1_gf_PointGetVenueFacing (point lp_point);
int lib1_gf_UnitTypeGetKillGold (string lp_unitType);
void lib1_gf_UserPlayerSet (int lp_index, int lp_player);
void lib1_gf_TeamAlianceSet (int lp_option);
void lib1_gf_MirrorPlayerSet (int lp_index, int lp_player);
bool lib1_gf_IsFinalRound (int lp_round);
void lib1_gf_RoundGoldSet (int lp_round, int lp_value);
void lib1_gf_BonusRoundSet (bool lp_on, int lp_round);
void lib1_gf_GoldAdd (int lp_round);
void lib1_gf_BlockerRemove (region lp_region);
void lib1_gf_ValidRegionFillHidden ();
void lib1_gf_BattlefieldSetAll (region lp_region);
void lib1_gf_BattlefieldRevealerEnable (bool lp_option);
void lib1_gf_BattlefieldReset ();
bool lib1_gf_RegionContainsPointWithOffset (point lp_point, region lp_region, int lp_x, int lp_y);
void lib1_gf_CreepPointSet (point lp_point, int lp_index);
void lib1_gf_VenueInitialSet (region lp_region, int lp_index, fixed lp_facing);
void lib1_gf_BonusVenueSet (region lp_region, int lp_index, fixed lp_facing);
void lib1_gf_VenueRevealerEnable (int lp_round, bool lp_option);
void lib1_gf_BonusVenueReplace ();
void lib1_gf_VenueInitialReplace ();
int lib1_gf_PointInBuildingRegionGetBuildingRegion (point lp_point);
int lib1_gf_PointInBuildingRegionGetPhalanx (point lp_point);
void lib1_gf_PhalanxPlaceholderPositionAll ();
void lib1_gf_BuildingRegionSet (region lp_region, int lp_index, int lp_phalanx);
void lib1_gf_PlayerAtBuildingRegionSet ();
void lib1_gf_BuildingRegionRevealerEnable (bool lp_option, bool lp_debug);
void lib1_gf_UnitTypeSetAll ();
void lib1_gf_UnitTypeReset (int lp_player, int lp_phalanx);
void lib1_gf_UnitTypeSet (int lp_buildingRegion, int lp_phalanx);
void lib1_gf_CreepUnitTypeSetAll ();
void lib1_gf_PreviewUpdateAll ();
void lib1_gf_PreviewUpdate (int lp_player, int lp_phalanx);
void lib1_gf_PreviewerRegionSet (region lp_region, int lp_index, int lp_phalanx);
void lib1_gf_PreviewerRemoveAll ();
void lib1_gf_PreviewerAtBuildingRegionPositionAll ();
void lib1_gf_PreviewEnable (bool lp_option);
void lib1_gf_PreviewModelCreate (int lp_player, point lp_point, string lp_unitType, unit lp_unit);
void lib1_gf_PhalanxCounterEnable (bool lp_reset, bool lp_option);
void lib1_gf_PhalanxBuffSet (unit lp_unit, bool lp_preview);
bool lib1_gf_BehaviorIsPhalanxBuff (string lp_behavior);
void lib1_gf_UnitPositionAll ();
void lib1_gf_UnitOrPreviewModelPosition (unit lp_unit, bool lp_preview);
void lib1_gf_CreepPosition (int lp_round);
void lib1_gf_UnitCreate (int lp_player, point lp_point, string lp_unitType, unit lp_unit);
void lib1_gf_AIPhalanxAndPortalPositionAll (int lp_round);
void lib1_gf_AIPhalanxBuffSetAll (int lp_round);
void lib1_gf_AIPhalanxAndPortalPosition (int lp_player, region lp_region, string lp_unitType, string lp_userType, unitfilter lp_unitFilter, int lp_count);
void lib1_gf_AIBuildingPosition ();
void lib1_gf_TimerSet (fixed lp_duration, bool lp_debug);
void lib1_gf_ReserveUnitIndexResetAll ();
void lib1_gf_ReserveUnitCreationEnable (bool lp_option);
void lib1_gf_ReserveUnitCreation (unit lp_unit, int lp_player, int lp_phalanx);
bool lib1_gf_PlayerIsAlive (int lp_player, int lp_round);
void lib1_gf_CountUnitEnable (bool lp_option);
void lib1_gf_CountUnit (int lp_team, bool lp_wait);
void lib1_gf_GameOver (int lp_team);
void lib1_gf_DisplayMessageAll (int lp_round);
void lib1_gf_PlayerAtFinalVenueSet (int lp_round);
void lib1_gf_StartLocationCameraPan ();
void lib1_gf_VenueCameraPan (int lp_round);
void lib1_gf_KillScoreAndKillGoldAdd (int lp_player, string lp_unitType);
void lib1_gf_KillScoreUpdate (int lp_round);
void lib1_gf_ScoreBoardRowColorUpdate (int lp_round);
void lib1_gf_ScoreBoardSetName (int lp_round, bool lp_bonusRound);
void lib1_gf_BuildingScoreUpdate ();
void lib1_gf_DebugEnable (bool lp_option);
int lib1_gf_PlayerGetTeam (int lp_player);
void lib1_gf_ModInizialization (bool lp_debug, bool lp_virtualTeam);
void lib1_gf_RoundStartLoop (bool lp_debug);
void lib1_gf_RoundStart (int lp_round, bool lp_bonusRound, bool lp_debug);
void lib1_gf_TeamMemberSetAndTeamMemberCountSet (bool lp_virtualTeam);
void lib1_gf_TeamRoundRandomize ();
void lib1_gf_VenueGroupRandomize ();
void lib1_gf_TeamAtVenueSet (bool lp_debug);
void lib1_gf_PlayerAtVenueSet (bool lp_debug);
void lib1_gf_PlayerCountTest ();
void lib1_gf_GameOverTestNotPassed ();

// Trigger Declarations
trigger lib1_gt_UnitChangeOwner2;
trigger lib1_gt_UnitDied2;
trigger lib1_gt_PlayerLeft;
trigger lib1_gt_BuildingCreated;
trigger lib1_gt_UnitAbilityMorph;
trigger lib1_gt_PhalanxCreated;
trigger lib1_gt_PortalCreated;
trigger lib1_gt_PhalanxBuffChange;
trigger lib1_gt_CreateReserveUnit;
trigger lib1_gt_CountUnit;
trigger lib1_gt_CountUnitControl;
trigger lib1_gt_UnitDied;
trigger lib1_gt_CreatedUnitSetTooltipable;
trigger lib1_gt_DebugControlPressed;
trigger lib1_gt_DebugKeyPressed;
trigger lib1_gt_DebugUnitRemove;
trigger lib1_gt_GameAttributeInizialization;
trigger lib1_gt_AllianceInizialization;
trigger lib1_gt_ScoreBoardInizialization;
trigger lib1_gt_TimerInizialization;
trigger lib1_gt_PlayerInizialization;

// Library Initialization
void lib1_InitVariables ();

//--------------------------------------------------------------------------------------------------
// Library: Ancient Wars II
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1_InitLibraries () {
    libNtve_InitVariables();
    libGAwX_InitVariables();
}

// Variable Initialization
bool lib1_InitVariables_completed = false;

void lib1_InitVariables () {
    int init_i;

    if (lib1_InitVariables_completed) {
        return;
    }

    lib1_InitVariables_completed = true;

    for (init_i = 0; init_i <= lib1_gv_teamMaximumCount; init_i += 1) {
        lib1_gv_teamGroup[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= lib1_gv_teamMaximumCount; init_i += 1) {
        lib1_gv_mirrorTeamGroup[init_i] = PlayerGroupEmpty();
    }
    lib1_gv_timer = TimerCreate();
    lib1_gv_timerWindow = c_timerWindowNone;
    lib1_gv_scoreBoard = c_boardNone;
    lib1_gv_aIGroup = PlayerGroupEmpty();
    for (init_i = 0; init_i <= lib1_gv_roundMaximumCount; init_i += 1) {
        lib1_gv_teamCountAlive[init_i] = 1;
    }
    lib1_gv_testPassed = true;
    lib1_gv_uIPlayergroup = PlayerGroupActive();
    lib1_gv_workerFilter = UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    lib1_gv_phalanxFilter = UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    lib1_gv_portalFilter = UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    lib1_gv_buildingFilter = UnitFilter(0, (1 << (c_targetFilterRadar - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    lib1_gv_creepFilter = UnitFilter(0, (1 << (c_targetFilterMapBoss - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    lib1_gv_unitFilter = UnitFilter(0, 0, (1 << c_targetFilterHover) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32)));
    lib1_gv_phalanxPlaceholderFilter = UnitFilter((1 << c_targetFilterHover), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    lib1_gv_pathBlockerFilter = UnitFilter((1 << c_targetFilterHover), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
}

// Functions
string lib1_gf_AttributeGetRace (string lp_attribute) {
    // Variable Declarations
    string lv_userDataType;
    string lv_race;
    int lv_index;
    int lv_count;

    // Variable Initialization
    lv_userDataType = "RaceAttributeMapping";
    lv_race = UserDataGetGameLink(lv_userDataType, (lp_attribute), "Race", 1);
    lv_count = UserDataInstanceCount(lv_userDataType);

    // Implementation
    if ((lv_race == null)) {
        lv_race = UserDataGetGameLink(lv_userDataType, UserDataInstance(lv_userDataType, RandomInt(1, lv_count)), "Race", 1);
    }

    return lv_race;
}

void lib1_gf_ReserveUnitCreation2 (int lp_player, int lp_phalanx) {
    unitgroup auto90ADF64D_g;
    int auto90ADF64D_u;

    // Variable Declarations
    unit lv_phalanxUnit;
    int lv_phalanx;
    string lv_unitType;
    int lv_index;

    // Variable Initialization

    // Implementation
    auto90ADF64D_g = UnitGroup(null, lib1_gf_MirrorPlayerGetUserPlayer(lp_player), lib1_gv_battlefield, lib1_gv_phalanxFilter, 0);
    auto90ADF64D_u = 1;
    for ( ; auto90ADF64D_u <= UnitGroupCount(auto90ADF64D_g, c_unitCountAll) ; auto90ADF64D_u += BoolToInt(lv_phalanxUnit == UnitGroupUnit(auto90ADF64D_g, auto90ADF64D_u)) ) {
        lv_phalanxUnit = UnitGroupUnit(auto90ADF64D_g, auto90ADF64D_u);
        lv_phalanx = FixedToInt(UnitGetCustomValue(lv_phalanxUnit, lib1_gv_customValuePhalanx));
        if ((lp_phalanx == lv_phalanx)) {
            lv_index = (lib1_gf_UnitTypeGetPhalanxCapacity(UnitGetType(lv_phalanxUnit))+lib1_gv_reserveUnitIndex[lib1_gf_MirrorPlayerGetUserPlayer(lp_player)][lv_phalanx]);
            if ((lv_index < lib1_gv_unitMaximumCountPerPhalanx)) {
                lib1_gv_reserveUnitIndex[lib1_gf_MirrorPlayerGetUserPlayer(lp_player)][lv_phalanx] += 1;
                lv_unitType = lib1_gv_unitType[lib1_gf_MirrorPlayerGetUserPlayer(lp_player)][lv_phalanx][lv_index];
                TextExpressionSetToken("Param/Expression/lib_1_A6144548", "A", IntToText(lib1_gv_reserveUnitIndex[0][1]));
                TextExpressionSetToken("Param/Expression/lib_1_A6144548", "B", IntToText(lib1_gv_reserveUnitIndex[1][1]));
                TextExpressionSetToken("Param/Expression/lib_1_A6144548", "C", IntToText(lib1_gv_reserveUnitIndex[2][1]));
                TextExpressionSetToken("Param/Expression/lib_1_A6144548", "D", IntToText(lib1_gv_reserveUnitIndex[3][1]));
                TextExpressionSetToken("Param/Expression/lib_1_A6144548", "E", IntToText(lib1_gv_reserveUnitIndex[4][1]));
                TextExpressionSetToken("Param/Expression/lib_1_A6144548", "F", IntToText(lib1_gv_reserveUnitIndex[5][1]));
                TextExpressionSetToken("Param/Expression/lib_1_A6144548", "G", IntToText(lib1_gv_reserveUnitIndex[6][1]));
                TextExpressionSetToken("Param/Expression/lib_1_A6144548", "H", IntToText(lib1_gv_reserveUnitIndex[7][1]));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextExpressionAssemble("Param/Expression/lib_1_A6144548"));
                TextExpressionSetToken("Param/Expression/lib_1_A2320A59", "A", IntToText(lv_phalanx));
                TextExpressionSetToken("Param/Expression/lib_1_A2320A59", "B", UnitTypeGetName(lv_unitType));
                TextExpressionSetToken("Param/Expression/lib_1_A2320A59", "C", IntToText(lv_index));
                UIDisplayMessage(PlayerGroupSingle(lib1_gf_MirrorPlayerGetUserPlayer(lp_player)), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_A2320A59"));
                if ((lv_unitType != null)) {
                    lib1_gf_UnitCreate(lp_player, UnitGetPosition(lv_phalanxUnit), lv_unitType, lv_phalanxUnit);
                }

            }

        }

    }
}

region lib1_gf_IndexGetVenue (int lp_index) {
    // Implementation
    return lib1_gv_venue[lp_index];
}

int lib1_gf_IndexGetUserPlayer (int lp_index) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    lv_player = lib1_gv_userPlayer[lp_index];
    return lv_player;
}

int lib1_gf_UserPlayerGetMirrorPlayer (int lp_player) {
    int auto6734A28B_ae;
    int auto6734A28B_ai;

    // Variable Declarations
    int lv_player;
    int lv_mirrorPlayer;

    // Variable Initialization

    // Implementation
    auto6734A28B_ae = lib1_gv_playerCount;
    auto6734A28B_ai = 1;
    lv_player = 1;
    for ( ; ( (auto6734A28B_ai >= 0 && lv_player <= auto6734A28B_ae) || (auto6734A28B_ai <= 0 && lv_player >= auto6734A28B_ae) ) ; lv_player += auto6734A28B_ai ) {
        if ((lib1_gv_userPlayer[lv_player] == lp_player)) {
            lv_mirrorPlayer = lib1_gv_mirrorPlayer[lv_player];
        }

    }
    return lv_mirrorPlayer;
}

int lib1_gf_MirrorPlayerGetUserPlayer (int lp_player) {
    int autoBC8C5562_ae;
    int autoBC8C5562_ai;

    // Variable Declarations
    int lv_player;
    int lv_userPlayer;

    // Variable Initialization

    // Implementation
    autoBC8C5562_ae = lib1_gv_playerCount;
    autoBC8C5562_ai = 1;
    lv_player = 1;
    for ( ; ( (autoBC8C5562_ai >= 0 && lv_player <= autoBC8C5562_ae) || (autoBC8C5562_ai <= 0 && lv_player >= autoBC8C5562_ae) ) ; lv_player += autoBC8C5562_ai ) {
        if ((lib1_gv_mirrorPlayer[lv_player] == lp_player)) {
            lv_userPlayer = lib1_gv_userPlayer[lv_player];
        }

    }
    return lv_userPlayer;
}

string lib1_gf_RaceGetPhalanxType (string lp_race) {
    string autoD28280F6_val;

    // Variable Declarations
    string lv_unitType;

    // Variable Initialization

    // Implementation
    autoD28280F6_val = lp_race;
    if (autoD28280F6_val == "Human") {
        lv_unitType = "flag";
    }
    else if (autoD28280F6_val == "NightElf") {
        lv_unitType = "nflg";
    }
    else if (autoD28280F6_val == "Orc") {
        lv_unitType = "oflg";
    }
    else if (autoD28280F6_val == "Undead") {
        lv_unitType = "uflg";
    }
    else {
    }
    return lv_unitType;
}

int lib1_gf_UnitTypeGetPhalanxCapacity (string lp_unitType) {
    // Variable Declarations
    int lv_capacity;
    int lv_columnCount;
    int lv_rowCount;

    // Variable Initialization
    lv_columnCount = UserDataGetInt(lib1_gv_phalanxUserType, ((lp_unitType)), "Column", 1);
    lv_rowCount = UserDataGetInt(lib1_gv_phalanxUserType, ((lp_unitType)), "Row", 1);

    // Implementation
    lv_capacity = (lv_columnCount*lv_rowCount);
    return lv_capacity;
}

fixed lib1_gf_PointGetVenueFacing (point lp_point) {
    int autoE6D99DBD_ae;
    int autoE6D99DBD_ai;

    // Variable Declarations
    int lv_venue;
    fixed lv_facing;

    // Variable Initialization

    // Implementation
    autoE6D99DBD_ae = lib1_gv_venueMaximumCount;
    autoE6D99DBD_ai = 1;
    lv_venue = 1;
    for ( ; ( (autoE6D99DBD_ai >= 0 && lv_venue <= autoE6D99DBD_ae) || (autoE6D99DBD_ai <= 0 && lv_venue >= autoE6D99DBD_ae) ) ; lv_venue += autoE6D99DBD_ai ) {
        if ((RegionContainsPoint(lib1_gv_venue[lv_venue], lp_point) == true)) {
            lv_facing = lib1_gv_venueFacing[lv_venue];
        }

    }
    return lv_facing;
}

int lib1_gf_UnitTypeGetKillGold (string lp_unitType) {
    // Variable Declarations
    int lv_value;

    // Variable Initialization

    // Implementation
    lv_value = CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "KillResource[" + IntToString(2) + "]", c_playerAny);
    return lv_value;
}

void lib1_gf_UserPlayerSet (int lp_index, int lp_player) {
    // Implementation
    lib1_gv_userPlayer[lp_index] = lp_player;
}

void lib1_gf_TeamAlianceSet (int lp_option) {
    int auto0ACACFED_ae;
    int auto0ACACFED_ai;

    // Variable Declarations
    int lv_team;

    // Variable Initialization

    // Implementation
    auto0ACACFED_ae = lib1_gv_teamCount;
    auto0ACACFED_ai = 1;
    lv_team = 1;
    for ( ; ( (auto0ACACFED_ai >= 0 && lv_team <= auto0ACACFED_ae) || (auto0ACACFED_ai <= 0 && lv_team >= auto0ACACFED_ae) ) ; lv_team += auto0ACACFED_ai ) {
        libNtve_gf_SetPlayerGroupAlliance(lib1_gv_teamGroup[lv_team], lp_option);
    }
}

void lib1_gf_MirrorPlayerSet (int lp_index, int lp_player) {
    // Implementation
    lib1_gv_mirrorPlayer[lp_index] = lp_player;
}

bool lib1_gf_IsFinalRound (int lp_round) {
    // Implementation
    if ((lp_round > (lib1_gv_roundCount-lib1_gv_finalRoundCount))) {
        return true;
    }
    else {
        return false;
    }
}

void lib1_gf_RoundGoldSet (int lp_round, int lp_value) {
    // Implementation
    lib1_gv_roundGold[lp_round] = lp_value;
}

void lib1_gf_BonusRoundSet (bool lp_on, int lp_round) {
    // Implementation
    lib1_gv_bonusRoundIsOn[lp_round] = lp_on;
}

void lib1_gf_GoldAdd (int lp_round) {
    int auto2CA5321D_ae;
    int auto2CA5321D_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    auto2CA5321D_ae = lib1_gv_playerCount;
    auto2CA5321D_ai = 1;
    lv_player = 1;
    for ( ; ( (auto2CA5321D_ai >= 0 && lv_player <= auto2CA5321D_ae) || (auto2CA5321D_ai <= 0 && lv_player >= auto2CA5321D_ae) ) ; lv_player += auto2CA5321D_ai ) {
        PlayerModifyPropertyInt(lib1_gf_IndexGetUserPlayer(lv_player), c_playerPropTerrazine, c_playerPropOperAdd, lib1_gv_buildingScore[lib1_gf_IndexGetUserPlayer(lv_player)]);
        PlayerModifyPropertyInt(lib1_gf_IndexGetUserPlayer(lv_player), c_playerPropTerrazine, c_playerPropOperAdd, lib1_gv_roundGold[lp_round]);
        lib1_gv_buildingScore[lib1_gf_IndexGetUserPlayer(lv_player)] = 0;
        lib1_gv_killScore[lib1_gf_IndexGetUserPlayer(lv_player)] = 0;
    }
}

void lib1_gf_BlockerRemove (region lp_region) {
    unitgroup auto58E65E03_g;
    int auto58E65E03_u;

    // Variable Declarations
    unit lv_unit;
    string lv_unitType;

    // Variable Initialization
    lv_unitType = "PathingBlocker1x1";

    // Implementation
    auto58E65E03_g = UnitGroup(lv_unitType, c_playerAny, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto58E65E03_u = 1;
    for ( ; auto58E65E03_u <= UnitGroupCount(auto58E65E03_g, c_unitCountAll) ; auto58E65E03_u += BoolToInt(lv_unit == UnitGroupUnit(auto58E65E03_g, auto58E65E03_u)) ) {
        lv_unit = UnitGroupUnit(auto58E65E03_g, auto58E65E03_u);
        UnitRemove(lv_unit);
    }
}

void lib1_gf_ValidRegionFillHidden () {
    int autoDA3E2C1B_ae;
    int autoDA3E2C1B_ai;
    int autoCEB7DC2B_ae;
    int autoCEB7DC2B_ai;
    int autoC0D17889_ae;
    int autoC0D17889_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_targetBuildingRegion;
    int lv_phalanx;

    // Variable Initialization

    // Implementation
    autoDA3E2C1B_ae = lib1_gv_playerCount;
    autoDA3E2C1B_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (autoDA3E2C1B_ai >= 0 && lv_buildingRegion <= autoDA3E2C1B_ae) || (autoDA3E2C1B_ai <= 0 && lv_buildingRegion >= autoDA3E2C1B_ae) ) ; lv_buildingRegion += autoDA3E2C1B_ai ) {
        VisFillArea(lib1_gv_playerAtBuildingRegion[lv_buildingRegion], RegionEntireMap(), c_fillTypeHidden, false);
        VisRevealArea(lib1_gv_playerAtBuildingRegion[lv_buildingRegion], lib1_gv_battlefield, lib1_gv_minimumPeriod, false);
        autoCEB7DC2B_ae = lib1_gv_playerCount;
        autoCEB7DC2B_ai = 1;
        lv_targetBuildingRegion = 1;
        for ( ; ( (autoCEB7DC2B_ai >= 0 && lv_targetBuildingRegion <= autoCEB7DC2B_ae) || (autoCEB7DC2B_ai <= 0 && lv_targetBuildingRegion >= autoCEB7DC2B_ae) ) ; lv_targetBuildingRegion += autoCEB7DC2B_ai ) {
            autoC0D17889_ae = lib1_gv_phalanxMaximumCount;
            autoC0D17889_ai = 1;
            lv_phalanx = 1;
            for ( ; ( (autoC0D17889_ai >= 0 && lv_phalanx <= autoC0D17889_ae) || (autoC0D17889_ai <= 0 && lv_phalanx >= autoC0D17889_ae) ) ; lv_phalanx += autoC0D17889_ai ) {
                VisRevealArea(lib1_gv_playerAtBuildingRegion[lv_buildingRegion], lib1_gv_buildingRegion[lv_targetBuildingRegion][lv_phalanx], lib1_gv_minimumPeriod, false);
                VisRevealArea(lib1_gv_playerAtBuildingRegion[lv_buildingRegion], lib1_gv_previewRegion[lv_targetBuildingRegion][lv_phalanx], lib1_gv_minimumPeriod, false);
            }
        }
    }
}

void lib1_gf_BattlefieldSetAll (region lp_region) {
    int auto7A602F9F_ae;
    int auto7A602F9F_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    lib1_gv_battlefield = lp_region;
    auto7A602F9F_ae = lib1_gv_playerCount;
    auto7A602F9F_ai = 1;
    lv_player = 1;
    for ( ; ( (auto7A602F9F_ai >= 0 && lv_player <= auto7A602F9F_ae) || (auto7A602F9F_ai <= 0 && lv_player >= auto7A602F9F_ae) ) ; lv_player += auto7A602F9F_ai ) {
        VisRevealerCreate(lib1_gf_IndexGetUserPlayer(lv_player), lib1_gv_battlefield);
        VisRevealerEnable(VisRevealerLastCreated(), false);
        lib1_gv_battlefieldRevealer[lib1_gf_IndexGetUserPlayer(lv_player)] = VisRevealerLastCreated();
        VisRevealerCreate(lib1_gf_UserPlayerGetMirrorPlayer(lib1_gf_IndexGetUserPlayer(lv_player)), lib1_gv_battlefield);
        VisRevealerEnable(VisRevealerLastCreated(), false);
        lib1_gv_battlefieldRevealer[lib1_gf_UserPlayerGetMirrorPlayer(lib1_gf_IndexGetUserPlayer(lv_player))] = VisRevealerLastCreated();
    }
}

void lib1_gf_BattlefieldRevealerEnable (bool lp_option) {
    int auto6153731C_ae;
    int auto6153731C_ai;
    int auto40B9D6BC_ae;
    int auto40B9D6BC_ai;
    int autoAB0C5ACC_ae;
    int autoAB0C5ACC_ai;

    // Variable Declarations
    int lv_player;
    int lv_targetPlayer;
    int lv_phalanx;

    // Variable Initialization

    // Implementation
    auto6153731C_ae = lib1_gv_playerCount;
    auto6153731C_ai = 1;
    lv_player = 1;
    for ( ; ( (auto6153731C_ai >= 0 && lv_player <= auto6153731C_ae) || (auto6153731C_ai <= 0 && lv_player >= auto6153731C_ae) ) ; lv_player += auto6153731C_ai ) {
        if ((lp_option == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lib1_gf_IndexGetUserPlayer(lv_player), "BuildArmy", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lib1_gf_IndexGetUserPlayer(lv_player), "BuildPhalanx", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lib1_gf_IndexGetUserPlayer(lv_player), "BuildPortal", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lib1_gf_IndexGetUserPlayer(lv_player), "CountUnit", 0);
        }

        VisRevealerEnable(lib1_gv_battlefieldRevealer[lib1_gf_IndexGetUserPlayer(lv_player)], lp_option);
        VisRevealerEnable(lib1_gv_battlefieldRevealer[lib1_gf_UserPlayerGetMirrorPlayer(lib1_gf_IndexGetUserPlayer(lv_player))], lp_option);
        auto40B9D6BC_ae = lib1_gv_playerCount;
        auto40B9D6BC_ai = 1;
        lv_targetPlayer = 1;
        for ( ; ( (auto40B9D6BC_ai >= 0 && lv_targetPlayer <= auto40B9D6BC_ae) || (auto40B9D6BC_ai <= 0 && lv_targetPlayer >= auto40B9D6BC_ae) ) ; lv_targetPlayer += auto40B9D6BC_ai ) {
            autoAB0C5ACC_ae = lib1_gv_phalanxMaximumCount;
            autoAB0C5ACC_ai = 1;
            lv_phalanx = 1;
            for ( ; ( (autoAB0C5ACC_ai >= 0 && lv_phalanx <= autoAB0C5ACC_ae) || (autoAB0C5ACC_ai <= 0 && lv_phalanx >= autoAB0C5ACC_ae) ) ; lv_phalanx += autoAB0C5ACC_ai ) {
                VisRevealerEnable(lib1_gv_buildingRegionRevealer[lib1_gf_IndexGetUserPlayer(lv_player)][lib1_gf_IndexGetUserPlayer(lv_targetPlayer)][lv_phalanx], lp_option);
                VisRevealerEnable(lib1_gv_previewRegionRevealer[lib1_gf_IndexGetUserPlayer(lv_player)][lib1_gf_IndexGetUserPlayer(lv_targetPlayer)][lv_phalanx], lp_option);
            }
        }
    }
}

void lib1_gf_BattlefieldReset () {
    unitgroup autoADBBBEC9_g;
    int autoADBBBEC9_u;
    unitgroup autoF361EA0B_g;
    int autoF361EA0B_u;
    unitgroup auto095717E1_g;
    int auto095717E1_u;
    unitgroup auto61EC0CDD_g;
    int auto61EC0CDD_u;
    unitgroup auto99AFFDCD_g;
    int auto99AFFDCD_u;
    unitgroup auto0F49FB1D_g;
    int auto0F49FB1D_u;

    // Variable Declarations
    unit lv_unit;

    // Variable Initialization

    // Implementation
    lib1_gf_ReserveUnitIndexResetAll();
    autoADBBBEC9_g = UnitGroup(null, c_playerAny, lib1_gv_battlefield, lib1_gv_phalanxFilter, 0);
    autoADBBBEC9_u = 1;
    for ( ; autoADBBBEC9_u <= UnitGroupCount(autoADBBBEC9_g, c_unitCountAll) ; autoADBBBEC9_u += BoolToInt(lv_unit == UnitGroupUnit(autoADBBBEC9_g, autoADBBBEC9_u)) ) {
        lv_unit = UnitGroupUnit(autoADBBBEC9_g, autoADBBBEC9_u);
        UnitRemove(lv_unit);
    }
    autoF361EA0B_g = UnitGroup(null, c_playerAny, lib1_gv_battlefield, lib1_gv_portalFilter, 0);
    autoF361EA0B_u = 1;
    for ( ; autoF361EA0B_u <= UnitGroupCount(autoF361EA0B_g, c_unitCountAll) ; autoF361EA0B_u += BoolToInt(lv_unit == UnitGroupUnit(autoF361EA0B_g, autoF361EA0B_u)) ) {
        lv_unit = UnitGroupUnit(autoF361EA0B_g, autoF361EA0B_u);
        UnitRemove(lv_unit);
    }
    auto095717E1_g = UnitGroup(null, c_playerAny, lib1_gv_battlefield, lib1_gv_creepFilter, 0);
    auto095717E1_u = 1;
    for ( ; auto095717E1_u <= UnitGroupCount(auto095717E1_g, c_unitCountAll) ; auto095717E1_u += BoolToInt(lv_unit == UnitGroupUnit(auto095717E1_g, auto095717E1_u)) ) {
        lv_unit = UnitGroupUnit(auto095717E1_g, auto095717E1_u);
        UnitRemove(lv_unit);
    }
    auto61EC0CDD_g = UnitGroup(null, c_playerAny, lib1_gv_battlefield, lib1_gv_unitFilter, 0);
    auto61EC0CDD_u = 1;
    for ( ; auto61EC0CDD_u <= UnitGroupCount(auto61EC0CDD_g, c_unitCountAll) ; auto61EC0CDD_u += BoolToInt(lv_unit == UnitGroupUnit(auto61EC0CDD_g, auto61EC0CDD_u)) ) {
        lv_unit = UnitGroupUnit(auto61EC0CDD_g, auto61EC0CDD_u);
        UnitRemove(lv_unit);
    }
    auto99AFFDCD_g = UnitGroup(null, c_playerAny, lib1_gv_battlefield, UnitFilter((1 << c_targetFilterMissile), 0, 0, 0), 0);
    auto99AFFDCD_u = 1;
    for ( ; auto99AFFDCD_u <= UnitGroupCount(auto99AFFDCD_g, c_unitCountAll) ; auto99AFFDCD_u += BoolToInt(lv_unit == UnitGroupUnit(auto99AFFDCD_g, auto99AFFDCD_u)) ) {
        lv_unit = UnitGroupUnit(auto99AFFDCD_g, auto99AFFDCD_u);
        UnitRemove(lv_unit);
    }
    auto0F49FB1D_g = UnitGroup(null, c_playerAny, lib1_gv_battlefield, UnitFilter(0, (1 << (c_targetFilterDead - 32)), 0, 0), 0);
    auto0F49FB1D_u = 1;
    for ( ; auto0F49FB1D_u <= UnitGroupCount(auto0F49FB1D_g, c_unitCountAll) ; auto0F49FB1D_u += BoolToInt(lv_unit == UnitGroupUnit(auto0F49FB1D_g, auto0F49FB1D_u)) ) {
        lv_unit = UnitGroupUnit(auto0F49FB1D_g, auto0F49FB1D_u);
        UnitRemove(lv_unit);
    }
}

bool lib1_gf_RegionContainsPointWithOffset (point lp_point, region lp_region, int lp_x, int lp_y) {
    // Implementation
    if ((RegionContainsPoint(lp_region, PointWithOffsetPolar(lp_point, (lp_x/2-0.5), (0.0+0))) == true) && (RegionContainsPoint(lp_region, PointWithOffsetPolar(lp_point, (lp_x/2-0.5), (0.0+180))) == true) && (RegionContainsPoint(lp_region, PointWithOffsetPolar(lp_point, (lp_y/2-0.5), (0.0+90))) == true) && (RegionContainsPoint(lp_region, PointWithOffsetPolar(lp_point, (lp_y/2-0.5), (0.0+270))) == true)) {
        return true;
    }
    else {
        return false;
    }
}

void lib1_gf_CreepPointSet (point lp_point, int lp_index) {
    // Implementation
    lib1_gv_creepPoint[lp_index] = lp_point;
}

void lib1_gf_VenueInitialSet (region lp_region, int lp_index, fixed lp_facing) {
    int auto3D1CDBE1_ae;
    int auto3D1CDBE1_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    lib1_gv_venueInitial[lp_index] = lp_region;
    lib1_gv_venueInitialFacing[lp_index] = lp_facing;
    auto3D1CDBE1_ae = lib1_gv_playerCount;
    auto3D1CDBE1_ai = 1;
    lv_player = 1;
    for ( ; ( (auto3D1CDBE1_ai >= 0 && lv_player <= auto3D1CDBE1_ae) || (auto3D1CDBE1_ai <= 0 && lv_player >= auto3D1CDBE1_ae) ) ; lv_player += auto3D1CDBE1_ai ) {
        VisRevealerCreate(lib1_gf_IndexGetUserPlayer(lv_player), lib1_gv_venueInitial[lp_index]);
        VisRevealerEnable(VisRevealerLastCreated(), false);
        lib1_gv_venueInitialRevealer[lp_index][lib1_gf_IndexGetUserPlayer(lv_player)] = VisRevealerLastCreated();
    }
}

void lib1_gf_BonusVenueSet (region lp_region, int lp_index, fixed lp_facing) {
    int auto00A53460_ae;
    int auto00A53460_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    lib1_gv_bonusVenue[lp_index] = lp_region;
    lib1_gv_bonusVenueFacing[lp_index] = lp_facing;
    auto00A53460_ae = lib1_gv_playerCount;
    auto00A53460_ai = 1;
    lv_player = 1;
    for ( ; ( (auto00A53460_ai >= 0 && lv_player <= auto00A53460_ae) || (auto00A53460_ai <= 0 && lv_player >= auto00A53460_ae) ) ; lv_player += auto00A53460_ai ) {
        VisRevealerCreate(lib1_gf_IndexGetUserPlayer(lv_player), lib1_gv_bonusVenue[lp_index]);
        VisRevealerEnable(VisRevealerLastCreated(), false);
        lib1_gv_bonusVenueRevealer[lp_index][lib1_gf_IndexGetUserPlayer(lv_player)] = VisRevealerLastCreated();
    }
}

void lib1_gf_VenueRevealerEnable (int lp_round, bool lp_option) {
    int auto3C818436_ae;
    int auto3C818436_ai;

    // Variable Declarations
    int lv_venue;

    // Variable Initialization

    // Implementation
    lib1_gf_TeamAlianceSet(libNtve_ge_AllianceSetting_Ally);
    auto3C818436_ae = lib1_gv_venueMaximumCount;
    auto3C818436_ai = 1;
    lv_venue = 1;
    for ( ; ( (auto3C818436_ai >= 0 && lv_venue <= auto3C818436_ae) || (auto3C818436_ai <= 0 && lv_venue >= auto3C818436_ae) ) ; lv_venue += auto3C818436_ai ) {
        if ((lib1_gv_playerAtVenue[lv_venue][lp_round] != -1)) {
            if ((lp_option == true)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lib1_gv_playerAtVenue[lv_venue][lp_round], "BuildPhalanx", 1);
                libNtve_gf_SetUpgradeLevelForPlayer(lib1_gv_playerAtVenue[lv_venue][lp_round], "BuildPortal", 1);
            }
            else {
                libNtve_gf_SetUpgradeLevelForPlayer(lib1_gv_playerAtVenue[lv_venue][lp_round], "BuildArmy", 0);
                libNtve_gf_SetUpgradeLevelForPlayer(lib1_gv_playerAtVenue[lv_venue][lp_round], "BuildPhalanx", 0);
                libNtve_gf_SetUpgradeLevelForPlayer(lib1_gv_playerAtVenue[lv_venue][lp_round], "BuildPortal", 0);
                libNtve_gf_SetUpgradeLevelForPlayer(lib1_gv_playerAtVenue[lv_venue][lp_round], "CountUnit", 0);
            }
            VisRevealerEnable(lib1_gv_venueRevealer[lv_venue][lib1_gv_playerAtVenue[lv_venue][lp_round]], lp_option);
        }

    }
}

void lib1_gf_BonusVenueReplace () {
    int auto9739F080_ae;
    int auto9739F080_ai;
    int autoEB81D46C_ae;
    int autoEB81D46C_ai;

    // Variable Declarations
    int lv_venue;
    int lv_index;

    // Variable Initialization

    // Implementation
    auto9739F080_ae = lib1_gv_venueMaximumCount;
    auto9739F080_ai = 1;
    lv_venue = 1;
    for ( ; ( (auto9739F080_ai >= 0 && lv_venue <= auto9739F080_ae) || (auto9739F080_ai <= 0 && lv_venue >= auto9739F080_ae) ) ; lv_venue += auto9739F080_ai ) {
        lib1_gv_venue[lv_venue] = lib1_gv_bonusVenue[lv_venue];
        lib1_gv_venueFacing[lv_venue] = lib1_gv_bonusVenueFacing[lv_venue];
        autoEB81D46C_ae = lib1_gv_playerMaximumIndex;
        autoEB81D46C_ai = 1;
        lv_index = 0;
        for ( ; ( (autoEB81D46C_ai >= 0 && lv_index <= autoEB81D46C_ae) || (autoEB81D46C_ai <= 0 && lv_index >= autoEB81D46C_ae) ) ; lv_index += autoEB81D46C_ai ) {
            lib1_gv_venueRevealer[lv_venue][lv_index] = lib1_gv_bonusVenueRevealer[lv_venue][lv_index];
        }
    }
}

void lib1_gf_VenueInitialReplace () {
    int auto1CE87A64_ae;
    int auto1CE87A64_ai;
    int auto62C61C54_ae;
    int auto62C61C54_ai;

    // Variable Declarations
    int lv_venue;
    int lv_index;

    // Variable Initialization

    // Implementation
    auto1CE87A64_ae = lib1_gv_venueMaximumCount;
    auto1CE87A64_ai = 1;
    lv_venue = 1;
    for ( ; ( (auto1CE87A64_ai >= 0 && lv_venue <= auto1CE87A64_ae) || (auto1CE87A64_ai <= 0 && lv_venue >= auto1CE87A64_ae) ) ; lv_venue += auto1CE87A64_ai ) {
        lib1_gv_venue[lv_venue] = lib1_gv_venueInitial[lv_venue];
        lib1_gv_venueFacing[lv_venue] = lib1_gv_venueInitialFacing[lv_venue];
        auto62C61C54_ae = lib1_gv_playerMaximumIndex;
        auto62C61C54_ai = 1;
        lv_index = 0;
        for ( ; ( (auto62C61C54_ai >= 0 && lv_index <= auto62C61C54_ae) || (auto62C61C54_ai <= 0 && lv_index >= auto62C61C54_ae) ) ; lv_index += auto62C61C54_ai ) {
            lib1_gv_venueRevealer[lv_venue][lv_index] = lib1_gv_venueInitialRevealer[lv_venue][lv_index];
        }
    }
}

int lib1_gf_PointInBuildingRegionGetBuildingRegion (point lp_point) {
    int auto9CEF4CFB_ae;
    int auto9CEF4CFB_ai;
    int auto7BDE7ADB_ae;
    int auto7BDE7ADB_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    int lv_index;

    // Variable Initialization

    // Implementation
    auto9CEF4CFB_ae = lib1_gv_playerCount;
    auto9CEF4CFB_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (auto9CEF4CFB_ai >= 0 && lv_buildingRegion <= auto9CEF4CFB_ae) || (auto9CEF4CFB_ai <= 0 && lv_buildingRegion >= auto9CEF4CFB_ae) ) ; lv_buildingRegion += auto9CEF4CFB_ai ) {
        auto7BDE7ADB_ae = lib1_gv_phalanxMaximumCount;
        auto7BDE7ADB_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto7BDE7ADB_ai >= 0 && lv_phalanx <= auto7BDE7ADB_ae) || (auto7BDE7ADB_ai <= 0 && lv_phalanx >= auto7BDE7ADB_ae) ) ; lv_phalanx += auto7BDE7ADB_ai ) {
            if ((RegionContainsPoint(lib1_gv_buildingRegion[lv_buildingRegion][lv_phalanx], lp_point) == true)) {
                lv_index = lv_buildingRegion;
                break;
            }

        }
    }
    return lv_index;
}

int lib1_gf_PointInBuildingRegionGetPhalanx (point lp_point) {
    int autoDE9E24F0_ae;
    int autoDE9E24F0_ai;
    int auto0501871C_ae;
    int auto0501871C_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    int lv_index;

    // Variable Initialization

    // Implementation
    autoDE9E24F0_ae = lib1_gv_playerCount;
    autoDE9E24F0_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (autoDE9E24F0_ai >= 0 && lv_buildingRegion <= autoDE9E24F0_ae) || (autoDE9E24F0_ai <= 0 && lv_buildingRegion >= autoDE9E24F0_ae) ) ; lv_buildingRegion += autoDE9E24F0_ai ) {
        auto0501871C_ae = lib1_gv_phalanxMaximumCount;
        auto0501871C_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto0501871C_ai >= 0 && lv_phalanx <= auto0501871C_ae) || (auto0501871C_ai <= 0 && lv_phalanx >= auto0501871C_ae) ) ; lv_phalanx += auto0501871C_ai ) {
            if ((RegionContainsPoint(lib1_gv_buildingRegion[lv_buildingRegion][lv_phalanx], lp_point) == true)) {
                lv_index = lv_phalanx;
                break;
            }

        }
    }
    return lv_index;
}

void lib1_gf_PhalanxPlaceholderPositionAll () {
    int auto2E33059B_ae;
    int auto2E33059B_ai;
    string auto3EED03E4_val;
    int auto006BE20C_ae;
    int auto006BE20C_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    string lv_unitType;

    // Variable Initialization

    // Implementation
    auto2E33059B_ae = lib1_gv_playerCount;
    auto2E33059B_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (auto2E33059B_ai >= 0 && lv_buildingRegion <= auto2E33059B_ae) || (auto2E33059B_ai <= 0 && lv_buildingRegion >= auto2E33059B_ae) ) ; lv_buildingRegion += auto2E33059B_ai ) {
        auto3EED03E4_val = PlayerRace(lib1_gv_playerAtBuildingRegion[lv_buildingRegion]);
        if (auto3EED03E4_val == "Human") {
            lv_unitType = "HumanPhalanxPlaceholder";
        }
        else if (auto3EED03E4_val == "NightElf") {
            lv_unitType = "NightElfPhalanxPlaceholder";
        }
        else if (auto3EED03E4_val == "Orc") {
            lv_unitType = "OrcPhalanxPlaceholder";
        }
        else if (auto3EED03E4_val == "Undead") {
            lv_unitType = "UndeadPhalanxPlaceholder";
        }
        else {
        }
        auto006BE20C_ae = lib1_gv_phalanxMaximumCount;
        auto006BE20C_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto006BE20C_ai >= 0 && lv_phalanx <= auto006BE20C_ae) || (auto006BE20C_ai <= 0 && lv_phalanx >= auto006BE20C_ae) ) ; lv_phalanx += auto006BE20C_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_unitType, c_unitCreateIgnorePlacement, lib1_gv_playerAtBuildingRegion[lv_buildingRegion], RegionGetCenter(lib1_gv_previewRegion[lv_buildingRegion][lv_phalanx]));
        }
    }
}

void lib1_gf_BuildingRegionSet (region lp_region, int lp_index, int lp_phalanx) {
    // Implementation
    lib1_gv_buildingRegion[lp_index][lp_phalanx] = lp_region;
}

void lib1_gf_PlayerAtBuildingRegionSet () {
    int autoBAFC5984_ae;
    int autoBAFC5984_ai;
    int auto492A3DBE_ae;
    int auto492A3DBE_ai;
    int auto855AC8E5_ae;
    int auto855AC8E5_ai;
    int autoD61FE5F2_ae;
    int autoD61FE5F2_ai;
    int auto3D50712D_ae;
    int auto3D50712D_ai;
    int autoA6DBEC6B_ae;
    int autoA6DBEC6B_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_targetBuildingRegion;
    int lv_phalanx;
    int lv_player;

    // Variable Initialization

    // Implementation
    autoBAFC5984_ae = lib1_gv_playerCount;
    autoBAFC5984_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (autoBAFC5984_ai >= 0 && lv_buildingRegion <= autoBAFC5984_ae) || (autoBAFC5984_ai <= 0 && lv_buildingRegion >= autoBAFC5984_ae) ) ; lv_buildingRegion += autoBAFC5984_ai ) {
        auto492A3DBE_ae = lib1_gv_phalanxMaximumCount;
        auto492A3DBE_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto492A3DBE_ai >= 0 && lv_phalanx <= auto492A3DBE_ae) || (auto492A3DBE_ai <= 0 && lv_phalanx >= auto492A3DBE_ae) ) ; lv_phalanx += auto492A3DBE_ai ) {
            auto855AC8E5_ae = lib1_gv_playerCount;
            auto855AC8E5_ai = 1;
            lv_targetBuildingRegion = 1;
            for ( ; ( (auto855AC8E5_ai >= 0 && lv_targetBuildingRegion <= auto855AC8E5_ae) || (auto855AC8E5_ai <= 0 && lv_targetBuildingRegion >= auto855AC8E5_ae) ) ; lv_targetBuildingRegion += auto855AC8E5_ai ) {
                if ((RegionContainsPoint(lib1_gv_buildingRegion[lv_buildingRegion][lv_phalanx], PlayerStartLocation(lib1_gf_IndexGetUserPlayer(lv_targetBuildingRegion))) == true)) {
                    lv_player = lib1_gf_IndexGetUserPlayer(lv_targetBuildingRegion);
                }

            }
        }
        lib1_gv_playerAtBuildingRegion[lv_buildingRegion] = lv_player;
    }
    autoD61FE5F2_ae = lib1_gv_playerCount;
    autoD61FE5F2_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (autoD61FE5F2_ai >= 0 && lv_buildingRegion <= autoD61FE5F2_ae) || (autoD61FE5F2_ai <= 0 && lv_buildingRegion >= autoD61FE5F2_ae) ) ; lv_buildingRegion += autoD61FE5F2_ai ) {
        auto3D50712D_ae = lib1_gv_playerCount;
        auto3D50712D_ai = 1;
        lv_targetBuildingRegion = 1;
        for ( ; ( (auto3D50712D_ai >= 0 && lv_targetBuildingRegion <= auto3D50712D_ae) || (auto3D50712D_ai <= 0 && lv_targetBuildingRegion >= auto3D50712D_ae) ) ; lv_targetBuildingRegion += auto3D50712D_ai ) {
            autoA6DBEC6B_ae = lib1_gv_phalanxMaximumCount;
            autoA6DBEC6B_ai = 1;
            lv_phalanx = 1;
            for ( ; ( (autoA6DBEC6B_ai >= 0 && lv_phalanx <= autoA6DBEC6B_ae) || (autoA6DBEC6B_ai <= 0 && lv_phalanx >= autoA6DBEC6B_ae) ) ; lv_phalanx += autoA6DBEC6B_ai ) {
                VisRevealerCreate(lib1_gv_playerAtBuildingRegion[lv_buildingRegion], lib1_gv_buildingRegion[lv_targetBuildingRegion][lv_phalanx]);
                VisRevealerEnable(VisRevealerLastCreated(), false);
                lib1_gv_buildingRegionRevealer[lib1_gv_playerAtBuildingRegion[lv_buildingRegion]][lib1_gv_playerAtBuildingRegion[lv_targetBuildingRegion]][lv_phalanx] = VisRevealerLastCreated();
                VisRevealerCreate(lib1_gv_playerAtBuildingRegion[lv_buildingRegion], lib1_gv_previewRegion[lv_targetBuildingRegion][lv_phalanx]);
                VisRevealerEnable(VisRevealerLastCreated(), false);
                lib1_gv_previewRegionRevealer[lib1_gv_playerAtBuildingRegion[lv_buildingRegion]][lib1_gv_playerAtBuildingRegion[lv_targetBuildingRegion]][lv_phalanx] = VisRevealerLastCreated();
            }
        }
    }
}

void lib1_gf_BuildingRegionRevealerEnable (bool lp_option, bool lp_debug) {
    int autoD23F07EB_ae;
    int autoD23F07EB_ai;
    int auto1482F0A2_ae;
    int auto1482F0A2_ai;
    int autoF66CD14A_ae;
    int autoF66CD14A_ai;
    int auto903068B5_ae;
    int auto903068B5_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    int lv_targetBuildingRegion;

    // Variable Initialization

    // Implementation
    lib1_gf_TeamAlianceSet(libNtve_ge_AllianceSetting_AllyWithSharedVision);
    autoD23F07EB_ae = lib1_gv_playerCount;
    autoD23F07EB_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (autoD23F07EB_ai >= 0 && lv_buildingRegion <= autoD23F07EB_ae) || (autoD23F07EB_ai <= 0 && lv_buildingRegion >= autoD23F07EB_ae) ) ; lv_buildingRegion += autoD23F07EB_ai ) {
        if ((lp_option == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lib1_gv_playerAtBuildingRegion[lv_buildingRegion], "BuildArmy", 1);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(lib1_gv_playerAtBuildingRegion[lv_buildingRegion], "BuildArmy", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lib1_gv_playerAtBuildingRegion[lv_buildingRegion], "BuildPhalanx", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lib1_gv_playerAtBuildingRegion[lv_buildingRegion], "BuildPortal", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lib1_gv_playerAtBuildingRegion[lv_buildingRegion], "CountUnit", 0);
        }
        auto1482F0A2_ae = lib1_gv_phalanxMaximumCount;
        auto1482F0A2_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto1482F0A2_ai >= 0 && lv_phalanx <= auto1482F0A2_ae) || (auto1482F0A2_ai <= 0 && lv_phalanx >= auto1482F0A2_ae) ) ; lv_phalanx += auto1482F0A2_ai ) {
            VisRevealerEnable(lib1_gv_buildingRegionRevealer[lib1_gv_playerAtBuildingRegion[lv_buildingRegion]][lib1_gv_playerAtBuildingRegion[lv_buildingRegion]][lv_phalanx], lp_option);
            VisRevealerEnable(lib1_gv_previewRegionRevealer[lib1_gv_playerAtBuildingRegion[lv_buildingRegion]][lib1_gv_playerAtBuildingRegion[lv_buildingRegion]][lv_phalanx], lp_option);
        }
        if ((lp_debug == true)) {
            autoF66CD14A_ae = lib1_gv_playerCount;
            autoF66CD14A_ai = 1;
            lv_targetBuildingRegion = 1;
            for ( ; ( (autoF66CD14A_ai >= 0 && lv_targetBuildingRegion <= autoF66CD14A_ae) || (autoF66CD14A_ai <= 0 && lv_targetBuildingRegion >= autoF66CD14A_ae) ) ; lv_targetBuildingRegion += autoF66CD14A_ai ) {
                auto903068B5_ae = lib1_gv_phalanxMaximumCount;
                auto903068B5_ai = 1;
                lv_phalanx = 1;
                for ( ; ( (auto903068B5_ai >= 0 && lv_phalanx <= auto903068B5_ae) || (auto903068B5_ai <= 0 && lv_phalanx >= auto903068B5_ae) ) ; lv_phalanx += auto903068B5_ai ) {
                    VisRevealerEnable(lib1_gv_buildingRegionRevealer[lib1_gv_playerAtBuildingRegion[lv_buildingRegion]][lib1_gv_playerAtBuildingRegion[lv_targetBuildingRegion]][lv_phalanx], lp_option);
                    VisRevealerEnable(lib1_gv_previewRegionRevealer[lib1_gv_playerAtBuildingRegion[lv_buildingRegion]][lib1_gv_playerAtBuildingRegion[lv_targetBuildingRegion]][lv_phalanx], lp_option);
                }
            }
        }

    }
}

void lib1_gf_UnitTypeSetAll () {
    int auto299250D4_ae;
    int auto299250D4_ai;
    int autoBE1F5EDD_ae;
    int autoBE1F5EDD_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;

    // Variable Initialization

    // Implementation
    auto299250D4_ae = lib1_gv_playerCount;
    auto299250D4_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (auto299250D4_ai >= 0 && lv_buildingRegion <= auto299250D4_ae) || (auto299250D4_ai <= 0 && lv_buildingRegion >= auto299250D4_ae) ) ; lv_buildingRegion += auto299250D4_ai ) {
        lib1_gv_buildingScore[lib1_gv_playerAtBuildingRegion[lv_buildingRegion]] = 0;
        autoBE1F5EDD_ae = lib1_gv_phalanxMaximumCount;
        autoBE1F5EDD_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (autoBE1F5EDD_ai >= 0 && lv_phalanx <= autoBE1F5EDD_ae) || (autoBE1F5EDD_ai <= 0 && lv_phalanx >= autoBE1F5EDD_ae) ) ; lv_phalanx += autoBE1F5EDD_ai ) {
            lib1_gf_UnitTypeSet(lv_buildingRegion, lv_phalanx);
        }
    }
    lib1_gf_BuildingScoreUpdate();
}

void lib1_gf_UnitTypeReset (int lp_player, int lp_phalanx) {
    int autoD68D896F_ae;
    int autoD68D896F_ai;

    // Variable Declarations
    int lv_unit;

    // Variable Initialization

    // Implementation
    autoD68D896F_ae = lib1_gv_unitMaximumCountPerPhalanx;
    autoD68D896F_ai = 1;
    lv_unit = 1;
    for ( ; ( (autoD68D896F_ai >= 0 && lv_unit <= autoD68D896F_ae) || (autoD68D896F_ai <= 0 && lv_unit >= autoD68D896F_ae) ) ; lv_unit += autoD68D896F_ai ) {
        lib1_gv_unitType[lp_player][lp_phalanx][lv_unit] = null;
    }
}

void lib1_gf_UnitTypeSet (int lp_buildingRegion, int lp_phalanx) {
    int auto80CB521E_ae;
    int auto80CB521E_ai;
    int auto8F3D13A2_ae;
    int auto8F3D13A2_ai;
    int autoCEC1F77A_ae;
    int autoCEC1F77A_ai;
    int auto9357262B_ae;
    int auto9357262B_ai;

    // Variable Declarations
    region lv_buildingRegion;
    point lv_pointInitial;
    point lv_point;
    int lv_unitIndex;
    string lv_unitTypeID;
    int lv_unit;
    int lv_index;
    string lv_unitType;
    int lv_column;
    int lv_row;
    region lv_region;

    // Variable Initialization
    lv_buildingRegion = lib1_gv_buildingRegion[lp_buildingRegion][lp_phalanx];
    lv_unitTypeID = "";

    // Implementation
    lib1_gf_UnitTypeReset(lib1_gv_playerAtBuildingRegion[lp_buildingRegion], lp_phalanx);
    lv_pointInitial = PointWithOffset(RegionGetCenter(lv_buildingRegion), (-libNtve_gf_WidthOfRegion(lv_buildingRegion)/2+0.5), (libNtve_gf_HeightOfRegion(lv_buildingRegion)/2-0.5));
    auto80CB521E_ae = FixedToInt(libNtve_gf_HeightOfRegion(lv_buildingRegion));
    auto80CB521E_ai = 1;
    lv_row = 1;
    for ( ; ( (auto80CB521E_ai >= 0 && lv_row <= auto80CB521E_ae) || (auto80CB521E_ai <= 0 && lv_row >= auto80CB521E_ae) ) ; lv_row += auto80CB521E_ai ) {
        auto8F3D13A2_ae = FixedToInt(libNtve_gf_WidthOfRegion(lv_buildingRegion));
        auto8F3D13A2_ai = 1;
        lv_column = 1;
        for ( ; ( (auto8F3D13A2_ai >= 0 && lv_column <= auto8F3D13A2_ae) || (auto8F3D13A2_ai <= 0 && lv_column >= auto8F3D13A2_ae) ) ; lv_column += auto8F3D13A2_ai ) {
            lv_point = PointWithOffset(lv_pointInitial, (lv_column-1), (-lv_row+1));
            lv_region = RegionRect((PointGetX(lv_point)-0.5), (PointGetY(lv_point)-0.5), (PointGetX(lv_point)+0.5), (PointGetY(lv_point)+0.5));
            UnitGroupLoopBegin(UnitGroup(null, c_playerAny, lv_region, lib1_gv_buildingFilter, 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                lv_unitTypeID = (UnitGetType(UnitGroupLoopCurrent()));
                autoCEC1F77A_ae = UserDataFieldValueCount(lib1_gv_unitTypeUserType, "UnitType");
                autoCEC1F77A_ai = 1;
                lv_index = 1;
                for ( ; ( (autoCEC1F77A_ai >= 0 && lv_index <= autoCEC1F77A_ae) || (autoCEC1F77A_ai <= 0 && lv_index >= autoCEC1F77A_ae) ) ; lv_index += autoCEC1F77A_ai ) {
                    auto9357262B_ae = UserDataGetInt(lib1_gv_unitTypeUserType, (lv_unitTypeID), "Count", lv_index);
                    auto9357262B_ai = 1;
                    lv_unit = 1;
                    for ( ; ( (auto9357262B_ai >= 0 && lv_unit <= auto9357262B_ae) || (auto9357262B_ai <= 0 && lv_unit >= auto9357262B_ae) ) ; lv_unit += auto9357262B_ai ) {
                        if ((lv_unitIndex < lib1_gv_unitMaximumCountPerPhalanx)) {
                            lv_unitType = UserDataGetUnit(lib1_gv_unitTypeUserType, (lv_unitTypeID), "UnitType", lv_index);
                            if ((lv_unitType != null)) {
                                lv_unitIndex += 1;
                                lib1_gv_unitType[lib1_gv_playerAtBuildingRegion[lp_buildingRegion]][lp_phalanx][lv_unitIndex] = lv_unitType;
                                lib1_gv_buildingScore[lib1_gv_playerAtBuildingRegion[lp_buildingRegion]] += lib1_gf_UnitTypeGetKillGold(lv_unitType);
                            }

                        }

                    }
                }
            }
            UnitGroupLoopEnd();
        }
    }
}

void lib1_gf_CreepUnitTypeSetAll () {
    int autoB7D2A1C1_ae;
    int autoB7D2A1C1_ai;
    int autoD770738B_ae;
    int autoD770738B_ai;

    // Variable Declarations
    int lv_round;
    int lv_venue;
    int lv_count;
    int lv_index;
    string lv_roundID;
    string lv_unitType;
    text lv_armorType;
    text lv_weaponType;
    text lv_ability;
    string lv_path;

    // Variable Initialization
    lv_roundID = "";
    lv_path = "";

    // Implementation
    lv_count = UserDataFieldValueCount(lib1_gv_creepUnitTypeUserType, "UnitType");
    autoB7D2A1C1_ae = lib1_gv_roundCount;
    autoB7D2A1C1_ai = 1;
    lv_round = 1;
    for ( ; ( (autoB7D2A1C1_ai >= 0 && lv_round <= autoB7D2A1C1_ae) || (autoB7D2A1C1_ai <= 0 && lv_round >= autoB7D2A1C1_ae) ) ; lv_round += autoB7D2A1C1_ai ) {
        if ((lib1_gv_bonusRoundIsOn[lv_round] == true)) {
            autoD770738B_ae = lib1_gv_venueMaximumCount;
            autoD770738B_ai = 1;
            lv_venue = 1;
            for ( ; ( (autoD770738B_ai >= 0 && lv_venue <= autoD770738B_ae) || (autoD770738B_ai <= 0 && lv_venue >= autoD770738B_ae) ) ; lv_venue += autoD770738B_ai ) {
                while ((lib1_gv_creepUnitType[lv_venue][lv_round] == null)) {
                    lv_index = RandomInt(1, lv_count);
                    lv_roundID = IntToString(lv_round);
                    lv_unitType = UserDataGetUnit(lib1_gv_creepUnitTypeUserType, (lv_roundID), "UnitType", lv_index);
                    if ((lv_unitType != null)) {
                        lib1_gv_creepUnitType[lv_venue][lv_round] = lv_unitType;
                        lv_armorType = UserDataGetText(lib1_gv_creepUnitTypeUserType, (lv_roundID), "ArmorType", lv_index);
                        lv_weaponType = UserDataGetText(lib1_gv_creepUnitTypeUserType, (lv_roundID), "WeaponType", lv_index);
                        lv_ability = UserDataGetText(lib1_gv_creepUnitTypeUserType, (lv_roundID), "Ability", lv_index);
                        lv_path = CatalogFieldValueGet(c_gameCatalogActor, (lv_unitType), "UnitIcon", lib1_gv_playerAtVenue[lv_venue][lv_round]);
                        TextExpressionSetToken("Param/Expression/lib_1_8F546C01", "A", IntToText(lv_round));
                        TextExpressionSetToken("Param/Expression/lib_1_8F546C01", "B", UnitTypeGetName(lv_unitType));
                        TextExpressionSetToken("Param/Expression/lib_1_759ED69E", "A", lv_armorType);
                        TextExpressionSetToken("Param/Expression/lib_1_759ED69E", "B", lv_weaponType);
                        TextExpressionSetToken("Param/Expression/lib_1_759ED69E", "C", lv_ability);
                        TextExpressionSetToken("Param/Expression/lib_1_7E1601E0", "A", IntToText(lv_round));
                        TextExpressionSetToken("Param/Expression/lib_1_7E1601E0", "B", UnitTypeGetName(lv_unitType));
                        HelpPanelAddTip(PlayerGroupSingle(lib1_gv_playerAtVenue[lv_venue][lv_round]), TextExpressionAssemble("Param/Expression/lib_1_8F546C01"), TextExpressionAssemble("Param/Expression/lib_1_759ED69E"), TextExpressionAssemble("Param/Expression/lib_1_7E1601E0"), (lv_path));
                    }

                }
            }
        }

    }
}

void lib1_gf_PreviewUpdateAll () {
    int auto57ABB569_ae;
    int auto57ABB569_ai;
    int auto2D47469B_ae;
    int auto2D47469B_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    string lv_unitType;

    // Variable Initialization

    // Implementation
    auto57ABB569_ae = lib1_gv_playerCount;
    auto57ABB569_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (auto57ABB569_ai >= 0 && lv_buildingRegion <= auto57ABB569_ae) || (auto57ABB569_ai <= 0 && lv_buildingRegion >= auto57ABB569_ae) ) ; lv_buildingRegion += auto57ABB569_ai ) {
        auto2D47469B_ae = lib1_gv_phalanxMaximumCount;
        auto2D47469B_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto2D47469B_ai >= 0 && lv_phalanx <= auto2D47469B_ae) || (auto2D47469B_ai <= 0 && lv_phalanx >= auto2D47469B_ae) ) ; lv_phalanx += auto2D47469B_ai ) {
            lib1_gf_PreviewUpdate(lib1_gv_playerAtBuildingRegion[lv_buildingRegion], lv_phalanx);
        }
    }
}

void lib1_gf_PreviewUpdate (int lp_player, int lp_phalanx) {
    int autoEE51E382_ae;
    int autoEE51E382_ai;

    // Variable Declarations
    string lv_unitTypeID;
    point lv_position;
    int lv_phalanx;
    int lv_index;

    // Variable Initialization

    // Implementation
    autoEE51E382_ae = lib1_gv_unitMaximumCountPerPhalanx;
    autoEE51E382_ai = 1;
    lv_index = 1;
    for ( ; ( (autoEE51E382_ai >= 0 && lv_index <= autoEE51E382_ae) || (autoEE51E382_ai <= 0 && lv_index >= autoEE51E382_ae) ) ; lv_index += autoEE51E382_ai ) {
        ActorSend(lib1_gv_previewModel[lp_player][lp_phalanx][lv_index], libNtve_gf_Destroy());
    }
    lib1_gf_UnitOrPreviewModelPosition(lib1_gv_previewer[lp_player][lp_phalanx], true);
}

void lib1_gf_PreviewerRegionSet (region lp_region, int lp_index, int lp_phalanx) {
    // Implementation
    lib1_gv_previewRegion[lp_index][lp_phalanx] = lp_region;
}

void lib1_gf_PreviewerRemoveAll () {
    int autoF4D741F8_ae;
    int autoF4D741F8_ai;
    int auto60E72E27_ae;
    int auto60E72E27_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    string lv_unitType;

    // Variable Initialization

    // Implementation
    autoF4D741F8_ae = lib1_gv_playerCount;
    autoF4D741F8_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (autoF4D741F8_ai >= 0 && lv_buildingRegion <= autoF4D741F8_ae) || (autoF4D741F8_ai <= 0 && lv_buildingRegion >= autoF4D741F8_ae) ) ; lv_buildingRegion += autoF4D741F8_ai ) {
        auto60E72E27_ae = lib1_gv_phalanxMaximumCount;
        auto60E72E27_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (auto60E72E27_ai >= 0 && lv_phalanx <= auto60E72E27_ae) || (auto60E72E27_ai <= 0 && lv_phalanx >= auto60E72E27_ae) ) ; lv_phalanx += auto60E72E27_ai ) {
            UnitRemove(lib1_gv_previewer[lib1_gv_playerAtBuildingRegion[lv_buildingRegion]][lv_phalanx]);
        }
    }
}

void lib1_gf_PreviewerAtBuildingRegionPositionAll () {
    int autoD4DD2C8F_ae;
    int autoD4DD2C8F_ai;
    int autoBA6308B4_ae;
    int autoBA6308B4_ai;

    // Variable Declarations
    int lv_buildingRegion;
    int lv_phalanx;
    string lv_unitType;

    // Variable Initialization

    // Implementation
    autoD4DD2C8F_ae = lib1_gv_playerCount;
    autoD4DD2C8F_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (autoD4DD2C8F_ai >= 0 && lv_buildingRegion <= autoD4DD2C8F_ae) || (autoD4DD2C8F_ai <= 0 && lv_buildingRegion >= autoD4DD2C8F_ae) ) ; lv_buildingRegion += autoD4DD2C8F_ai ) {
        autoBA6308B4_ae = lib1_gv_phalanxMaximumCount;
        autoBA6308B4_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (autoBA6308B4_ai >= 0 && lv_phalanx <= autoBA6308B4_ae) || (autoBA6308B4_ai <= 0 && lv_phalanx >= autoBA6308B4_ae) ) ; lv_phalanx += autoBA6308B4_ai ) {
            lv_unitType = lib1_gf_RaceGetPhalanxType(PlayerRace(lib1_gv_playerAtBuildingRegion[lv_buildingRegion]));
            libNtve_gf_CreateUnitsAtPoint2(1, lv_unitType, c_unitCreateIgnorePlacement, lib1_gv_playerAtBuildingRegion[lv_buildingRegion], RegionGetCenter(lib1_gv_previewRegion[lv_buildingRegion][lv_phalanx]));
            UnitSetFacing(UnitLastCreated(), 90.0, 0.0);
            UnitSetCustomValue(UnitLastCreated(), lib1_gv_customValuePhalanx, lv_phalanx);
            lib1_gv_previewer[lib1_gv_playerAtBuildingRegion[lv_buildingRegion]][lv_phalanx] = UnitLastCreated();
            lib1_gf_PhalanxBuffSet(UnitLastCreated(), true);
        }
    }
}

void lib1_gf_PreviewEnable (bool lp_option) {
    // Implementation
    if ((lp_option == true)) {
        lib1_gf_PreviewerAtBuildingRegionPositionAll();
    }
    else {
        Wait(lib1_gv_minimumPeriod, c_timeGame);
        lib1_gf_PreviewerRemoveAll();
    }
    TriggerEnable(lib1_gt_BuildingCreated, lp_option);
    TriggerEnable(lib1_gt_UnitAbilityMorph, lp_option);
}

void lib1_gf_PreviewModelCreate (int lp_player, point lp_point, string lp_unitType, unit lp_unit) {
    // Implementation
    libNtve_gf_CreateModelAtPoint(((lp_unitType)), lp_point);
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing((UnitGetFacing(lp_unit)+90)));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false))));
}

void lib1_gf_PhalanxCounterEnable (bool lp_reset, bool lp_option) {
    int autoA2A0DD48_ae;
    int autoA2A0DD48_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    if ((lp_option == true)) {
    }
    else {
        Wait(lib1_gv_minimumPeriod, c_timeGame);
    }
    if ((lp_reset == true)) {
        autoA2A0DD48_ae = lib1_gv_playerCount;
        autoA2A0DD48_ai = 1;
        lv_player = 1;
        for ( ; ( (autoA2A0DD48_ai >= 0 && lv_player <= autoA2A0DD48_ae) || (autoA2A0DD48_ai <= 0 && lv_player >= autoA2A0DD48_ae) ) ; lv_player += autoA2A0DD48_ai ) {
            lib1_gv_phalanxIndex[lib1_gf_IndexGetUserPlayer(lv_player)] = 0;
        }
    }

    TriggerEnable(lib1_gt_PhalanxCreated, lp_option);
    TriggerEnable(lib1_gt_PortalCreated, lp_option);
}

void lib1_gf_PhalanxBuffSet (unit lp_unit, bool lp_preview) {
    // Variable Declarations
    int lv_phalanx;
    int lv_player;
    string lv_behavior;
    string lv_ability;

    // Variable Initialization
    lv_phalanx = FixedToInt(UnitGetCustomValue(lp_unit, lib1_gv_customValuePhalanx));
    lv_player = UnitGetOwner(lp_unit);

    // Implementation
    lv_behavior = lib1_gv_phalanxBuff[lv_player][lv_phalanx];
    if ((lp_preview == false)) {
        while ((lv_behavior == null)) {
            lv_behavior = ((UserDataInstance(lib1_gv_phalanxBuffUserType, RandomInt(1, UserDataInstanceCount(lib1_gv_phalanxBuffUserType)))));
        }
    }

    lv_ability = UserDataGetGameLink(lib1_gv_phalanxBuffUserType, ((lv_behavior)), "Ability", 1);
    UnitIssueOrder(lp_unit, Order(AbilityCommand(lv_ability, 0)), c_orderQueueReplace);
}

bool lib1_gf_BehaviorIsPhalanxBuff (string lp_behavior) {
    int autoA6AD30DE_ae;
    int autoA6AD30DE_ai;

    // Variable Declarations
    int lv_index;
    bool lv_isPhalanxBuff;

    // Variable Initialization

    // Implementation
    autoA6AD30DE_ae = UserDataInstanceCount(lib1_gv_phalanxBuffUserType);
    autoA6AD30DE_ai = 1;
    lv_index = 1;
    for ( ; ( (autoA6AD30DE_ai >= 0 && lv_index <= autoA6AD30DE_ae) || (autoA6AD30DE_ai <= 0 && lv_index >= autoA6AD30DE_ae) ) ; lv_index += autoA6AD30DE_ai ) {
        if (((lp_behavior) == (UserDataInstance(lib1_gv_phalanxBuffUserType, lv_index)))) {
            lv_isPhalanxBuff = true;
            break;
        }

    }
    return lv_isPhalanxBuff;
}

void lib1_gf_UnitPositionAll () {
    int autoF0739A59_ae;
    int autoF0739A59_ai;
    unitgroup autoAF2CB3F2_g;
    int autoAF2CB3F2_u;

    // Variable Declarations
    unit lv_unit;
    int lv_venue;
    int lv_phalanx;

    // Variable Initialization

    // Implementation
    autoF0739A59_ae = lib1_gv_venueMaximumCount;
    autoF0739A59_ai = 1;
    lv_venue = 1;
    for ( ; ( (autoF0739A59_ai >= 0 && lv_venue <= autoF0739A59_ae) || (autoF0739A59_ai <= 0 && lv_venue >= autoF0739A59_ae) ) ; lv_venue += autoF0739A59_ai ) {
        autoAF2CB3F2_g = UnitGroup(null, c_playerAny, lib1_gv_venue[lv_venue], lib1_gv_phalanxFilter, 0);
        autoAF2CB3F2_u = 1;
        for ( ; autoAF2CB3F2_u <= UnitGroupCount(autoAF2CB3F2_g, c_unitCountAll) ; autoAF2CB3F2_u += BoolToInt(lv_unit == UnitGroupUnit(autoAF2CB3F2_g, autoAF2CB3F2_u)) ) {
            lv_unit = UnitGroupUnit(autoAF2CB3F2_g, autoAF2CB3F2_u);
            lv_phalanx = FixedToInt(UnitGetCustomValue(lv_unit, lib1_gv_customValuePhalanx));
            lib1_gf_UnitOrPreviewModelPosition(lv_unit, false);
        }
    }
}

void lib1_gf_UnitOrPreviewModelPosition (unit lp_unit, bool lp_preview) {
    int autoD5C38DC0_ae;
    int autoD5C38DC0_ai;
    int auto69E47B4A_ae;
    int auto69E47B4A_ai;

    // Variable Declarations
    int lv_player;
    string lv_unitTypeID;
    point lv_position;
    int lv_phalanx;
    int lv_playerUnitCreated;
    int lv_column;
    int lv_columnCount;
    int lv_row;
    int lv_rowCount;
    point lv_pointInitial;
    point lv_pointColumn;
    point lv_pointRow;
    int lv_index;
    string lv_unitType;

    // Variable Initialization
    lv_player = UnitGetOwner(lp_unit);
    lv_unitTypeID = (UnitGetType(lp_unit));
    lv_position = UnitGetPosition(lp_unit);
    lv_phalanx = FixedToInt(UnitGetCustomValue(lp_unit, lib1_gv_customValuePhalanx));

    // Implementation
    if ((lp_preview == true)) {
        lv_playerUnitCreated = lv_player;
    }
    else {
        lv_playerUnitCreated = lib1_gf_UserPlayerGetMirrorPlayer(lv_player);
    }
    lv_columnCount = UserDataGetInt(lib1_gv_phalanxUserType, (lv_unitTypeID), "Row", 1);
    lv_rowCount = UserDataGetInt(lib1_gv_phalanxUserType, (lv_unitTypeID), "Column", 1);
    lv_pointInitial = PointWithOffsetPolar(PointWithOffsetPolar(lv_position, (lv_rowCount/2-0.5), PointGetFacing(lv_position)), (lv_columnCount/2-0.5), (UnitGetFacing(lp_unit)+90));
    lv_index = 0;
    autoD5C38DC0_ae = lv_columnCount;
    autoD5C38DC0_ai = 1;
    lv_column = 1;
    for ( ; ( (autoD5C38DC0_ai >= 0 && lv_column <= autoD5C38DC0_ae) || (autoD5C38DC0_ai <= 0 && lv_column >= autoD5C38DC0_ae) ) ; lv_column += autoD5C38DC0_ai ) {
        lv_pointColumn = PointWithOffsetPolar(lv_pointInitial, (lv_column-1), (UnitGetFacing(lp_unit)+180));
        auto69E47B4A_ae = lv_rowCount;
        auto69E47B4A_ai = 1;
        lv_row = 1;
        for ( ; ( (auto69E47B4A_ai >= 0 && lv_row <= auto69E47B4A_ae) || (auto69E47B4A_ai <= 0 && lv_row >= auto69E47B4A_ae) ) ; lv_row += auto69E47B4A_ai ) {
            lv_pointRow = PointWithOffsetPolar(lv_pointColumn, (lv_row-1), (UnitGetFacing(lp_unit)-90));
            lv_index += 1;
            lv_unitType = lib1_gv_unitType[lv_player][lv_phalanx][lv_index];
            if ((lv_unitType != null)) {
                if ((lp_preview == true)) {
                    lib1_gf_PreviewModelCreate(lv_playerUnitCreated, lv_pointRow, lv_unitType, lp_unit);
                    lib1_gv_previewModel[lv_player][lv_phalanx][lv_index] = libNtve_gf_ActorLastCreated();
                }
                else {
                    lib1_gf_UnitCreate(lv_playerUnitCreated, lv_pointRow, lv_unitType, lp_unit);
                }
            }

        }
    }
}

void lib1_gf_CreepPosition (int lp_round) {
    int auto15915E2A_ae;
    int auto15915E2A_ai;

    // Variable Declarations
    int lv_venue;

    // Variable Initialization

    // Implementation
    auto15915E2A_ae = lib1_gv_venueMaximumCount;
    auto15915E2A_ai = 1;
    lv_venue = 1;
    for ( ; ( (auto15915E2A_ai >= 0 && lv_venue <= auto15915E2A_ae) || (auto15915E2A_ai <= 0 && lv_venue >= auto15915E2A_ae) ) ; lv_venue += auto15915E2A_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, lib1_gv_creepUnitType[lv_venue][lp_round], 0, lib1_gv_creepPlayerAtVenue[lv_venue][lp_round], lib1_gv_creepPoint[lv_venue]);
        UnitSetFacing(UnitLastCreated(), PointGetFacing(lib1_gv_creepPoint[lv_venue]), 0.0);
    }
}

void lib1_gf_UnitCreate (int lp_player, point lp_point, string lp_unitType, unit lp_unit) {
    int auto51054808_ae;
    int auto51054808_ai;

    // Variable Declarations
    int lv_index;
    string lv_behavior;

    // Variable Initialization

    // Implementation
    UnitCreate(1, lp_unitType, c_unitCreateIgnorePlacement, lp_player, lp_point, UnitGetFacing(lp_unit));
    UnitSetFacing(UnitLastCreated(), UnitGetFacing(lp_unit), 0.0);
    UnitSetCustomValue(UnitLastCreated(), lib1_gv_customValuePhalanx, UnitGetCustomValue(lp_unit, lib1_gv_customValuePhalanx));
    UnitBehaviorAdd(UnitLastCreated(), "PhalanxMarker", lp_unit, 1);
    auto51054808_ae = UnitBehaviorCountAll(lp_unit);
    auto51054808_ai = 1;
    lv_index = 1;
    for ( ; ( (auto51054808_ai >= 0 && lv_index <= auto51054808_ae) || (auto51054808_ai <= 0 && lv_index >= auto51054808_ae) ) ; lv_index += auto51054808_ai ) {
        lv_behavior = UnitBehaviorGet(lp_unit, lv_index);
        if (((lv_behavior) == (((lv_behavior))))) {
            UnitBehaviorAdd(UnitLastCreated(), UserDataGetGameLink(lib1_gv_phalanxBuffUserType, ((lv_behavior)), "Behavior", 1), UnitLastCreated(), 1);
        }

    }
}

void lib1_gf_AIPhalanxAndPortalPositionAll (int lp_round) {
    int auto2F8E2CB7_ae;
    int auto2F8E2CB7_ai;

    // Variable Declarations
    int lv_venue;
    string lv_unitType;

    // Variable Initialization

    // Implementation
    auto2F8E2CB7_ae = lib1_gv_venueMaximumCount;
    auto2F8E2CB7_ai = 1;
    lv_venue = 1;
    for ( ; ( (auto2F8E2CB7_ai >= 0 && lv_venue <= auto2F8E2CB7_ae) || (auto2F8E2CB7_ai <= 0 && lv_venue >= auto2F8E2CB7_ae) ) ; lv_venue += auto2F8E2CB7_ai ) {
        if ((lib1_gv_playerAtVenue[lv_venue][lp_round] != -1)) {
            lv_unitType = lib1_gf_RaceGetPhalanxType(PlayerRace(lib1_gv_playerAtVenue[lv_venue][lp_round]));
            lib1_gf_AIPhalanxAndPortalPosition(lib1_gv_playerAtVenue[lv_venue][lp_round], lib1_gv_venue[lv_venue], lv_unitType, lib1_gv_phalanxUserType, lib1_gv_phalanxFilter, lib1_gv_phalanxMaximumCount);
            if ((PlayerGroupHasPlayer(lib1_gv_aIGroup, lib1_gv_playerAtVenue[lv_venue][lp_round]) == true)) {
                lv_unitType = "hprt";
                lib1_gf_AIPhalanxAndPortalPosition(lib1_gv_playerAtVenue[lv_venue][lp_round], lib1_gv_venue[lv_venue], lv_unitType, lib1_gv_portalUserType, lib1_gv_portalFilter, lib1_gv_portalMaximumCount);
            }

        }

    }
}

void lib1_gf_AIPhalanxBuffSetAll (int lp_round) {
    int auto4AE144AB_ae;
    int auto4AE144AB_ai;
    int auto903337B4_ae;
    int auto903337B4_ai;

    // Variable Declarations
    int lv_venue;
    int lv_phalanx;

    // Variable Initialization

    // Implementation
    auto4AE144AB_ae = lib1_gv_venueMaximumCount;
    auto4AE144AB_ai = 1;
    lv_venue = 1;
    for ( ; ( (auto4AE144AB_ai >= 0 && lv_venue <= auto4AE144AB_ae) || (auto4AE144AB_ai <= 0 && lv_venue >= auto4AE144AB_ae) ) ; lv_venue += auto4AE144AB_ai ) {
        if ((lib1_gv_playerAtVenue[lv_venue][lp_round] != -1)) {
            auto903337B4_ae = lib1_gv_phalanxMaximumCount;
            auto903337B4_ai = 1;
            lv_phalanx = 1;
            for ( ; ( (auto903337B4_ai >= 0 && lv_phalanx <= auto903337B4_ae) || (auto903337B4_ai <= 0 && lv_phalanx >= auto903337B4_ae) ) ; lv_phalanx += auto903337B4_ai ) {
                lib1_gf_PhalanxBuffSet(lib1_gv_phalanx[lib1_gv_playerAtVenue[lv_venue][lp_round]][lv_phalanx], false);
            }
        }

    }
}

void lib1_gf_AIPhalanxAndPortalPosition (int lp_player, region lp_region, string lp_unitType, string lp_userType, unitfilter lp_unitFilter, int lp_count) {
    // Variable Declarations
    string lv_unitTypeID;
    int lv_columnCount;
    int lv_rowCount;
    point lv_point;

    // Variable Initialization
    lv_unitTypeID = "";

    // Implementation
    lv_unitTypeID = (lp_unitType);
    lv_columnCount = UserDataGetInt(lp_userType, (lv_unitTypeID), "Row", 1);
    lv_rowCount = UserDataGetInt(lp_userType, (lv_unitTypeID), "Column", 1);
    while ((UnitGroupCount(UnitGroup(null, lp_player, lp_region, lp_unitFilter, 0), c_unitCountAlive) < lp_count)) {
        lv_point = RegionRandomPoint(lp_region);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unitType, 0, lp_player, lv_point);
        if ((UnitGetType(UnitLastCreated()) != null) && (lib1_gf_RegionContainsPointWithOffset(UnitGetPosition(UnitLastCreated()), lp_region, lv_rowCount, lv_columnCount) == true)) {
        }
        else {
            UnitRemove(UnitLastCreated());
        }
    }
}

void lib1_gf_AIBuildingPosition () {
    int auto412300F4_ae;
    int auto412300F4_ai;
    unitgroup auto9A50E66A_g;
    int auto9A50E66A_u;
    string auto32DBD560_val;

    // Variable Declarations
    int lv_buildingRegion;
    unit lv_unit;
    string lv_ability;
    abilcmd lv_abilityCommand;
    point lv_point;
    order lv_order;

    // Variable Initialization

    // Implementation
    auto412300F4_ae = lib1_gv_playerCount;
    auto412300F4_ai = 1;
    lv_buildingRegion = 1;
    for ( ; ( (auto412300F4_ai >= 0 && lv_buildingRegion <= auto412300F4_ae) || (auto412300F4_ai <= 0 && lv_buildingRegion >= auto412300F4_ae) ) ; lv_buildingRegion += auto412300F4_ai ) {
        if ((PlayerGroupHasPlayer(lib1_gv_aIGroup, lib1_gv_playerAtBuildingRegion[lv_buildingRegion]) == true)) {
            auto9A50E66A_g = UnitGroup(null, lib1_gv_playerAtBuildingRegion[lv_buildingRegion], null, lib1_gv_workerFilter, 0);
            auto9A50E66A_u = 1;
            for ( ; auto9A50E66A_u <= UnitGroupCount(auto9A50E66A_g, c_unitCountAll) ; auto9A50E66A_u += BoolToInt(lv_unit == UnitGroupUnit(auto9A50E66A_g, auto9A50E66A_u)) ) {
                lv_unit = UnitGroupUnit(auto9A50E66A_g, auto9A50E66A_u);
                auto32DBD560_val = UnitGetType(lv_unit);
                if (auto32DBD560_val == "hpea") {
                    lv_ability = "AHbuUnit";
                }
                else if (auto32DBD560_val == "ewsp") {
                    lv_ability = "AEbuUnit";
                }
                else if (auto32DBD560_val == "opeo") {
                    lv_ability = "AObuArmy";
                }
                else if (auto32DBD560_val == "uaco") {
                    lv_ability = "AUbuUnit";
                }
                else {
                }
                while ((PlayerGetPropertyInt(lib1_gv_playerAtBuildingRegion[lv_buildingRegion], c_playerPropTerrazine) >= 150)) {
                    lv_abilityCommand = AbilityCommand(lv_ability, RandomInt(0, 29));
                    lv_point = RegionRandomPoint(lib1_gv_buildingRegion[lv_buildingRegion][RandomInt(1, lib1_gv_phalanxMaximumCount)]);
                    lv_order = OrderTargetingPoint(lv_abilityCommand, lv_point);
                    UnitIssueOrder(lv_unit, lv_order, c_orderQueueReplace);
                }
            }
        }

    }
}

void lib1_gf_TimerSet (fixed lp_duration, bool lp_debug) {
    // Implementation
    if ((lp_debug == true)) {
        TriggerWaitForTrigger(lib1_gt_DebugControlPressed, false);
    }
    else {
        TimerStart(lib1_gv_timer, lp_duration, false, c_timeGame);
        TimerWindowShow(lib1_gv_timerWindow, lib1_gv_uIPlayergroup, true);
        libNtve_gf_WaitForTimer(lib1_gv_timer, 0.0, false);
        TimerWindowShow(lib1_gv_timerWindow, lib1_gv_uIPlayergroup, false);
    }
    Wait(lib1_gv_minimumPeriod, c_timeGame);
}

void lib1_gf_ReserveUnitIndexResetAll () {
    int auto885F74C3_ae;
    int auto885F74C3_ai;
    int autoF1AA57DD_ae;
    int autoF1AA57DD_ai;

    // Variable Declarations
    int lv_player;
    int lv_phalanx;

    // Variable Initialization

    // Implementation
    auto885F74C3_ae = lib1_gv_playerCount;
    auto885F74C3_ai = 1;
    lv_player = 1;
    for ( ; ( (auto885F74C3_ai >= 0 && lv_player <= auto885F74C3_ae) || (auto885F74C3_ai <= 0 && lv_player >= auto885F74C3_ae) ) ; lv_player += auto885F74C3_ai ) {
        autoF1AA57DD_ae = lib1_gv_phalanxMaximumCount;
        autoF1AA57DD_ai = 1;
        lv_phalanx = 1;
        for ( ; ( (autoF1AA57DD_ai >= 0 && lv_phalanx <= autoF1AA57DD_ae) || (autoF1AA57DD_ai <= 0 && lv_phalanx >= autoF1AA57DD_ae) ) ; lv_phalanx += autoF1AA57DD_ai ) {
            lib1_gv_reserveUnitIndex[lib1_gf_IndexGetUserPlayer(lv_player)][lv_phalanx] = 0;
        }
    }
}

void lib1_gf_ReserveUnitCreationEnable (bool lp_option) {
    int autoFB493DB7_ae;
    int autoFB493DB7_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    autoFB493DB7_ae = lib1_gv_playerCount;
    autoFB493DB7_ai = 1;
    lv_player = 1;
    for ( ; ( (autoFB493DB7_ai >= 0 && lv_player <= autoFB493DB7_ae) || (autoFB493DB7_ai <= 0 && lv_player >= autoFB493DB7_ae) ) ; lv_player += autoFB493DB7_ai ) {
        if ((lp_option == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lib1_gf_IndexGetUserPlayer(lv_player), "CountUnit", 1);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(lib1_gf_IndexGetUserPlayer(lv_player), "BuildArmy", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lib1_gf_IndexGetUserPlayer(lv_player), "BuildPhalanx", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lib1_gf_IndexGetUserPlayer(lv_player), "BuildPortal", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lib1_gf_IndexGetUserPlayer(lv_player), "CountUnit", 0);
        }
    }
    TriggerEnable(lib1_gt_CreateReserveUnit, lp_option);
    TriggerEnable(lib1_gt_UnitDied, lp_option);
}

void lib1_gf_ReserveUnitCreation (unit lp_unit, int lp_player, int lp_phalanx) {
    // Variable Declarations
    string lv_unitType;
    int lv_index;

    // Variable Initialization

    // Implementation
    lv_index = (lib1_gf_UnitTypeGetPhalanxCapacity(UnitGetType(lp_unit))+lib1_gv_reserveUnitIndex[lp_player][lp_phalanx]);
    if ((lv_index < lib1_gv_unitMaximumCountPerPhalanx)) {
        lib1_gv_reserveUnitIndex[lp_player][lp_phalanx] += 1;
        lv_unitType = lib1_gv_unitType[lp_player][lp_phalanx][lv_index];
        if ((lv_unitType != null)) {
            lib1_gf_UnitCreate(lib1_gf_UserPlayerGetMirrorPlayer(lp_player), UnitGetPosition(lp_unit), lv_unitType, lp_unit);
        }

    }

}

bool lib1_gf_PlayerIsAlive (int lp_player, int lp_round) {
    int auto45FE1244_ae;
    int auto45FE1244_ai;

    // Variable Declarations
    int lv_team;
    bool lv_playerIsAlive;

    // Variable Initialization

    // Implementation
    auto45FE1244_ae = lib1_gv_teamCountAlive[lp_round];
    auto45FE1244_ai = 1;
    lv_team = 1;
    for ( ; ( (auto45FE1244_ai >= 0 && lv_team <= auto45FE1244_ae) || (auto45FE1244_ai <= 0 && lv_team >= auto45FE1244_ae) ) ; lv_team += auto45FE1244_ai ) {
        if ((PlayerGroupHasPlayer(lib1_gv_teamGroup[lib1_gv_teamAlive[lv_team]], lp_player) == true)) {
            lv_playerIsAlive = true;
            break;
        }

    }
    return lv_playerIsAlive;
}

void lib1_gf_CountUnitEnable (bool lp_option) {
    // Implementation
    TriggerEnable(lib1_gt_CountUnit, lp_option);
}

void lib1_gf_CountUnit (int lp_team, bool lp_wait) {
    int auto4807CADF_ae;
    int auto4807CADF_ai;
    unitgroup autoE4C18A95_g;
    int autoE4C18A95_u;

    // Variable Declarations
    int lv_team;
    int lv_teamMember;
    int lv_player;
    unit lv_unit;
    string lv_effect;

    // Variable Initialization
    lv_effect = "CountUnitRemove";

    // Implementation
    auto4807CADF_ae = lib1_gv_teamMemberCount;
    auto4807CADF_ai = 1;
    lv_teamMember = 1;
    for ( ; ( (auto4807CADF_ai >= 0 && lv_teamMember <= auto4807CADF_ae) || (auto4807CADF_ai <= 0 && lv_teamMember >= auto4807CADF_ae) ) ; lv_teamMember += auto4807CADF_ai ) {
        lv_player = PlayerGroupPlayer(lib1_gv_teamGroup[lp_team], lv_teamMember);
        while ((UnitGroupCount(UnitGroup(null, lib1_gf_UserPlayerGetMirrorPlayer(lv_player), lib1_gv_battlefield, lib1_gv_unitFilter, 0), c_unitCountAlive) > 0)) {
            autoE4C18A95_g = UnitGroup(null, lib1_gf_UserPlayerGetMirrorPlayer(lv_player), lib1_gv_battlefield, lib1_gv_unitFilter, 0);
            autoE4C18A95_u = 1;
            for ( ; autoE4C18A95_u <= UnitGroupCount(autoE4C18A95_g, c_unitCountAll) ; autoE4C18A95_u += BoolToInt(lv_unit == UnitGroupUnit(autoE4C18A95_g, autoE4C18A95_u)) ) {
                lv_unit = UnitGroupUnit(autoE4C18A95_g, autoE4C18A95_u);
                PlayerCreateEffectUnit(lib1_gf_UserPlayerGetMirrorPlayer(lv_player), lv_effect, lv_unit);
                if ((lp_wait == true)) {
                    Wait(lib1_gv_minimumPeriod, c_timeGame);
                }

            }
        }
    }
}

void lib1_gf_GameOver (int lp_team) {
    int autoE0EA804D_ae;
    int autoE0EA804D_ai;
    int auto074E0304_ae;
    int auto074E0304_ai;
    int autoB41D69FC_ae;
    int autoB41D69FC_ai;

    // Variable Declarations
    int lv_teamMember;
    int lv_team;
    int lv_time;

    // Variable Initialization
    lv_time = 10;

    // Implementation
    TriggerEnable(lib1_gt_PlayerLeft, false);
    TextExpressionSetToken("Param/Expression/lib_1_5AD6427F", "A", IntToText(lv_time));
    UIDisplayMessage(lib1_gv_uIPlayergroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_5AD6427F"));
    Wait(lv_time, c_timeGame);
    autoE0EA804D_ae = lib1_gv_teamMemberCount;
    autoE0EA804D_ai = 1;
    lv_teamMember = 1;
    for ( ; ( (autoE0EA804D_ai >= 0 && lv_teamMember <= autoE0EA804D_ae) || (autoE0EA804D_ai <= 0 && lv_teamMember >= autoE0EA804D_ae) ) ; lv_teamMember += autoE0EA804D_ai ) {
        GameOver(PlayerGroupPlayer(lib1_gv_teamGroup[lp_team], lv_teamMember), c_gameOverVictory, true, true);
    }
    auto074E0304_ae = lib1_gv_teamCount;
    auto074E0304_ai = 1;
    lv_team = 1;
    for ( ; ( (auto074E0304_ai >= 0 && lv_team <= auto074E0304_ae) || (auto074E0304_ai <= 0 && lv_team >= auto074E0304_ae) ) ; lv_team += auto074E0304_ai ) {
        if ((lv_team != lp_team)) {
            autoB41D69FC_ae = lib1_gv_teamMemberCount;
            autoB41D69FC_ai = 1;
            lv_teamMember = 1;
            for ( ; ( (autoB41D69FC_ai >= 0 && lv_teamMember <= autoB41D69FC_ae) || (autoB41D69FC_ai <= 0 && lv_teamMember >= autoB41D69FC_ae) ) ; lv_teamMember += autoB41D69FC_ai ) {
                GameOver(PlayerGroupPlayer(lib1_gv_teamGroup[lv_team], lv_teamMember), c_gameOverDefeat, true, true);
            }
        }

    }
}

void lib1_gf_DisplayMessageAll (int lp_round) {
    int auto38248A9B_ae;
    int auto38248A9B_ai;

    // Variable Declarations
    int lv_player;
    text lv_text;

    // Variable Initialization

    // Implementation
    if ((lib1_gv_round == lib1_gv_roundCount)) {
        lv_text = StringExternal("Param/Value/lib_1_408BD03E");
    }
    else {
        lv_text = StringExternal("Param/Value/lib_1_BDBF7D65");
    }
    auto38248A9B_ae = lib1_gv_playerCount;
    auto38248A9B_ai = 1;
    lv_player = 1;
    for ( ; ( (auto38248A9B_ai >= 0 && lv_player <= auto38248A9B_ae) || (auto38248A9B_ai <= 0 && lv_player >= auto38248A9B_ae) ) ; lv_player += auto38248A9B_ai ) {
        if ((lib1_gf_PlayerIsAlive(lib1_gf_IndexGetUserPlayer(lv_player), lp_round) == true)) {
            TextExpressionSetToken("Param/Expression/lib_1_6267754B", "A", TextWithColor(PlayerName(lib1_gf_IndexGetUserPlayer(lv_player)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lib1_gf_IndexGetUserPlayer(lv_player), false))));
            TextExpressionSetToken("Param/Expression/lib_1_6267754B", "B", lv_text);
            UIDisplayMessage(lib1_gv_uIPlayergroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_6267754B"));
        }

    }
}

void lib1_gf_PlayerAtFinalVenueSet (int lp_round) {
    int autoBF45BC53_ae;
    int autoBF45BC53_ai;
    int auto7406F880_ae;
    int auto7406F880_ai;
    int autoEAAC2A14_ae;
    int autoEAAC2A14_ai;
    int auto6238D1D1_ae;
    int auto6238D1D1_ai;

    // Variable Declarations
    int lv_venue;
    int lv_team;
    int lv_teamMember;

    // Variable Initialization

    // Implementation
    autoBF45BC53_ae = lib1_gv_venueMaximumCount;
    autoBF45BC53_ai = 1;
    lv_venue = 1;
    for ( ; ( (autoBF45BC53_ai >= 0 && lv_venue <= autoBF45BC53_ae) || (autoBF45BC53_ai <= 0 && lv_venue >= autoBF45BC53_ae) ) ; lv_venue += autoBF45BC53_ai ) {
        lib1_gv_playerAtFinalVenue[lv_venue][lp_round] = -1;
    }
    lv_venue = 0;
    auto7406F880_ae = lib1_gv_teamCountAlive[(lp_round-1)];
    auto7406F880_ai = 1;
    lv_team = 1;
    for ( ; ( (auto7406F880_ai >= 0 && lv_team <= auto7406F880_ae) || (auto7406F880_ai <= 0 && lv_team >= auto7406F880_ae) ) ; lv_team += auto7406F880_ai ) {
        autoEAAC2A14_ae = lib1_gv_teamMemberCount;
        autoEAAC2A14_ai = 1;
        lv_teamMember = 1;
        for ( ; ( (autoEAAC2A14_ai >= 0 && lv_teamMember <= autoEAAC2A14_ae) || (autoEAAC2A14_ai <= 0 && lv_teamMember >= autoEAAC2A14_ae) ) ; lv_teamMember += autoEAAC2A14_ai ) {
            lv_venue += 1;
            lib1_gv_playerAtFinalVenue[lv_venue][lp_round] = PlayerGroupPlayer(lib1_gv_teamGroup[lib1_gv_teamAlive[lv_team]], lv_teamMember);
        }
    }
    auto6238D1D1_ae = lib1_gv_venueMaximumCount;
    auto6238D1D1_ai = 1;
    lv_venue = 1;
    for ( ; ( (auto6238D1D1_ai >= 0 && lv_venue <= auto6238D1D1_ae) || (auto6238D1D1_ai <= 0 && lv_venue >= auto6238D1D1_ae) ) ; lv_venue += auto6238D1D1_ai ) {
        lib1_gv_playerAtVenue[lv_venue][lp_round] = lib1_gv_playerAtFinalVenue[lv_venue][lp_round];
    }
}

void lib1_gf_StartLocationCameraPan () {
    int auto9E9E7339_ae;
    int auto9E9E7339_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    auto9E9E7339_ae = lib1_gv_playerCount;
    auto9E9E7339_ai = 1;
    lv_player = 1;
    for ( ; ( (auto9E9E7339_ai >= 0 && lv_player <= auto9E9E7339_ae) || (auto9E9E7339_ai <= 0 && lv_player >= auto9E9E7339_ae) ) ; lv_player += auto9E9E7339_ai ) {
        CameraPan(lib1_gf_IndexGetUserPlayer(lv_player), PlayerStartLocation(lib1_gf_IndexGetUserPlayer(lv_player)), 0.0, -1, 10.0, false);
    }
}

void lib1_gf_VenueCameraPan (int lp_round) {
    int auto46CEFA68_ae;
    int auto46CEFA68_ai;

    // Variable Declarations
    int lv_venue;

    // Variable Initialization

    // Implementation
    auto46CEFA68_ae = lib1_gv_playerCount;
    auto46CEFA68_ai = 1;
    lv_venue = 1;
    for ( ; ( (auto46CEFA68_ai >= 0 && lv_venue <= auto46CEFA68_ae) || (auto46CEFA68_ai <= 0 && lv_venue >= auto46CEFA68_ae) ) ; lv_venue += auto46CEFA68_ai ) {
        if ((lib1_gv_playerAtVenue[lv_venue][lp_round] != -1)) {
            CameraPan(lib1_gv_playerAtVenue[lv_venue][lp_round], RegionGetCenter(lib1_gv_venue[lv_venue]), 0.0, -1, 10.0, false);
        }

    }
}

void lib1_gf_KillScoreAndKillGoldAdd (int lp_player, string lp_unitType) {
    // Implementation
    PlayerModifyPropertyInt(lp_player, c_playerPropTerrazine, c_playerPropOperAdd, lib1_gf_UnitTypeGetKillGold(lp_unitType));
    lib1_gv_killScore[lp_player] += lib1_gf_UnitTypeGetKillGold(lp_unitType);
    lib1_gf_KillScoreUpdate(0);
}

void lib1_gf_KillScoreUpdate (int lp_round) {
    int auto8535A57B_ae;
    int auto8535A57B_ai;
    int autoB96E9090_ae;
    int autoB96E9090_ai;

    // Variable Declarations
    int lv_maximumScore;
    int lv_row;
    int lv_column;
    color lv_color;

    // Variable Initialization
    lv_column = 3;
    lv_color = Color(0,0,0);

    // Implementation
    auto8535A57B_ae = lib1_gv_playerCount;
    auto8535A57B_ai = 1;
    lv_row = 1;
    for ( ; ( (auto8535A57B_ai >= 0 && lv_row <= auto8535A57B_ae) || (auto8535A57B_ai <= 0 && lv_row >= auto8535A57B_ae) ) ; lv_row += auto8535A57B_ai ) {
        if ((lib1_gv_killScore[lib1_gf_IndexGetUserPlayer(lv_row)] >= lv_maximumScore)) {
            lv_maximumScore = lib1_gv_killScore[lib1_gf_IndexGetUserPlayer(lv_row)];
        }

    }
    autoB96E9090_ae = lib1_gv_playerCount;
    autoB96E9090_ai = 1;
    lv_row = 1;
    for ( ; ( (autoB96E9090_ai >= 0 && lv_row <= autoB96E9090_ae) || (autoB96E9090_ai <= 0 && lv_row >= autoB96E9090_ae) ) ; lv_row += autoB96E9090_ai ) {
        BoardItemSetText(lib1_gv_scoreBoard, lv_column, lv_row, IntToText(lib1_gv_killScore[lib1_gf_IndexGetUserPlayer(lv_row)]));
        BoardItemSetProgressValue(lib1_gv_scoreBoard, lv_column, lv_row, lib1_gv_killScore[lib1_gf_IndexGetUserPlayer(lv_row)]);
        BoardItemSetProgressRange(lib1_gv_scoreBoard, lv_column, lv_row, 0.0, lv_maximumScore);
    }
}

void lib1_gf_ScoreBoardRowColorUpdate (int lp_round) {
    int autoAD5AF806_ae;
    int autoAD5AF806_ai;

    // Variable Declarations
    int lv_row;
    color lv_color;

    // Variable Initialization
    lv_color = Color(0,0,0);

    // Implementation
    autoAD5AF806_ae = lib1_gv_playerCount;
    autoAD5AF806_ai = 1;
    lv_row = 1;
    for ( ; ( (autoAD5AF806_ai >= 0 && lv_row <= autoAD5AF806_ae) || (autoAD5AF806_ai <= 0 && lv_row >= autoAD5AF806_ae) ) ; lv_row += autoAD5AF806_ai ) {
        if ((lib1_gf_PlayerIsAlive(lib1_gf_IndexGetUserPlayer(lv_row), lp_round) == true)) {
            lv_color = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lib1_gf_IndexGetUserPlayer(lv_row), false));
        }
        else {
            lv_color = Color(0,0,0);
        }
        BoardItemSetProgressColor(lib1_gv_scoreBoard, 2, lv_row, lv_color, 1);
        BoardItemSetProgressColor(lib1_gv_scoreBoard, 3, lv_row, lv_color, 1);
    }
}

void lib1_gf_ScoreBoardSetName (int lp_round, bool lp_bonusRound) {
    // Variable Declarations
    text lv_text;

    // Variable Initialization

    // Implementation
    if ((lp_bonusRound == false)) {
        if ((lib1_gf_IsFinalRound(lp_round) == false)) {
            TextExpressionSetToken("Param/Expression/lib_1_D87F11EA", "A", IntToText(lp_round));
            lv_text = TextExpressionAssemble("Param/Expression/lib_1_D87F11EA");
        }
        else {
            lv_text = TextExpressionAssemble("Param/Expression/lib_1_BCFC7BBB");
        }
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_1_14BD110B", "A", IntToText(lp_round));
        lv_text = TextExpressionAssemble("Param/Expression/lib_1_14BD110B");
    }
    BoardSetName(lib1_gv_scoreBoard, lv_text, Color(100.00, 100.00, 100.00));
}

void lib1_gf_BuildingScoreUpdate () {
    int autoC5AF87F8_ae;
    int autoC5AF87F8_ai;
    int auto023F1332_ae;
    int auto023F1332_ai;

    // Variable Declarations
    int lv_maximumScore;
    int lv_row;
    int lv_column;

    // Variable Initialization
    lv_column = 2;

    // Implementation
    autoC5AF87F8_ae = lib1_gv_playerCount;
    autoC5AF87F8_ai = 1;
    lv_row = 1;
    for ( ; ( (autoC5AF87F8_ai >= 0 && lv_row <= autoC5AF87F8_ae) || (autoC5AF87F8_ai <= 0 && lv_row >= autoC5AF87F8_ae) ) ; lv_row += autoC5AF87F8_ai ) {
        if ((lib1_gv_buildingScore[lib1_gf_IndexGetUserPlayer(lv_row)] >= lv_maximumScore)) {
            lv_maximumScore = lib1_gv_buildingScore[lib1_gf_IndexGetUserPlayer(lv_row)];
        }

    }
    auto023F1332_ae = lib1_gv_playerCount;
    auto023F1332_ai = 1;
    lv_row = 1;
    for ( ; ( (auto023F1332_ai >= 0 && lv_row <= auto023F1332_ae) || (auto023F1332_ai <= 0 && lv_row >= auto023F1332_ae) ) ; lv_row += auto023F1332_ai ) {
        BoardItemSetText(lib1_gv_scoreBoard, lv_column, lv_row, IntToText(lib1_gv_buildingScore[lib1_gf_IndexGetUserPlayer(lv_row)]));
        BoardItemSetProgressValue(lib1_gv_scoreBoard, lv_column, lv_row, lib1_gv_buildingScore[lib1_gf_IndexGetUserPlayer(lv_row)]);
        BoardItemSetProgressRange(lib1_gv_scoreBoard, lv_column, lv_row, 0.0, lv_maximumScore);
    }
}

void lib1_gf_DebugEnable (bool lp_option) {
    // Variable Declarations
    int lv_player;
    int lv_team;

    // Variable Initialization

    // Implementation
    TriggerEnable(lib1_gt_DebugControlPressed, lp_option);
    TriggerEnable(lib1_gt_DebugKeyPressed, lp_option);
    TriggerEnable(lib1_gt_DebugUnitRemove, lp_option);
}

int lib1_gf_PlayerGetTeam (int lp_player) {
    int auto2A353E29_ae;
    int auto2A353E29_ai;

    // Variable Declarations
    int lv_team;
    int lv_teamReturn;

    // Variable Initialization

    // Implementation
    auto2A353E29_ae = lib1_gv_teamCount;
    auto2A353E29_ai = 1;
    lv_team = 1;
    for ( ; ( (auto2A353E29_ai >= 0 && lv_team <= auto2A353E29_ae) || (auto2A353E29_ai <= 0 && lv_team >= auto2A353E29_ae) ) ; lv_team += auto2A353E29_ai ) {
        if ((PlayerGroupHasPlayer(lib1_gv_teamGroup[lv_team], lp_player) == true)) {
            lv_teamReturn = lv_team;
            break;
        }

    }
    return lv_teamReturn;
}

void lib1_gf_ModInizialization (bool lp_debug, bool lp_virtualTeam) {
    bool auto7DC92087_val;

    // Implementation
    TriggerEnable(libGAw3_gt_ChangeOwerFromCreep, false);
    TriggerEnable(libGAw3_gt_ChangeOwerToCreep, false);
    UISetResourceTradingAllowed(c_resourceTypeMinerals, false);
    UISetResourceTradingAllowed(c_resourceTypeVespene, false);
    UISetResourceTradingAllowed(c_resourceTypeTerrazine, false);
    UISetResourceTradingAllowed(c_resourceTypeCustom, false);
    TriggerExecute(lib1_gt_GameAttributeInizialization, true, false);
    if ((lp_debug == true)) {
        lib1_gf_DebugEnable(true);
    }
    else {
        lib1_gf_DebugEnable(false);
    }
    lib1_gf_TeamMemberSetAndTeamMemberCountSet(lp_virtualTeam);
    lib1_gf_PlayerCountTest();
    auto7DC92087_val = lib1_gv_testPassed;
    if (auto7DC92087_val == false) {
        lib1_gf_GameOverTestNotPassed();
    }
    else if (auto7DC92087_val == true) {
        TriggerExecute(lib1_gt_AllianceInizialization, true, false);
        lib1_gf_PlayerAtVenueSet(lp_debug);
        TriggerExecute(lib1_gt_ScoreBoardInizialization, true, false);
        TriggerExecute(lib1_gt_TimerInizialization, true, false);
        TriggerExecute(lib1_gt_PlayerInizialization, true, false);
        lib1_gf_PlayerAtBuildingRegionSet();
        lib1_gf_PhalanxPlaceholderPositionAll();
        lib1_gf_CreepUnitTypeSetAll();
        lib1_gf_ValidRegionFillHidden();
    }
    else {
    }
}

void lib1_gf_RoundStartLoop (bool lp_debug) {
    int auto6F7FF55B_ae;
    int auto6F7FF55B_ai;

    // Variable Declarations
    int lv_round;

    // Variable Initialization

    // Implementation
    if ((lib1_gv_testPassed == true)) {
        auto6F7FF55B_ae = lib1_gv_roundCount;
        auto6F7FF55B_ai = 1;
        lv_round = 1;
        for ( ; ( (auto6F7FF55B_ai >= 0 && lv_round <= auto6F7FF55B_ae) || (auto6F7FF55B_ai <= 0 && lv_round >= auto6F7FF55B_ae) ) ; lv_round += auto6F7FF55B_ai ) {
            if ((lp_debug == true)) {
                lv_round = 1;
            }

            lib1_gf_VenueInitialReplace();
            lib1_gf_RoundStart(lv_round, false, lp_debug);
            if ((lib1_gv_bonusRoundIsOn[lv_round] == true)) {
                lib1_gf_BonusVenueReplace();
                lib1_gf_RoundStart(lv_round, true, lp_debug);
            }

        }
    }

}

void lib1_gf_RoundStart (int lp_round, bool lp_bonusRound, bool lp_debug) {
    // Implementation
    lib1_gv_round = lp_round;
    lib1_gf_BattlefieldReset();
    lib1_gf_BattlefieldRevealerEnable(false);
    lib1_gf_ScoreBoardSetName(lp_round, lp_bonusRound);
    if ((lp_round > (lib1_gv_roundCount-lib1_gv_finalRoundCount+1))) {
        lib1_gf_PlayerAtFinalVenueSet(lp_round);
    }
    else {
        lib1_gf_GoldAdd(lp_round);
        lib1_gf_BuildingRegionRevealerEnable(true, lp_debug);
        lib1_gf_PreviewEnable(true);
        lib1_gf_StartLocationCameraPan();
        lib1_gf_TimerSet((30.0+lp_round*5), lp_debug);
        lib1_gf_AIBuildingPosition();
        lib1_gf_BuildingRegionRevealerEnable(false, lp_debug);
        lib1_gf_PreviewEnable(false);
        lib1_gf_UnitTypeSetAll();
    }
    lib1_gf_VenueRevealerEnable(lp_round, true);
    lib1_gf_PhalanxCounterEnable(true, true);
    lib1_gf_VenueCameraPan(lp_round);
    lib1_gf_TimerSet((30.0), lp_debug);
    lib1_gf_AIPhalanxAndPortalPositionAll(lp_round);
    lib1_gf_PhalanxCounterEnable(false, false);
    lib1_gf_AIPhalanxBuffSetAll(lp_round);
    lib1_gf_VenueRevealerEnable(lp_round, false);
    lib1_gf_UnitPositionAll();
    if ((lp_bonusRound == true)) {
        lib1_gf_CreepPosition(lp_round);
    }

    lib1_gf_BattlefieldRevealerEnable(true);
    lib1_gf_PreviewerAtBuildingRegionPositionAll();
    lib1_gf_PreviewUpdateAll();
    lib1_gf_ReserveUnitCreationEnable(true);
    lib1_gf_CountUnitEnable(true);
    TriggerWaitForTrigger(lib1_gt_CountUnitControl, false);
    lib1_gf_ReserveUnitCreationEnable(false);
    Wait(2.0, c_timeGame);
}

void lib1_gf_TeamMemberSetAndTeamMemberCountSet (bool lp_virtualTeam) {
    int autoA8AE8B2B_ae;
    int autoA8AE8B2B_ai;
    int auto2891898C_ae;
    int auto2891898C_ai;
    string autoEFD468EB_val;
    int auto3EF77B1F_ae;
    int auto3EF77B1F_ai;
    int auto77151E02_ae;
    int auto77151E02_ai;

    // Variable Declarations
    int lv_player;
    int lv_team;
    int lv_teamMember;

    // Variable Initialization

    // Implementation
    if ((lp_virtualTeam == false)) {
        autoA8AE8B2B_ae = lib1_gv_teamCount;
        autoA8AE8B2B_ai = 1;
        lv_team = 1;
        for ( ; ( (autoA8AE8B2B_ai >= 0 && lv_team <= autoA8AE8B2B_ae) || (autoA8AE8B2B_ai <= 0 && lv_team >= autoA8AE8B2B_ae) ) ; lv_team += autoA8AE8B2B_ai ) {
            auto2891898C_ae = lib1_gv_teamMemberCount;
            auto2891898C_ai = 1;
            lv_teamMember = 1;
            for ( ; ( (auto2891898C_ai >= 0 && lv_teamMember <= auto2891898C_ae) || (auto2891898C_ai <= 0 && lv_teamMember >= auto2891898C_ae) ) ; lv_teamMember += auto2891898C_ai ) {
                if ((PlayerGroupCount(GameAttributePlayersForTeam(lv_team)) == lib1_gv_teamMemberCount)) {
                    PlayerGroupAdd(lib1_gv_teamGroup[lv_team], PlayerGroupPlayer(GameAttributePlayersForTeam(lv_team), lv_teamMember));
                    PlayerGroupAdd(lib1_gv_mirrorTeamGroup[lv_team], lib1_gf_UserPlayerGetMirrorPlayer(PlayerGroupPlayer(GameAttributePlayersForTeam(lv_team), lv_teamMember)));
                }
                else {
                    lib1_gv_testPassed = false;
                }
            }
        }
    }
    else {
        autoEFD468EB_val = GameAttributeGameValue("2");
        if (autoEFD468EB_val == "0001") {
            auto3EF77B1F_ae = lib1_gv_playerCount;
            auto3EF77B1F_ai = 1;
            lv_player = 1;
            for ( ; ( (auto3EF77B1F_ai >= 0 && lv_player <= auto3EF77B1F_ae) || (auto3EF77B1F_ai <= 0 && lv_player >= auto3EF77B1F_ae) ) ; lv_player += auto3EF77B1F_ai ) {
                lv_team += 1;
                PlayerGroupAdd(lib1_gv_teamGroup[lv_team], lib1_gf_IndexGetUserPlayer(lv_player));
                PlayerGroupAdd(lib1_gv_mirrorTeamGroup[lv_team], lib1_gf_UserPlayerGetMirrorPlayer(lib1_gf_IndexGetUserPlayer(lv_player)));
            }
        }
        else if (autoEFD468EB_val == "0002") {
            auto77151E02_ae = lib1_gv_playerCount;
            auto77151E02_ai = 1;
            lv_player = 1;
            for ( ; ( (auto77151E02_ai >= 0 && lv_player <= auto77151E02_ae) || (auto77151E02_ai <= 0 && lv_player >= auto77151E02_ae) ) ; lv_player += auto77151E02_ai ) {
                if ((ModI(lv_player, 2) == 1)) {
                    lv_team += 1;
                }

                PlayerGroupAdd(lib1_gv_teamGroup[lv_team], lib1_gf_IndexGetUserPlayer(lv_player));
                PlayerGroupAdd(lib1_gv_mirrorTeamGroup[lv_team], lib1_gf_UserPlayerGetMirrorPlayer(lib1_gf_IndexGetUserPlayer(lv_player)));
            }
        }
        else {
        }
    }
}

void lib1_gf_TeamRoundRandomize () {
    int auto95DF0743_ae;
    int auto95DF0743_ai;
    int auto612D4F07_ae;
    int auto612D4F07_ai;
    int auto8FDB08A9_ae;
    int auto8FDB08A9_ai;

    // Variable Declarations
    int lv_r1;
    int lv_r2;
    bool lv_repeated;
    int[lib1_gv_teamRoundMaximumCount + 1] lv_roundRandomized;

    // Variable Initialization

    // Implementation
    auto95DF0743_ae = lib1_gv_teamRoundCount;
    auto95DF0743_ai = 1;
    lv_r1 = 1;
    for ( ; ( (auto95DF0743_ai >= 0 && lv_r1 <= auto95DF0743_ae) || (auto95DF0743_ai <= 0 && lv_r1 >= auto95DF0743_ae) ) ; lv_r1 += auto95DF0743_ai ) {
        lib1_gv_teamRoundRandomized[lv_r1] = 0;
    }
    auto612D4F07_ae = lib1_gv_teamRoundCount;
    auto612D4F07_ai = 1;
    lv_r1 = 1;
    for ( ; ( (auto612D4F07_ai >= 0 && lv_r1 <= auto612D4F07_ae) || (auto612D4F07_ai <= 0 && lv_r1 >= auto612D4F07_ae) ) ; lv_r1 += auto612D4F07_ai ) {
        while (true) {
            lv_roundRandomized[lv_r1] = RandomInt(1, lib1_gv_teamRoundCount);
            lv_repeated = false;
            auto8FDB08A9_ae = lib1_gv_teamRoundCount;
            auto8FDB08A9_ai = 1;
            lv_r2 = 1;
            for ( ; ( (auto8FDB08A9_ai >= 0 && lv_r2 <= auto8FDB08A9_ae) || (auto8FDB08A9_ai <= 0 && lv_r2 >= auto8FDB08A9_ae) ) ; lv_r2 += auto8FDB08A9_ai ) {
                if ((lv_roundRandomized[lv_r1] == lib1_gv_teamRoundRandomized[lv_r2])) {
                    lv_repeated = true;
                }

            }
            if ((lv_repeated == false)) {
                lib1_gv_teamRoundRandomized[lv_r1] = lv_roundRandomized[lv_r1];
                break;
            }

        }
    }
    TextExpressionSetToken("Param/Expression/lib_1_F3A84076", "A", IntToText(1));
    TextExpressionSetToken("Param/Expression/lib_1_F3A84076", "B", IntToText(lv_roundRandomized[1]));
    TextExpressionSetToken("Param/Expression/lib_1_F3A84076", "C", IntToText(2));
    TextExpressionSetToken("Param/Expression/lib_1_F3A84076", "D", IntToText(lv_roundRandomized[2]));
    TextExpressionSetToken("Param/Expression/lib_1_F3A84076", "E", IntToText(3));
    TextExpressionSetToken("Param/Expression/lib_1_F3A84076", "F", IntToText(lv_roundRandomized[3]));
    TextExpressionSetToken("Param/Expression/lib_1_F3A84076", "G", IntToText(4));
    TextExpressionSetToken("Param/Expression/lib_1_F3A84076", "H", IntToText(lv_roundRandomized[4]));
    TextExpressionSetToken("Param/Expression/lib_1_F3A84076", "I", IntToText(5));
    TextExpressionSetToken("Param/Expression/lib_1_F3A84076", "J", IntToText(lv_roundRandomized[5]));
    TextExpressionSetToken("Param/Expression/lib_1_F3A84076", "K", IntToText(6));
    TextExpressionSetToken("Param/Expression/lib_1_F3A84076", "L", IntToText(lv_roundRandomized[6]));
    TextExpressionSetToken("Param/Expression/lib_1_F3A84076", "M", IntToText(7));
    TextExpressionSetToken("Param/Expression/lib_1_F3A84076", "N", IntToText(lv_roundRandomized[7]));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_F3A84076"), true);
}

void lib1_gf_VenueGroupRandomize () {
    int auto9D844ECE_ae;
    int auto9D844ECE_ai;
    int auto58B08889_ae;
    int auto58B08889_ai;
    int auto16E2654E_ae;
    int auto16E2654E_ai;
    int auto409EB33D_ae;
    int auto409EB33D_ai;
    int autoE207310C_ae;
    int autoE207310C_ai;

    // Variable Declarations
    int lv_g1;
    int lv_g2;
    bool lv_repeated;
    int[lib1_gv_venueGroupMaximumCount + 1] lv_venueGroupRandomized;
    int lv_round;

    // Variable Initialization

    // Implementation
    auto9D844ECE_ae = lib1_gv_teamRoundCount;
    auto9D844ECE_ai = 1;
    lv_round = 1;
    for ( ; ( (auto9D844ECE_ai >= 0 && lv_round <= auto9D844ECE_ae) || (auto9D844ECE_ai <= 0 && lv_round >= auto9D844ECE_ae) ) ; lv_round += auto9D844ECE_ai ) {
        auto58B08889_ae = (lib1_gv_teamCount/2);
        auto58B08889_ai = 1;
        lv_g1 = 1;
        for ( ; ( (auto58B08889_ai >= 0 && lv_g1 <= auto58B08889_ae) || (auto58B08889_ai <= 0 && lv_g1 >= auto58B08889_ae) ) ; lv_g1 += auto58B08889_ai ) {
            lib1_gv_venueGroupRandomized[lv_g1][lv_round] = 0;
        }
    }
    auto16E2654E_ae = lib1_gv_teamRoundCount;
    auto16E2654E_ai = 1;
    lv_round = 1;
    for ( ; ( (auto16E2654E_ai >= 0 && lv_round <= auto16E2654E_ae) || (auto16E2654E_ai <= 0 && lv_round >= auto16E2654E_ae) ) ; lv_round += auto16E2654E_ai ) {
        auto409EB33D_ae = (lib1_gv_teamCount/2);
        auto409EB33D_ai = 1;
        lv_g1 = 1;
        for ( ; ( (auto409EB33D_ai >= 0 && lv_g1 <= auto409EB33D_ae) || (auto409EB33D_ai <= 0 && lv_g1 >= auto409EB33D_ae) ) ; lv_g1 += auto409EB33D_ai ) {
            while (true) {
                lv_venueGroupRandomized[lv_g1] = RandomInt(1, (lib1_gv_teamCount/2));
                lv_repeated = false;
                autoE207310C_ae = lib1_gv_venueGroupMaximumCount;
                autoE207310C_ai = 1;
                lv_g2 = 1;
                for ( ; ( (autoE207310C_ai >= 0 && lv_g2 <= autoE207310C_ae) || (autoE207310C_ai <= 0 && lv_g2 >= autoE207310C_ae) ) ; lv_g2 += autoE207310C_ai ) {
                    if ((lv_venueGroupRandomized[lv_g1] == lib1_gv_venueGroupRandomized[lv_g2][lv_round])) {
                        lv_repeated = true;
                    }

                }
                if ((lv_repeated == false)) {
                    lib1_gv_venueGroupRandomized[lv_g1][lv_round] = lv_venueGroupRandomized[lv_g1];
                    break;
                }

            }
        }
    }
    TextExpressionSetToken("Param/Expression/lib_1_5D741B7E", "A", IntToText(1));
    TextExpressionSetToken("Param/Expression/lib_1_5D741B7E", "B", IntToText(lib1_gv_venueGroupRandomized[1][1]));
    TextExpressionSetToken("Param/Expression/lib_1_5D741B7E", "C", IntToText(2));
    TextExpressionSetToken("Param/Expression/lib_1_5D741B7E", "D", IntToText(lib1_gv_venueGroupRandomized[2][1]));
    TextExpressionSetToken("Param/Expression/lib_1_5D741B7E", "E", IntToText(3));
    TextExpressionSetToken("Param/Expression/lib_1_5D741B7E", "F", IntToText(lib1_gv_venueGroupRandomized[3][1]));
    TextExpressionSetToken("Param/Expression/lib_1_5D741B7E", "G", IntToText(4));
    TextExpressionSetToken("Param/Expression/lib_1_5D741B7E", "H", IntToText(lib1_gv_venueGroupRandomized[4][1]));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_5D741B7E"), true);
}

void lib1_gf_TeamAtVenueSet (bool lp_debug) {
    int auto7BAE34A8_ae;
    int auto7BAE34A8_ai;
    int auto0DD437C8_ae;
    int auto0DD437C8_ai;
    int auto6CB868D8_ae;
    int auto6CB868D8_ai;
    int autoA511D45B_ae;
    int autoA511D45B_ai;
    int auto59DD60BD_ae;
    int auto59DD60BD_ai;

    // Variable Declarations
    int lv_team;
    int lv_teamMember;
    int lv_round;
    int lv_venueGroup;
    int lv_cycle;
    int[lib1_gv_venueMaximumCount + 1] lv_teamCompetitor;

    // Variable Initialization
    lv_cycle = 1;

    // Implementation
    lib1_gf_TeamRoundRandomize();
    lib1_gf_VenueGroupRandomize();
    auto7BAE34A8_ae = lib1_gv_teamRoundCount;
    auto7BAE34A8_ai = 1;
    lv_round = 1;
    for ( ; ( (auto7BAE34A8_ai >= 0 && lv_round <= auto7BAE34A8_ae) || (auto7BAE34A8_ai <= 0 && lv_round >= auto7BAE34A8_ae) ) ; lv_round += auto7BAE34A8_ai ) {
        auto0DD437C8_ae = (lib1_gv_teamCount/2);
        auto0DD437C8_ai = 1;
        lv_team = 1;
        for ( ; ( (auto0DD437C8_ai >= 0 && lv_team <= auto0DD437C8_ae) || (auto0DD437C8_ai <= 0 && lv_team >= auto0DD437C8_ae) ) ; lv_team += auto0DD437C8_ai ) {
            if ((lv_team == 1)) {
                lv_teamCompetitor[lv_team] = 1;
            }
            else {
                if (lv_cycle >= lib1_gv_teamCount) {
                    lv_cycle = 2;
                }
                else {
                    lv_cycle = lv_cycle + 1;
                }
                lv_teamCompetitor[lv_team] = lv_cycle;
            }
        }
        auto6CB868D8_ae = (lib1_gv_teamCount/2+1);
        auto6CB868D8_ai = -1;
        lv_team = lib1_gv_teamCount;
        for ( ; ( (auto6CB868D8_ai >= 0 && lv_team <= auto6CB868D8_ae) || (auto6CB868D8_ai <= 0 && lv_team >= auto6CB868D8_ae) ) ; lv_team += auto6CB868D8_ai ) {
            if (lv_cycle >= lib1_gv_teamCount) {
                lv_cycle = 2;
            }
            else {
                lv_cycle = lv_cycle + 1;
            }
            lv_teamCompetitor[lv_team] = lv_cycle;
        }
        lv_venueGroup = 0;
        autoA511D45B_ae = lib1_gv_teamCount;
        autoA511D45B_ai = 1;
        lv_team = 1;
        for ( ; ( (autoA511D45B_ai >= 0 && lv_team <= autoA511D45B_ae) || (autoA511D45B_ai <= 0 && lv_team >= autoA511D45B_ae) ) ; lv_team += autoA511D45B_ai ) {
            if ((ModI(lv_team, 2) == 1)) {
                lv_venueGroup += 1;
                if ((lp_debug == false)) {
                    lib1_gv_teamAtVenue[lv_team][lib1_gv_teamRoundRandomized[lv_round]] = lv_teamCompetitor[lib1_gv_venueGroupRandomized[lv_venueGroup][lv_round]];
                }
                else {
                    lib1_gv_teamAtVenue[lv_team][lv_round] = lv_teamCompetitor[lv_venueGroup];
                }
            }
            else {
                if ((lp_debug == false)) {
                    lib1_gv_teamAtVenue[lv_team][lib1_gv_teamRoundRandomized[lv_round]] = lv_teamCompetitor[(lib1_gv_venueGroupRandomized[lv_venueGroup][lv_round]+lib1_gv_teamCount/2)];
                }
                else {
                    lib1_gv_teamAtVenue[lv_team][lv_round] = lv_teamCompetitor[(lv_venueGroup+lib1_gv_teamCount/2)];
                }
            }
        }
        lv_cycle -= 1;
    }
    auto59DD60BD_ae = lib1_gv_teamRoundCount;
    auto59DD60BD_ai = 1;
    lv_round = 1;
    for ( ; ( (auto59DD60BD_ai >= 0 && lv_round <= auto59DD60BD_ae) || (auto59DD60BD_ai <= 0 && lv_round >= auto59DD60BD_ae) ) ; lv_round += auto59DD60BD_ai ) {
        TextExpressionSetToken("Param/Expression/lib_1_A3EE931C", "A", IntToText(lib1_gv_teamAtVenue[1][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_A3EE931C", "B", IntToText(lib1_gv_teamAtVenue[2][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_A3EE931C", "C", IntToText(lib1_gv_teamAtVenue[3][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_A3EE931C", "D", IntToText(lib1_gv_teamAtVenue[4][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_A3EE931C", "E", IntToText(lib1_gv_teamAtVenue[5][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_A3EE931C", "F", IntToText(lib1_gv_teamAtVenue[6][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_A3EE931C", "G", IntToText(lib1_gv_teamAtVenue[7][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_A3EE931C", "H", IntToText(lib1_gv_teamAtVenue[8][lv_round]));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_A3EE931C"), true);
    }
}

void lib1_gf_PlayerAtVenueSet (bool lp_debug) {
    int autoA7A010D1_ae;
    int autoA7A010D1_ai;
    int auto615A030B_ae;
    int auto615A030B_ai;
    int autoD77992EA_ae;
    int autoD77992EA_ai;
    int auto17A42559_ae;
    int auto17A42559_ai;

    // Variable Declarations
    int lv_creepTeam;
    int lv_team;
    int lv_teamMember;
    int lv_round;
    int lv_teamRound;
    int lv_venue;

    // Variable Initialization

    // Implementation
    lv_creepTeam = RandomInt(1, (lib1_gv_teamCount-1));
    autoA7A010D1_ae = lib1_gv_roundCount;
    autoA7A010D1_ai = 1;
    lv_round = 1;
    for ( ; ( (autoA7A010D1_ai >= 0 && lv_round <= autoA7A010D1_ae) || (autoA7A010D1_ai <= 0 && lv_round >= autoA7A010D1_ae) ) ; lv_round += autoA7A010D1_ai ) {
        if (lv_teamRound >= lib1_gv_teamRoundCount) {
            lv_teamRound = 1;
        }
        else {
            lv_teamRound = lv_teamRound + 1;
        }
        if ((lv_teamRound == 1)) {
            lib1_gf_TeamAtVenueSet(lp_debug);
        }

        auto615A030B_ae = lib1_gv_teamCount;
        auto615A030B_ai = 1;
        lv_team = 1;
        for ( ; ( (auto615A030B_ai >= 0 && lv_team <= auto615A030B_ae) || (auto615A030B_ai <= 0 && lv_team >= auto615A030B_ae) ) ; lv_team += auto615A030B_ai ) {
            if (lv_creepTeam >= lib1_gv_teamCount) {
                lv_creepTeam = 1;
            }
            else {
                lv_creepTeam = lv_creepTeam + 1;
            }
            autoD77992EA_ae = lib1_gv_teamMemberCount;
            autoD77992EA_ai = 1;
            lv_teamMember = 1;
            for ( ; ( (autoD77992EA_ai >= 0 && lv_teamMember <= autoD77992EA_ae) || (autoD77992EA_ai <= 0 && lv_teamMember >= autoD77992EA_ae) ) ; lv_teamMember += autoD77992EA_ai ) {
                if (lv_venue >= lib1_gv_venueMaximumCount) {
                    lv_venue = 1;
                }
                else {
                    lv_venue = lv_venue + 1;
                }
                lib1_gv_playerAtVenue[lv_venue][lv_round] = PlayerGroupPlayer(lib1_gv_teamGroup[lib1_gv_teamAtVenue[lv_team][lv_teamRound]], lv_teamMember);
                lib1_gv_creepPlayerAtVenue[lv_venue][lv_round] = PlayerGroupPlayer(lib1_gv_teamGroup[lib1_gv_teamAtVenue[lv_creepTeam][lv_teamRound]], lv_teamMember);
            }
        }
    }
    auto17A42559_ae = lib1_gv_roundCount;
    auto17A42559_ai = 1;
    lv_round = 1;
    for ( ; ( (auto17A42559_ai >= 0 && lv_round <= auto17A42559_ae) || (auto17A42559_ai <= 0 && lv_round >= auto17A42559_ae) ) ; lv_round += auto17A42559_ai ) {
        TextExpressionSetToken("Param/Expression/lib_1_9952560A", "A", IntToText(lib1_gv_playerAtVenue[1][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_9952560A", "B", IntToText(lib1_gv_playerAtVenue[2][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_9952560A", "C", IntToText(lib1_gv_playerAtVenue[3][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_9952560A", "D", IntToText(lib1_gv_playerAtVenue[4][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_9952560A", "E", IntToText(lib1_gv_playerAtVenue[5][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_9952560A", "F", IntToText(lib1_gv_playerAtVenue[6][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_9952560A", "G", IntToText(lib1_gv_playerAtVenue[7][lv_round]));
        TextExpressionSetToken("Param/Expression/lib_1_9952560A", "H", IntToText(lib1_gv_playerAtVenue[8][lv_round]));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_9952560A"), true);
        if ((lib1_gv_bonusRoundIsOn[lv_round] == true)) {
            TextExpressionSetToken("Param/Expression/lib_1_5B5B8C5A", "A", IntToText(lib1_gv_creepPlayerAtVenue[1][lv_round]));
            TextExpressionSetToken("Param/Expression/lib_1_5B5B8C5A", "B", IntToText(lib1_gv_creepPlayerAtVenue[2][lv_round]));
            TextExpressionSetToken("Param/Expression/lib_1_5B5B8C5A", "C", IntToText(lib1_gv_creepPlayerAtVenue[3][lv_round]));
            TextExpressionSetToken("Param/Expression/lib_1_5B5B8C5A", "D", IntToText(lib1_gv_creepPlayerAtVenue[4][lv_round]));
            TextExpressionSetToken("Param/Expression/lib_1_5B5B8C5A", "E", IntToText(lib1_gv_creepPlayerAtVenue[5][lv_round]));
            TextExpressionSetToken("Param/Expression/lib_1_5B5B8C5A", "F", IntToText(lib1_gv_creepPlayerAtVenue[6][lv_round]));
            TextExpressionSetToken("Param/Expression/lib_1_5B5B8C5A", "G", IntToText(lib1_gv_creepPlayerAtVenue[7][lv_round]));
            TextExpressionSetToken("Param/Expression/lib_1_5B5B8C5A", "H", IntToText(lib1_gv_creepPlayerAtVenue[8][lv_round]));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_5B5B8C5A"), true);
        }

    }
}

void lib1_gf_PlayerCountTest () {
    int autoEC05AADA_ae;
    int autoEC05AADA_ai;

    // Variable Declarations
    int lv_player;
    int lv_playerCount;

    // Variable Initialization

    // Implementation
    autoEC05AADA_ae = lib1_gv_playerCount;
    autoEC05AADA_ai = 1;
    lv_player = 1;
    for ( ; ( (autoEC05AADA_ai >= 0 && lv_player <= autoEC05AADA_ae) || (autoEC05AADA_ai <= 0 && lv_player >= autoEC05AADA_ae) ) ; lv_player += autoEC05AADA_ai ) {
        if (((PlayerType(lib1_gf_IndexGetUserPlayer(lv_player)) == c_playerTypeUser) || (PlayerType(lib1_gf_IndexGetUserPlayer(lv_player)) == c_playerTypeComputer))) {
            lv_playerCount += 1;
        }

    }
    if ((lv_playerCount != lib1_gv_playerCount)) {
        lib1_gv_testPassed = false;
    }

}

void lib1_gf_GameOverTestNotPassed () {
    int autoE465EE79_ae;
    int autoE465EE79_ai;

    // Variable Declarations
    int lv_player;
    int lv_time;

    // Variable Initialization
    lv_time = 10;

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_1_262B7A1B", "A", IntToText(lib1_gv_playerCount));
    TextExpressionSetToken("Param/Expression/lib_1_262B7A1B", "B", IntToText(lib1_gv_teamMemberCount));
    TextExpressionSetToken("Param/Expression/lib_1_262B7A1B", "C", IntToText(lv_time));
    UIDisplayMessage(lib1_gv_uIPlayergroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_262B7A1B"));
    Wait(lv_time, c_timeGame);
    autoE465EE79_ae = lib1_gv_playerCount;
    autoE465EE79_ai = 1;
    lv_player = 1;
    for ( ; ( (autoE465EE79_ai >= 0 && lv_player <= autoE465EE79_ae) || (autoE465EE79_ai <= 0 && lv_player >= autoE465EE79_ae) ) ; lv_player += autoE465EE79_ai ) {
        GameOver(lib1_gf_IndexGetUserPlayer(lv_player), c_gameOverTie, true, true);
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: UnitChangeOwner2
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UnitChangeOwner2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_ReserveUnitCreation2(EventUnitOwnerOld(), FixedToInt(UnitGetCustomValue(EventUnit(), lib1_gv_customValuePhalanx)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UnitChangeOwner2_Init () {
    lib1_gt_UnitChangeOwner2 = TriggerCreate("lib1_gt_UnitChangeOwner2_Func");
    TriggerEnable(lib1_gt_UnitChangeOwner2, false);
    TriggerAddEventUnitChangeOwner(lib1_gt_UnitChangeOwner2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitDied2
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UnitDied2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_ReserveUnitCreation2(EventPlayer(), FixedToInt(UnitGetCustomValue(EventUnit(), lib1_gv_customValuePhalanx)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UnitDied2_Init () {
    lib1_gt_UnitDied2 = TriggerCreate("lib1_gt_UnitDied2_Func");
    TriggerEnable(lib1_gt_UnitDied2, false);
    TriggerAddEventUnitDied(lib1_gt_UnitDied2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlayerLeft
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PlayerLeft_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(lib1_gv_aIGroup, EventPlayer());
    TextExpressionSetToken("Param/Expression/lib_1_823AC4A3", "A", TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
    UIDisplayMessage(lib1_gv_uIPlayergroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_823AC4A3"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_PlayerLeft_Init () {
    lib1_gt_PlayerLeft = TriggerCreate("lib1_gt_PlayerLeft_Func");
    TriggerAddEventPlayerLeft(lib1_gt_PlayerLeft, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BuildingCreated
//--------------------------------------------------------------------------------------------------
bool lib1_gt_BuildingCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_abil;
    unit lv_unit;

    // Variable Initialization
    lv_abil = EventUnitCreatedAbil();
    lv_unit = EventUnitCreatedUnit();

    // Conditions
    if (testConds) {
        if (!((AbilityClass(lv_abil) == c_classIdCAbilBuild))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetFacing(lv_unit, 270.0, 0.0);
    Wait(lib1_gv_minimumPeriod, c_timeGame);
    lib1_gf_UnitTypeSet(lib1_gf_PointInBuildingRegionGetBuildingRegion(UnitGetPosition(lv_unit)), lib1_gf_PointInBuildingRegionGetPhalanx(UnitGetPosition(lv_unit)));
    lib1_gf_PreviewUpdate(lib1_gv_playerAtBuildingRegion[lib1_gf_PointInBuildingRegionGetBuildingRegion(UnitGetPosition(lv_unit))], lib1_gf_PointInBuildingRegionGetPhalanx(UnitGetPosition(lv_unit)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_BuildingCreated_Init () {
    lib1_gt_BuildingCreated = TriggerCreate("lib1_gt_BuildingCreated_Func");
    TriggerEnable(lib1_gt_BuildingCreated, false);
    TriggerAddEventUnitCreated(lib1_gt_BuildingCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitAbilityMorph
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UnitAbilityMorph_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_abil;
    unit lv_unit;

    // Variable Initialization
    lv_abil = AbilityCommandGetAbility(EventUnitAbility());
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(lib1_gv_minimumPeriod, c_timeGame);
    lib1_gf_UnitTypeSet(lib1_gf_PointInBuildingRegionGetBuildingRegion(UnitGetPosition(lv_unit)), lib1_gf_PointInBuildingRegionGetPhalanx(UnitGetPosition(lv_unit)));
    lib1_gf_PreviewUpdate(lib1_gv_playerAtBuildingRegion[lib1_gf_PointInBuildingRegionGetBuildingRegion(UnitGetPosition(lv_unit))], lib1_gf_PointInBuildingRegionGetPhalanx(UnitGetPosition(lv_unit)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UnitAbilityMorph_Init () {
    lib1_gt_UnitAbilityMorph = TriggerCreate("lib1_gt_UnitAbilityMorph_Func");
    TriggerEnable(lib1_gt_UnitAbilityMorph, false);
    TriggerAddEventUnitAbility(lib1_gt_UnitAbilityMorph, null, null, c_abilMorphStageAbilsEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PhalanxCreated
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PhalanxCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_behavior;
    string lv_ability;
    int lv_player;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(EventUnitCreatedUnit()) == true) && (UnitFilterMatch(EventUnitCreatedUnit(), lv_player, lib1_gv_phalanxFilter) == true)) {
        lib1_gv_phalanxIndex[lv_player] += 1;
        UnitSetCustomValue(EventUnitCreatedUnit(), lib1_gv_customValuePhalanx, lib1_gv_phalanxIndex[lv_player]);
        UnitSetFacing(EventUnitCreatedUnit(), lib1_gf_PointGetVenueFacing(UnitGetPosition(EventUnitCreatedUnit())), 0.0);
        lib1_gv_previewer[lv_player][lib1_gv_phalanxIndex[lv_player]] = EventUnitCreatedUnit();
        lib1_gf_PreviewUpdate(lv_player, lib1_gv_phalanxIndex[lv_player]);
        lib1_gv_phalanx[lv_player][lib1_gv_phalanxIndex[lv_player]] = EventUnitCreatedUnit();
        lib1_gf_PhalanxBuffSet(EventUnitCreatedUnit(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_PhalanxCreated_Init () {
    lib1_gt_PhalanxCreated = TriggerCreate("lib1_gt_PhalanxCreated_Func");
    TriggerEnable(lib1_gt_PhalanxCreated, false);
    TriggerAddEventUnitCreated(lib1_gt_PhalanxCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PortalCreated
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PortalCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(EventUnitCreatedUnit()) == true) && (UnitFilterMatch(EventUnitCreatedUnit(), lv_player, lib1_gv_portalFilter) == true)) {
        libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), libNtve_gf_SetTintColor(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false)), 1.0, 0.0));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_PortalCreated_Init () {
    lib1_gt_PortalCreated = TriggerCreate("lib1_gt_PortalCreated_Func");
    TriggerEnable(lib1_gt_PortalCreated, false);
    TriggerAddEventUnitCreated(lib1_gt_PortalCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PhalanxBuffChange
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PhalanxBuffChange_Func (bool testConds, bool runActions) {
    int autoEA94B1EE_val;

    // Variable Declarations
    int lv_player;
    int lv_phalanx;
    int lv_change;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());
    lv_phalanx = FixedToInt(UnitGetCustomValue(EventUnit(), lib1_gv_customValuePhalanx));
    lv_change = EventUnitBehaviorChange();

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), lv_player, lib1_gv_phalanxFilter) == true))) {
            return false;
        }

        if (!((lib1_gf_BehaviorIsPhalanxBuff(EventUnitBehavior()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoEA94B1EE_val = lv_change;
    if (autoEA94B1EE_val == c_unitBehaviorChangeActivate) {
        lib1_gv_phalanxBuff[lv_player][lv_phalanx] = EventUnitBehavior();
    }
    else if (autoEA94B1EE_val == c_unitBehaviorChangeDeactivate) {
        lib1_gv_phalanxBuff[lv_player][lv_phalanx] = null;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_PhalanxBuffChange_Init () {
    lib1_gt_PhalanxBuffChange = TriggerCreate("lib1_gt_PhalanxBuffChange_Func");
    TriggerAddEventUnitBehaviorChange(lib1_gt_PhalanxBuffChange, null, null, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(lib1_gt_PhalanxBuffChange, null, null, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreateReserveUnit
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CreateReserveUnit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_ReserveUnitCreation(EventPlayerEffectUsedUnit(c_effectUnitCaster), EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), lib1_gv_customValuePhalanx)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CreateReserveUnit_Init () {
    lib1_gt_CreateReserveUnit = TriggerCreate("lib1_gt_CreateReserveUnit_Func");
    TriggerEnable(lib1_gt_CreateReserveUnit, false);
    TriggerAddEventPlayerEffectUsed(lib1_gt_CreateReserveUnit, c_playerAny, "CreateReserveUnitTriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CountUnit
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CountUnit_Func (bool testConds, bool runActions) {
    int autoAD8AFDF6_ae;
    int autoAD8AFDF6_ai;
    int auto1B40C3D5_ae;
    int auto1B40C3D5_ai;
    int auto07C6A920_ae;
    int auto07C6A920_ai;
    int auto8E66146C_ae;
    int auto8E66146C_ai;
    int auto31B12B20_ae;
    int auto31B12B20_ai;
    int auto4CC5E8F4_ae;
    int auto4CC5E8F4_ai;
    int autoD184BDBF_ae;
    int autoD184BDBF_ai;

    // Variable Declarations
    unit lv_unit;
    int lv_player;
    int lv_team;
    int lv_teamMember;
    int[lib1_gv_teamMaximumCount + 1] lv_teamMemberCountAlive;
    int lv_teamCountAlive;
    int[lib1_gv_teamMaximumCount + 1] lv_teamAlive;
    bool lv_wait;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoAD8AFDF6_ae = lib1_gv_teamCount;
    autoAD8AFDF6_ai = 1;
    lv_team = 1;
    for ( ; ( (autoAD8AFDF6_ai >= 0 && lv_team <= autoAD8AFDF6_ae) || (autoAD8AFDF6_ai <= 0 && lv_team >= autoAD8AFDF6_ae) ) ; lv_team += autoAD8AFDF6_ai ) {
        auto1B40C3D5_ae = lib1_gv_teamMemberCount;
        auto1B40C3D5_ai = 1;
        lv_teamMember = 1;
        for ( ; ( (auto1B40C3D5_ai >= 0 && lv_teamMember <= auto1B40C3D5_ae) || (auto1B40C3D5_ai <= 0 && lv_teamMember >= auto1B40C3D5_ae) ) ; lv_teamMember += auto1B40C3D5_ai ) {
            lv_player = PlayerGroupPlayer(lib1_gv_teamGroup[lv_team], lv_teamMember);
            if ((UnitGroupCount(UnitGroup(null, lv_player, lib1_gv_battlefield, lib1_gv_phalanxFilter, 0), c_unitCountAlive) > 0)) {
                lv_teamMemberCountAlive[lv_team] += 1;
            }

        }
    }
    auto07C6A920_ae = lib1_gv_teamCount;
    auto07C6A920_ai = 1;
    lv_team = 1;
    for ( ; ( (auto07C6A920_ai >= 0 && lv_team <= auto07C6A920_ae) || (auto07C6A920_ai <= 0 && lv_team >= auto07C6A920_ae) ) ; lv_team += auto07C6A920_ai ) {
        if ((lv_teamMemberCountAlive[lv_team] > 0)) {
            lv_teamCountAlive += 1;
            lv_teamAlive[lv_teamCountAlive] = lv_team;
        }

    }
    if ((lv_teamCountAlive == lib1_gv_teamCountAlive[lib1_gv_round])) {
        auto8E66146C_ae = lib1_gv_teamMaximumCount;
        auto8E66146C_ai = 1;
        lv_team = 1;
        for ( ; ( (auto8E66146C_ai >= 0 && lv_team <= auto8E66146C_ae) || (auto8E66146C_ai <= 0 && lv_team >= auto8E66146C_ae) ) ; lv_team += auto8E66146C_ai ) {
            lib1_gv_teamAlive[lv_team] = 0;
        }
        auto31B12B20_ae = lv_teamCountAlive;
        auto31B12B20_ai = 1;
        lv_team = 1;
        for ( ; ( (auto31B12B20_ai >= 0 && lv_team <= auto31B12B20_ae) || (auto31B12B20_ai <= 0 && lv_team >= auto31B12B20_ae) ) ; lv_team += auto31B12B20_ai ) {
            lib1_gv_teamAlive[lv_team] = lv_teamAlive[lv_team];
        }
        lib1_gf_DisplayMessageAll(lib1_gv_round);
        if ((lib1_gf_IsFinalRound(lib1_gv_round) == true)) {
            lv_wait = false;
            lib1_gf_ScoreBoardRowColorUpdate(lib1_gv_round);
        }
        else {
            lv_wait = true;
        }
        if ((lib1_gv_round == lib1_gv_roundCount)) {
            auto4CC5E8F4_ae = lv_teamCountAlive;
            auto4CC5E8F4_ai = 1;
            lv_team = 1;
            for ( ; ( (auto4CC5E8F4_ai >= 0 && lv_team <= auto4CC5E8F4_ae) || (auto4CC5E8F4_ai <= 0 && lv_team >= auto4CC5E8F4_ae) ) ; lv_team += auto4CC5E8F4_ai ) {
                lib1_gf_GameOver(lv_teamAlive[lv_team]);
            }
        }
        else {
            autoD184BDBF_ae = lv_teamCountAlive;
            autoD184BDBF_ai = 1;
            lv_team = 1;
            for ( ; ( (autoD184BDBF_ai >= 0 && lv_team <= autoD184BDBF_ae) || (autoD184BDBF_ai <= 0 && lv_team >= autoD184BDBF_ae) ) ; lv_team += autoD184BDBF_ai ) {
                lib1_gf_CountUnitEnable(false);
                lib1_gf_CountUnit(lv_teamAlive[lv_team], lv_wait);
            }
            TriggerExecute(lib1_gt_CountUnitControl, true, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CountUnit_Init () {
    lib1_gt_CountUnit = TriggerCreate("lib1_gt_CountUnit_Func");
    TriggerEnable(lib1_gt_CountUnit, false);
    TriggerAddEventPlayerEffectUsed(lib1_gt_CountUnit, c_playerAny, "CountUnitTriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CountUnitControl
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CountUnitControl_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CountUnitControl_Init () {
    lib1_gt_CountUnitControl = TriggerCreate("lib1_gt_CountUnitControl_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitDied
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UnitDied_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(libNtve_gf_KillingUnit()) == true)) {
        if (((UnitFilterMatch(libNtve_gf_KillingUnit(), libNtve_gf_KillingPlayer(), lib1_gv_unitFilter) == true) || (UnitFilterMatch(libNtve_gf_KillingUnit(), libNtve_gf_KillingPlayer(), lib1_gv_creepFilter) == true))) {
            if ((UnitFilterMatch(libNtve_gf_KillingUnit(), libNtve_gf_KillingPlayer(), lib1_gv_creepFilter) == false)) {
                lib1_gf_KillScoreAndKillGoldAdd(lib1_gf_MirrorPlayerGetUserPlayer(libNtve_gf_KillingPlayer()), UnitGetType(EventUnit()));
            }
            else {
                PlayerModifyPropertyInt(libNtve_gf_KillingPlayer(), c_playerPropTerrazine, c_playerPropOperSubtract, lib1_gf_UnitTypeGetKillGold(UnitGetType(EventUnit())));
            }
        }

    }
    else {
        lib1_gf_KillScoreAndKillGoldAdd(lib1_gf_MirrorPlayerGetUserPlayer(libNtve_gf_KillingPlayer()), UnitGetType(EventUnit()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UnitDied_Init () {
    lib1_gt_UnitDied = TriggerCreate("lib1_gt_UnitDied_Func");
    TriggerEnable(lib1_gt_UnitDied, false);
    TriggerAddEventUnitDied(lib1_gt_UnitDied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreatedUnitSetTooltipable
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CreatedUnitSetTooltipable_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventUnitCreatedUnit(), c_unitStateTooltipable, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CreatedUnitSetTooltipable_Init () {
    lib1_gt_CreatedUnitSetTooltipable = TriggerCreate("lib1_gt_CreatedUnitSetTooltipable_Func");
    TriggerAddEventUnitCreated(lib1_gt_CreatedUnitSetTooltipable, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DebugControlPressed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_DebugControlPressed_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_DebugControlPressed_Init () {
    lib1_gt_DebugControlPressed = TriggerCreate("lib1_gt_DebugControlPressed_Func");
    TriggerEnable(lib1_gt_DebugControlPressed, false);
    TriggerAddEventKeyPressed(lib1_gt_DebugControlPressed, c_playerAny, c_keyF5, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DebugKeyPressed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_DebugKeyPressed_Func (bool testConds, bool runActions) {
    int auto27CBA15A_val;

    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    auto27CBA15A_val = EventKeyPressed();
    if (auto27CBA15A_val == c_keyF7) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "hpea", c_unitCreateIgnorePlacement, lv_player, PlayerStartLocation(lv_player));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ewsp", c_unitCreateIgnorePlacement, lv_player, PlayerStartLocation(lv_player));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "opeo", c_unitCreateIgnorePlacement, lv_player, PlayerStartLocation(lv_player));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "uaco", c_unitCreateIgnorePlacement, lv_player, PlayerStartLocation(lv_player));
        PlayerModifyPropertyInt(lv_player, c_playerPropTerrazine, c_playerPropOperSetTo, 100000);
        PlayerModifyPropertyInt(lv_player, c_playerPropCustom, c_playerPropOperSetTo, 100000);
        PlayerGroupClear(lib1_gv_aIGroup);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_DebugKeyPressed_Init () {
    lib1_gt_DebugKeyPressed = TriggerCreate("lib1_gt_DebugKeyPressed_Func");
    TriggerEnable(lib1_gt_DebugKeyPressed, false);
    TriggerAddEventKeyPressed(lib1_gt_DebugKeyPressed, c_playerAny, c_keyNone, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DebugUnitRemove
//--------------------------------------------------------------------------------------------------
bool lib1_gt_DebugUnitRemove_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroupSelected(EventPlayer()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_DebugUnitRemove_Init () {
    lib1_gt_DebugUnitRemove = TriggerCreate("lib1_gt_DebugUnitRemove_Func");
    TriggerEnable(lib1_gt_DebugUnitRemove, false);
    TriggerAddEventKeyPressed(lib1_gt_DebugUnitRemove, c_playerAny, c_keyR, true, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameAttributeInizialization
//--------------------------------------------------------------------------------------------------
bool lib1_gt_GameAttributeInizialization_Func (bool testConds, bool runActions) {
    string auto6B172583_val;
    int auto287F4D26_ae;
    int auto287F4D26_ai;

    // Variable Declarations
    int lv_round;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto6B172583_val = GameAttributeGameValue("2");
    if (auto6B172583_val == "0001") {
        lib1_gv_teamCount = 8;
    }
    else if (auto6B172583_val == "0002") {
        lib1_gv_teamCount = 4;
    }
    else {
    }
    lib1_gv_teamRoundCount = (lib1_gv_teamCount-1);
    lib1_gv_teamMemberCount = (lib1_gv_playerCount/lib1_gv_teamCount);
    lib1_gv_finalRoundCount = Log2I(lib1_gv_teamCount);
    lib1_gv_roundCount = (lib1_gv_playerCount-lib1_gv_teamMemberCount+lib1_gv_finalRoundCount);
    auto287F4D26_ae = lib1_gv_finalRoundCount;
    auto287F4D26_ai = 1;
    lv_round = 1;
    for ( ; ( (auto287F4D26_ai >= 0 && lv_round <= auto287F4D26_ae) || (auto287F4D26_ai <= 0 && lv_round >= auto287F4D26_ae) ) ; lv_round += auto287F4D26_ai ) {
        lib1_gv_teamCountAlive[(lib1_gv_playerCount-lib1_gv_teamMemberCount+lv_round)] = (lib1_gv_teamCount/Pow2I(lv_round));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_GameAttributeInizialization_Init () {
    lib1_gt_GameAttributeInizialization = TriggerCreate("lib1_gt_GameAttributeInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AllianceInizialization
//--------------------------------------------------------------------------------------------------
bool lib1_gt_AllianceInizialization_Func (bool testConds, bool runActions) {
    int auto37AC6879_ae;
    int auto37AC6879_ai;
    int autoB515AD5D_ae;
    int autoB515AD5D_ai;
    int auto1B77AE87_ae;
    int auto1B77AE87_ai;

    // Variable Declarations
    int lv_team;
    int lv_teamMember;
    int lv_targetTeamMember;
    int lv_player;
    int lv_targetPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_TeamAlianceSet(libNtve_ge_AllianceSetting_AllyWithSharedVision);
    auto37AC6879_ae = lib1_gv_teamCount;
    auto37AC6879_ai = 1;
    lv_team = 1;
    for ( ; ( (auto37AC6879_ai >= 0 && lv_team <= auto37AC6879_ae) || (auto37AC6879_ai <= 0 && lv_team >= auto37AC6879_ae) ) ; lv_team += auto37AC6879_ai ) {
        libNtve_gf_SetPlayerGroupAlliance(lib1_gv_mirrorTeamGroup[lv_team], libNtve_ge_AllianceSetting_AllyWithSharedVision);
        autoB515AD5D_ae = lib1_gv_teamMemberCount;
        autoB515AD5D_ai = 1;
        lv_teamMember = 1;
        for ( ; ( (autoB515AD5D_ai >= 0 && lv_teamMember <= autoB515AD5D_ae) || (autoB515AD5D_ai <= 0 && lv_teamMember >= autoB515AD5D_ae) ) ; lv_teamMember += autoB515AD5D_ai ) {
            PlayerSetColorIndex(PlayerGroupPlayer(lib1_gv_mirrorTeamGroup[lv_team], lv_teamMember), PlayerGetColorIndex(PlayerGroupPlayer(lib1_gv_teamGroup[lv_team], lv_teamMember), false), true);
            auto1B77AE87_ae = lib1_gv_teamMemberCount;
            auto1B77AE87_ai = 1;
            lv_targetTeamMember = 1;
            for ( ; ( (auto1B77AE87_ai >= 0 && lv_targetTeamMember <= auto1B77AE87_ae) || (auto1B77AE87_ai <= 0 && lv_targetTeamMember >= auto1B77AE87_ae) ) ; lv_targetTeamMember += auto1B77AE87_ai ) {
                libNtve_gf_SetAllianceOneWay(PlayerGroupPlayer(lib1_gv_mirrorTeamGroup[lv_team], lv_teamMember), PlayerGroupPlayer(lib1_gv_teamGroup[lv_team], lv_targetTeamMember), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
                libNtve_gf_SetAllianceOneWay(PlayerGroupPlayer(lib1_gv_teamGroup[lv_team], lv_teamMember), PlayerGroupPlayer(lib1_gv_mirrorTeamGroup[lv_team], lv_targetTeamMember), libNtve_ge_AllianceSetting_Ally);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_AllianceInizialization_Init () {
    lib1_gt_AllianceInizialization = TriggerCreate("lib1_gt_AllianceInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ScoreBoardInizialization
//--------------------------------------------------------------------------------------------------
bool lib1_gt_ScoreBoardInizialization_Func (bool testConds, bool runActions) {
    int auto51373F10_ae;
    int auto51373F10_ai;
    int auto423AAB18_ae;
    int auto423AAB18_ai;
    int autoE971983E_ae;
    int autoE971983E_ai;

    // Variable Declarations
    int lv_column;
    int lv_row;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    BoardCreate(3, lib1_gv_playerCount, StringExternal("Param/Value/lib_1_AA74521D"), Color(100.00, 100.00, 100.00));
    lib1_gv_scoreBoard = BoardLastCreated();
    BoardSetGroupCount(lib1_gv_scoreBoard, lib1_gv_teamCount);
    BoardItemSetText(lib1_gv_scoreBoard, 1, c_boardRowHeader, StringExternal("Param/Value/lib_1_41051894"));
    BoardItemSetText(lib1_gv_scoreBoard, 2, c_boardRowHeader, StringExternal("Param/Value/lib_1_4649C5C8"));
    BoardItemSetText(lib1_gv_scoreBoard, 3, c_boardRowHeader, StringExternal("Param/Value/lib_1_FB3A39A5"));
    auto51373F10_ae = 3;
    auto51373F10_ai = 1;
    lv_column = 1;
    for ( ; ( (auto51373F10_ai >= 0 && lv_column <= auto51373F10_ae) || (auto51373F10_ai <= 0 && lv_column >= auto51373F10_ae) ) ; lv_column += auto51373F10_ai ) {
        BoardItemSetFontSize(lib1_gv_scoreBoard, lv_column, c_boardRowHeader, 20);
    }
    BoardSetPlayerColumn(lib1_gv_scoreBoard, 1, true);
    auto423AAB18_ae = lib1_gv_playerCount;
    auto423AAB18_ai = 1;
    lv_row = 1;
    for ( ; ( (auto423AAB18_ai >= 0 && lv_row <= auto423AAB18_ae) || (auto423AAB18_ai <= 0 && lv_row >= auto423AAB18_ae) ) ; lv_row += auto423AAB18_ai ) {
        BoardPlayerAdd(lib1_gv_scoreBoard, lib1_gf_IndexGetUserPlayer(lv_row));
        BoardRowSetGroup(lib1_gv_scoreBoard, lv_row, lib1_gf_PlayerGetTeam(lib1_gf_IndexGetUserPlayer(lv_row)));
        autoE971983E_ae = 3;
        autoE971983E_ai = 1;
        lv_column = 1;
        for ( ; ( (autoE971983E_ai >= 0 && lv_column <= autoE971983E_ae) || (autoE971983E_ai <= 0 && lv_column >= autoE971983E_ae) ) ; lv_column += autoE971983E_ai ) {
            if ((lv_column == 1)) {
                BoardItemSetFontSize(lib1_gv_scoreBoard, lv_column, lv_row, 20);
                BoardItemSetTextColor(lib1_gv_scoreBoard, lv_column, lv_row, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lib1_gf_IndexGetUserPlayer(lv_row), false)));
            }
            else if (((lv_column == 2) || (lv_column == 3))) {
                BoardItemSetFontSize(lib1_gv_scoreBoard, lv_column, lv_row, 16);
                BoardItemSetTextColor(lib1_gv_scoreBoard, lv_column, lv_row, Color(100.00, 100.00, 100.00));
                BoardItemSetProgressShow(lib1_gv_scoreBoard, lv_column, lv_row, true);
                BoardItemSetProgressColor(lib1_gv_scoreBoard, lv_column, lv_row, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lib1_gf_IndexGetUserPlayer(lv_row), false)), 1);
            }
        }
    }
    libNtve_gf_ShowHideLeaderboard(lib1_gv_scoreBoard, true, lib1_gv_uIPlayergroup);
    lib1_gf_BuildingScoreUpdate();
    lib1_gf_KillScoreUpdate(0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_ScoreBoardInizialization_Init () {
    lib1_gt_ScoreBoardInizialization = TriggerCreate("lib1_gt_ScoreBoardInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TimerInizialization
//--------------------------------------------------------------------------------------------------
bool lib1_gt_TimerInizialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TimerWindowCreate(lib1_gv_timer, StringExternal("Param/Value/lib_1_C0134725"), false, false);
    lib1_gv_timerWindow = TimerWindowLastCreated();
    TimerWindowSetTimer(lib1_gv_timerWindow, lib1_gv_timer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_TimerInizialization_Init () {
    lib1_gt_TimerInizialization = TriggerCreate("lib1_gt_TimerInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlayerInizialization
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PlayerInizialization_Func (bool testConds, bool runActions) {
    int auto32F73269_ae;
    int auto32F73269_ai;
    int auto63073FE8_ae;
    int auto63073FE8_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto32F73269_ae = lib1_gv_playerCount;
    auto32F73269_ai = 1;
    lv_player = 1;
    for ( ; ( (auto32F73269_ai >= 0 && lv_player <= auto32F73269_ae) || (auto32F73269_ai <= 0 && lv_player >= auto32F73269_ae) ) ; lv_player += auto32F73269_ai ) {
        libGAwX_gf_SetPlayerUIRace(lib1_gf_IndexGetUserPlayer(lv_player), libGAwX_gf_GenerateRaceFromRaceAttribute(GameAttributePlayerValue("[bnet:War3 Extra (GA)/0.0/60618,file:Mods\\WarCraft\\WarCraftDataAbil.SC2Mod]1", lib1_gf_IndexGetUserPlayer(lv_player))));
        PlayerSetState(lib1_gf_IndexGetUserPlayer(lv_player), c_playerStateFoodIgnored, true);
        PlayerSetState(lib1_gf_IndexGetUserPlayer(lv_player), c_playerStateShowWorldTip, true);
        PlayerOptionOverride(lib1_gf_IndexGetUserPlayer(lv_player), "simplecommandcard", "0");
        PlayerOptionOverride(lib1_gf_IndexGetUserPlayer(lv_player), "displayunitstatus", "All");
        PlayerOptionOverride(lib1_gf_IndexGetUserPlayer(lv_player), "buildgridhint", "1");
        PlayerOptionOverride(lib1_gf_IndexGetUserPlayer(lv_player), "gametooltips", "1");
        PlayerOptionOverride(lib1_gf_IndexGetUserPlayer(lv_player), "selectuncontrolable", "1");
        if ((PlayerType(lib1_gf_IndexGetUserPlayer(lv_player)) == c_playerTypeComputer)) {
            PlayerGroupAdd(lib1_gv_aIGroup, lib1_gf_IndexGetUserPlayer(lv_player));
        }

    }
    libGAwX_gf_SetPlayerUIRace(0, "Orc");
    auto63073FE8_ae = lib1_gv_playerCount;
    auto63073FE8_ai = 1;
    lv_player = 1;
    for ( ; ( (auto63073FE8_ai >= 0 && lv_player <= auto63073FE8_ae) || (auto63073FE8_ai <= 0 && lv_player >= auto63073FE8_ae) ) ; lv_player += auto63073FE8_ai ) {
        AIStart(lib1_gf_UserPlayerGetMirrorPlayer(lib1_gf_IndexGetUserPlayer(lv_player)), false, 1000);
        TechTreeRequirementsEnable(lib1_gf_UserPlayerGetMirrorPlayer(lib1_gf_IndexGetUserPlayer(lv_player)), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_PlayerInizialization_Init () {
    lib1_gt_PlayerInizialization = TriggerCreate("lib1_gt_PlayerInizialization_Func");
}

void lib1_InitTriggers () {
    lib1_gt_UnitChangeOwner2_Init();
    lib1_gt_UnitDied2_Init();
    lib1_gt_PlayerLeft_Init();
    lib1_gt_BuildingCreated_Init();
    lib1_gt_UnitAbilityMorph_Init();
    lib1_gt_PhalanxCreated_Init();
    lib1_gt_PortalCreated_Init();
    lib1_gt_PhalanxBuffChange_Init();
    lib1_gt_CreateReserveUnit_Init();
    lib1_gt_CountUnit_Init();
    lib1_gt_CountUnitControl_Init();
    lib1_gt_UnitDied_Init();
    lib1_gt_CreatedUnitSetTooltipable_Init();
    lib1_gt_DebugControlPressed_Init();
    lib1_gt_DebugKeyPressed_Init();
    lib1_gt_DebugUnitRemove_Init();
    lib1_gt_GameAttributeInizialization_Init();
    lib1_gt_AllianceInizialization_Init();
    lib1_gt_ScoreBoardInizialization_Init();
    lib1_gt_TimerInizialization_Init();
    lib1_gt_PlayerInizialization_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_InitLib_completed = false;

void lib1_InitLib () {
    if (lib1_InitLib_completed) {
        return;
    }

    lib1_InitLib_completed = true;

    lib1_InitLibraries();
    lib1_InitVariables();
    lib1_InitTriggers();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libGAwX_InitLib();
    lib1_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const string gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE58D95E4BD8D = "\xE5\x8D\x95\xE4\xBD\x8D\xEF\xBC\x9A";
const string gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE782B9 = "\xE7\x82\xB9\xEF\xBC\x9A";

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
string[6] gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE5898DE7BC80;

void InitGlobals () {
    int init_i;

    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE5898DE7BC80[init_i] = "";
    }
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
text gf_E69588E69E9CE58AA9E6898BE5B8AEE58AA9E69687E69CACE6A087E9A298 (text lp_e58E9FE6A087E9A298);
text gf_E69588E69E9CE58AA9E6898BE79BB8E585B3E58D95E4BD8DE782B9E4BFA1E681AF (unit lp_e58D95E4BD8D, point lp_e782B9, int lp_e698BEE7A4BAE69687E69CAC);
void gf_E69588E69E9CE58AA9E6898BE6B3A8E5868CE4BA8BE4BBB6 (int lp_player, string lp_effectLink);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_MapInizialization;
trigger gt_PlayerInizialization;
trigger gt_VenueInizialization;
trigger gt_BuidingRegionInizialization;
trigger gt_PreviewerPointInizialization;
trigger gt_RoundInitialization;
trigger gt_E69588E69E9CE58AA9E6898BE8A7A6E58F91E599A8E58AA8E4BD9C;
trigger gt_E69588E69E9CE58AA9E6898BE5889DE5A78BE58C96;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
text gf_E69588E69E9CE58AA9E6898BE5B8AEE58AA9E69687E69CACE6A087E9A298 (text lp_e58E9FE6A087E9A298) {
    // Variable Declarations
    text lv_e6A087E9A298E5898DE7BC80;
    text lv_e6A087E9A298E5908EE7BC80;

    // Variable Initialization
    lv_e6A087E9A298E5898DE7BC80 = StringToText("<c val=\"FF7F00\">\xE8\xA7\xA6\xE5\x8F\x91\xE6\x95\x88\xE6\x9E\x9C\xEF\xBC\x9A</c>");
    lv_e6A087E9A298E5908EE7BC80 = StringToText(("  <c val=\"7F00FF\">\xE8\xA7\xA6\xE5\x8F\x91\xE6\x97\xB6\xE9\x97\xB4\xEF\xBC\x9A" + FixedToString(GameGetMissionTime(), 4) + "</c>"));

    // Implementation
    return (lv_e6A087E9A298E5898DE7BC80 + lp_e58E9FE6A087E9A298 + lv_e6A087E9A298E5908EE7BC80);
}

text gf_E69588E69E9CE58AA9E6898BE79BB8E585B3E58D95E4BD8DE782B9E4BFA1E681AF (unit lp_e58D95E4BD8D, point lp_e782B9, int lp_e698BEE7A4BAE69687E69CAC) {
    // Variable Declarations
    string lv_e58D95E4BD8DE7B1BBE59E8B;
    string lv_e59BBEE78987E8B7AFE5BE84;
    string lv_e5AD97E7ACA6E4B8B2E782B9;
    string lv_e58685E5AEB9;

    // Variable Initialization
    lv_e59BBEE78987E8B7AFE5BE84 = "";
    lv_e5AD97E7ACA6E4B8B2E782B9 = "";
    lv_e58685E5AEB9 = "";

    // Implementation
    if ((lp_e58D95E4BD8D != null)) {
        lv_e58D95E4BD8DE7B1BBE59E8B = UnitGetType(lp_e58D95E4BD8D);
        lv_e59BBEE78987E8B7AFE5BE84 = CatalogFieldValueGet(c_gameCatalogActor, (lv_e58D95E4BD8DE7B1BBE59E8B), "UnitIcon", 0);
    }
    else {
        lv_e58D95E4BD8DE7B1BBE59E8B = "\xE6\x97\xA0";
        lv_e59BBEE78987E8B7AFE5BE84 = "Assets\\Textures\\btn-border-transportslot-filled.dds";
    }
    lv_e5AD97E7ACA6E4B8B2E782B9 = ("( " + FixedToString(PointGetX(lp_e782B9),6) + " , " + FixedToString(PointGetY(lp_e782B9),6) + " )");;
    lv_e58685E5AEB9 = ("<IMG path=\"" + lv_e59BBEE78987E8B7AFE5BE84 + "\" height=\"28\" width=\"28\"/>");
    lv_e58685E5AEB9 = (lv_e58685E5AEB9 + "  <c val=\"FF0000\">" + gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE5898DE7BC80[(lp_e698BEE7A4BAE69687E69CAC)] + gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE58D95E4BD8D + "</c>" + (lv_e58D95E4BD8DE7B1BBE59E8B) + "     ");
    lv_e58685E5AEB9 = (lv_e58685E5AEB9 + "<c val=\"FF0000\">" + gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE5898DE7BC80[(lp_e698BEE7A4BAE69687E69CAC)] + gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE782B9 + "</c>" + lv_e5AD97E7ACA6E4B8B2E782B9);
    return StringToText(lv_e58685E5AEB9);
}

void gf_E69588E69E9CE58AA9E6898BE6B3A8E5868CE4BA8BE4BBB6 (int lp_player, string lp_effectLink) {
    // Implementation
    TriggerAddEventPlayerEffectUsed(gt_E69588E69E9CE58AA9E6898BE8A7A6E58F91E599A8E58AA8E4BD9C,lp_player,lp_effectLink);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MapInizialization
//--------------------------------------------------------------------------------------------------
bool gt_MapInizialization_Func (bool testConds, bool runActions) {
    playergroup autoE8E91B19_g;
    int autoE8E91B19_p;

    // Variable Declarations
    bool lv_debug;
    bool lv_virturalTeam;
    int lv_player;

    // Variable Initialization
    lv_debug = true;
    lv_virturalTeam = true;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_PlayerInizialization, true, false);
    TriggerExecute(gt_VenueInizialization, true, false);
    TriggerExecute(gt_BuidingRegionInizialization, true, false);
    TriggerExecute(gt_PreviewerPointInizialization, true, false);
    TriggerExecute(gt_RoundInitialization, true, false);
    lib1_gf_ModInizialization(lv_debug, lv_virturalTeam);
    autoE8E91B19_g = PlayerGroupActive(); 
    autoE8E91B19_p = 1;
    for ( ; autoE8E91B19_p <= PlayerGroupCount(autoE8E91B19_g) ; autoE8E91B19_p += BoolToInt(lv_player == PlayerGroupPlayer(autoE8E91B19_g, autoE8E91B19_p)) ) {
        lv_player = PlayerGroupPlayer(autoE8E91B19_g, autoE8E91B19_p);
        VisRevealArea(lv_player, RegionFromId(70), 0.0625, false);
        VisRevealArea(lv_player, RegionFromId(71), 0.0625, false);
    }
    libGAwX_gf_SetWar3TimeOfDay("13:00:00");
    libGAwX_gf_PauseUnpauseTimeOfDayWar3(true);
    MeleeInitUnits();
    lib1_gf_RoundStartLoop(lv_debug);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInizialization_Init () {
    gt_MapInizialization = TriggerCreate("gt_MapInizialization_Func");
    TriggerAddEventMapInit(gt_MapInizialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlayerInizialization
//--------------------------------------------------------------------------------------------------
bool gt_PlayerInizialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_UserPlayerSet(1, 0);
    lib1_gf_MirrorPlayerSet(1, 8);
    lib1_gf_UserPlayerSet(2, 1);
    lib1_gf_MirrorPlayerSet(2, 9);
    lib1_gf_UserPlayerSet(3, 2);
    lib1_gf_MirrorPlayerSet(3, 10);
    lib1_gf_UserPlayerSet(4, 3);
    lib1_gf_MirrorPlayerSet(4, 11);
    lib1_gf_UserPlayerSet(5, 4);
    lib1_gf_MirrorPlayerSet(5, 12);
    lib1_gf_UserPlayerSet(6, 5);
    lib1_gf_MirrorPlayerSet(6, 13);
    lib1_gf_UserPlayerSet(7, 6);
    lib1_gf_MirrorPlayerSet(7, 14);
    lib1_gf_UserPlayerSet(8, 7);
    lib1_gf_MirrorPlayerSet(8, 15);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerInizialization_Init () {
    gt_PlayerInizialization = TriggerCreate("gt_PlayerInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: VenueInizialization
//--------------------------------------------------------------------------------------------------
bool gt_VenueInizialization_Func (bool testConds, bool runActions) {
    string auto480E4CF2_val;

    // Variable Declarations
    string lv_gameValue;

    // Variable Initialization
    lv_gameValue = GameAttributeGameValue("2");

    // Actions
    if (!runActions) {
        return true;
    }

    auto480E4CF2_val = lv_gameValue;
    if (auto480E4CF2_val == "0001") {
        lib1_gf_VenueInitialSet(RegionFromId(25), 1, 90.0);
        lib1_gf_VenueInitialSet(RegionFromId(27), 2, 270.0);
        lib1_gf_VenueInitialSet(RegionFromId(29), 3, 270.0);
        lib1_gf_VenueInitialSet(RegionFromId(31), 4, 90.0);
        lib1_gf_VenueInitialSet(RegionFromId(33), 5, 0.0);
        lib1_gf_VenueInitialSet(RegionFromId(34), 6, 180.0);
        lib1_gf_VenueInitialSet(RegionFromId(35), 7, 180.0);
        lib1_gf_VenueInitialSet(RegionFromId(36), 8, 0.0);
        lib1_gf_BonusVenueSet(RegionFromId(25), 1, 90.0);
        lib1_gf_BonusVenueSet(RegionFromId(29), 2, 270.0);
        lib1_gf_BonusVenueSet(RegionFromId(33), 3, 0.0);
        lib1_gf_BonusVenueSet(RegionFromId(35), 4, 180.0);
        lib1_gf_BonusVenueSet(RegionFromId(38), 5, 0.0);
        lib1_gf_BonusVenueSet(RegionFromId(39), 6, 180.0);
        lib1_gf_BonusVenueSet(RegionFromId(40), 7, 0.0);
        lib1_gf_BonusVenueSet(RegionFromId(41), 8, 180.0);
        lib1_gf_CreepPointSet(PointFromId(1622943121), 1);
        lib1_gf_CreepPointSet(PointFromId(9096037), 2);
        lib1_gf_CreepPointSet(PointFromId(914766699), 3);
        lib1_gf_CreepPointSet(PointFromId(2024075559), 4);
        lib1_gf_CreepPointSet(PointFromId(1413534366), 5);
        lib1_gf_CreepPointSet(PointFromId(775643380), 6);
        lib1_gf_CreepPointSet(PointFromId(1844541176), 7);
        lib1_gf_CreepPointSet(PointFromId(1335332667), 8);
    }
    else if (auto480E4CF2_val == "0002") {
        lib1_gf_VenueInitialSet(RegionFromId(25), 1, 90.0);
        lib1_gf_VenueInitialSet(RegionFromId(26), 2, 90.0);
        lib1_gf_BlockerRemove(RegionFromId(26));
        lib1_gf_VenueInitialSet(RegionFromId(27), 3, 270.0);
        lib1_gf_VenueInitialSet(RegionFromId(28), 4, 270.0);
        lib1_gf_BlockerRemove(RegionFromId(28));
        lib1_gf_VenueInitialSet(RegionFromId(29), 5, 270.0);
        lib1_gf_VenueInitialSet(RegionFromId(30), 6, 270.0);
        lib1_gf_BlockerRemove(RegionFromId(30));
        lib1_gf_VenueInitialSet(RegionFromId(31), 7, 90.0);
        lib1_gf_VenueInitialSet(RegionFromId(32), 8, 90.0);
        lib1_gf_BlockerRemove(RegionFromId(32));
        lib1_gf_BlockerRemove(RegionFromId(42));
        lib1_gf_BlockerRemove(RegionFromId(43));
        lib1_gf_BlockerRemove(RegionFromId(44));
        lib1_gf_BlockerRemove(RegionFromId(45));
        lib1_gf_BonusVenueSet(RegionFromId(25), 1, 90.0);
        lib1_gf_BonusVenueSet(RegionFromId(26), 2, 90.0);
        lib1_gf_BonusVenueSet(RegionFromId(29), 3, 270.0);
        lib1_gf_BonusVenueSet(RegionFromId(30), 4, 270.0);
        lib1_gf_BonusVenueSet(RegionFromId(33), 5, 0.0);
        lib1_gf_BonusVenueSet(RegionFromId(42), 6, 0.0);
        lib1_gf_BonusVenueSet(RegionFromId(35), 7, 180.0);
        lib1_gf_BonusVenueSet(RegionFromId(44), 8, 180.0);
        lib1_gf_CreepPointSet(PointFromId(1622943121), 1);
        lib1_gf_CreepPointSet(PointFromId(529173248), 2);
        lib1_gf_CreepPointSet(PointFromId(9096037), 3);
        lib1_gf_CreepPointSet(PointFromId(537789621), 4);
        lib1_gf_CreepPointSet(PointFromId(914766699), 5);
        lib1_gf_CreepPointSet(PointFromId(924364117), 6);
        lib1_gf_CreepPointSet(PointFromId(2024075559), 7);
        lib1_gf_CreepPointSet(PointFromId(478594730), 8);
    }
    else {
    }
    lib1_gf_BattlefieldSetAll(RegionFromId(37));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VenueInizialization_Init () {
    gt_VenueInizialization = TriggerCreate("gt_VenueInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BuidingRegionInizialization
//--------------------------------------------------------------------------------------------------
bool gt_BuidingRegionInizialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_BuildingRegionSet(RegionFromId(1), 1, 1);
    lib1_gf_BuildingRegionSet(RegionFromId(2), 1, 2);
    lib1_gf_BuildingRegionSet(RegionFromId(3), 1, 3);
    lib1_gf_BuildingRegionSet(RegionFromId(4), 2, 1);
    lib1_gf_BuildingRegionSet(RegionFromId(5), 2, 2);
    lib1_gf_BuildingRegionSet(RegionFromId(6), 2, 3);
    lib1_gf_BuildingRegionSet(RegionFromId(7), 3, 1);
    lib1_gf_BuildingRegionSet(RegionFromId(8), 3, 2);
    lib1_gf_BuildingRegionSet(RegionFromId(9), 3, 3);
    lib1_gf_BuildingRegionSet(RegionFromId(10), 4, 1);
    lib1_gf_BuildingRegionSet(RegionFromId(11), 4, 2);
    lib1_gf_BuildingRegionSet(RegionFromId(12), 4, 3);
    lib1_gf_BuildingRegionSet(RegionFromId(13), 5, 1);
    lib1_gf_BuildingRegionSet(RegionFromId(14), 5, 2);
    lib1_gf_BuildingRegionSet(RegionFromId(15), 5, 3);
    lib1_gf_BuildingRegionSet(RegionFromId(16), 6, 1);
    lib1_gf_BuildingRegionSet(RegionFromId(17), 6, 2);
    lib1_gf_BuildingRegionSet(RegionFromId(18), 6, 3);
    lib1_gf_BuildingRegionSet(RegionFromId(19), 7, 1);
    lib1_gf_BuildingRegionSet(RegionFromId(20), 7, 2);
    lib1_gf_BuildingRegionSet(RegionFromId(21), 7, 3);
    lib1_gf_BuildingRegionSet(RegionFromId(22), 8, 1);
    lib1_gf_BuildingRegionSet(RegionFromId(23), 8, 2);
    lib1_gf_BuildingRegionSet(RegionFromId(24), 8, 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuidingRegionInizialization_Init () {
    gt_BuidingRegionInizialization = TriggerCreate("gt_BuidingRegionInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PreviewerPointInizialization
//--------------------------------------------------------------------------------------------------
bool gt_PreviewerPointInizialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_PreviewerRegionSet(RegionFromId(46), 1, 1);
    lib1_gf_PreviewerRegionSet(RegionFromId(47), 1, 2);
    lib1_gf_PreviewerRegionSet(RegionFromId(48), 1, 3);
    lib1_gf_PreviewerRegionSet(RegionFromId(49), 2, 1);
    lib1_gf_PreviewerRegionSet(RegionFromId(50), 2, 2);
    lib1_gf_PreviewerRegionSet(RegionFromId(51), 2, 3);
    lib1_gf_PreviewerRegionSet(RegionFromId(52), 3, 1);
    lib1_gf_PreviewerRegionSet(RegionFromId(53), 3, 2);
    lib1_gf_PreviewerRegionSet(RegionFromId(54), 3, 3);
    lib1_gf_PreviewerRegionSet(RegionFromId(55), 4, 1);
    lib1_gf_PreviewerRegionSet(RegionFromId(56), 4, 2);
    lib1_gf_PreviewerRegionSet(RegionFromId(57), 4, 3);
    lib1_gf_PreviewerRegionSet(RegionFromId(58), 5, 1);
    lib1_gf_PreviewerRegionSet(RegionFromId(59), 5, 2);
    lib1_gf_PreviewerRegionSet(RegionFromId(60), 5, 3);
    lib1_gf_PreviewerRegionSet(RegionFromId(61), 6, 1);
    lib1_gf_PreviewerRegionSet(RegionFromId(62), 6, 2);
    lib1_gf_PreviewerRegionSet(RegionFromId(63), 6, 3);
    lib1_gf_PreviewerRegionSet(RegionFromId(64), 7, 1);
    lib1_gf_PreviewerRegionSet(RegionFromId(65), 7, 2);
    lib1_gf_PreviewerRegionSet(RegionFromId(66), 7, 3);
    lib1_gf_PreviewerRegionSet(RegionFromId(67), 8, 1);
    lib1_gf_PreviewerRegionSet(RegionFromId(68), 8, 2);
    lib1_gf_PreviewerRegionSet(RegionFromId(69), 8, 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PreviewerPointInizialization_Init () {
    gt_PreviewerPointInizialization = TriggerCreate("gt_PreviewerPointInizialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: RoundInitialization
//--------------------------------------------------------------------------------------------------
bool gt_RoundInitialization_Func (bool testConds, bool runActions) {
    string autoB7B0BFE0_val;

    // Variable Declarations
    string lv_gameValue;

    // Variable Initialization
    lv_gameValue = GameAttributeGameValue("2");

    // Actions
    if (!runActions) {
        return true;
    }

    autoB7B0BFE0_val = lv_gameValue;
    if (autoB7B0BFE0_val == "0001") {
        lib1_gf_BonusRoundSet(true, 3);
        lib1_gf_BonusRoundSet(true, 7);
        lib1_gf_RoundGoldSet(1, 750);
        lib1_gf_RoundGoldSet(2, 750);
        lib1_gf_RoundGoldSet(3, 1500);
        lib1_gf_RoundGoldSet(4, 1500);
        lib1_gf_RoundGoldSet(5, 2250);
        lib1_gf_RoundGoldSet(6, 2250);
        lib1_gf_RoundGoldSet(7, 3000);
        lib1_gf_RoundGoldSet(8, 600);
    }
    else if (autoB7B0BFE0_val == "0002") {
        lib1_gf_BonusRoundSet(true, 3);
        lib1_gf_BonusRoundSet(true, 6);
        lib1_gf_RoundGoldSet(1, 750);
        lib1_gf_RoundGoldSet(2, 750);
        lib1_gf_RoundGoldSet(3, 1500);
        lib1_gf_RoundGoldSet(4, 1500);
        lib1_gf_RoundGoldSet(5, 2250);
        lib1_gf_RoundGoldSet(6, 2250);
        lib1_gf_RoundGoldSet(7, 600);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoundInitialization_Init () {
    gt_RoundInitialization = TriggerCreate("gt_RoundInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????? - ???????????????
//--------------------------------------------------------------------------------------------------
bool gt_E69588E69E9CE58AA9E6898BE8A7A6E58F91E599A8E58AA8E4BD9C_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_source;
    unit lv_outer;
    unit lv_target;
    unit lv_origin;
    point lv_casterPoint;
    point lv_sourcePoint;
    point lv_outerPoint;
    point lv_targetPoint;
    point lv_originPoint;
    string lv_effect;
    string lv_pic;
    text lv_e5B8AEE58AA9E6A087E9A298;
    text lv_e5B8AEE58AA9E58685E5AEB9;
    text lv_e59B9EE8BDA6;

    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_source = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_outer = EventPlayerEffectUsedUnit(c_effectUnitOuter);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_origin = EventPlayerEffectUsedUnit(c_effectUnitOrigin);
    lv_casterPoint = EventPlayerEffectUsedPoint(c_effectLocationCasterPoint);
    lv_sourcePoint = EventPlayerEffectUsedPoint(c_effectLocationSourcePoint);
    lv_outerPoint = EventPlayerEffectUsedPoint(c_effectLocationOuterPoint);
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_originPoint = EventPlayerEffectUsedPoint(c_effectLocationOriginPoint);
    lv_effect = EventPlayerEffectUsed();
    lv_pic = "";
    lv_e5B8AEE58AA9E6A087E9A298 = StringToText((lv_effect));
    lv_e59B9EE8BDA6 = StringToText("<n/>");

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_caster != null)) {
        lv_pic = CatalogFieldValueGet(c_gameCatalogActor, (UnitGetType(lv_caster)), "UnitIcon", 0);
    }
    else {
        lv_pic = "Assets\\Textures\\btn-ability-protoss-cloakfield-color.dds";
    }
    lv_e5B8AEE58AA9E58685E5AEB9 = (lv_e5B8AEE58AA9E58685E5AEB9 + gf_E69588E69E9CE58AA9E6898BE79BB8E585B3E58D95E4BD8DE782B9E4BFA1E681AF(lv_caster, lv_casterPoint, 0) + lv_e59B9EE8BDA6);
    lv_e5B8AEE58AA9E58685E5AEB9 = (lv_e5B8AEE58AA9E58685E5AEB9 + gf_E69588E69E9CE58AA9E6898BE79BB8E585B3E58D95E4BD8DE782B9E4BFA1E681AF(lv_source, lv_sourcePoint, 1) + lv_e59B9EE8BDA6);
    lv_e5B8AEE58AA9E58685E5AEB9 = (lv_e5B8AEE58AA9E58685E5AEB9 + gf_E69588E69E9CE58AA9E6898BE79BB8E585B3E58D95E4BD8DE782B9E4BFA1E681AF(lv_outer, lv_outerPoint, 2) + lv_e59B9EE8BDA6);
    lv_e5B8AEE58AA9E58685E5AEB9 = (lv_e5B8AEE58AA9E58685E5AEB9 + gf_E69588E69E9CE58AA9E6898BE79BB8E585B3E58D95E4BD8DE782B9E4BFA1E681AF(lv_target, lv_targetPoint, 3) + lv_e59B9EE8BDA6);
    lv_e5B8AEE58AA9E58685E5AEB9 = (lv_e5B8AEE58AA9E58685E5AEB9 + gf_E69588E69E9CE58AA9E6898BE79BB8E585B3E58D95E4BD8DE782B9E4BFA1E681AF(lv_origin, lv_originPoint, 4));
    HelpPanelAddTip(PlayerGroupAll(), gf_E69588E69E9CE58AA9E6898BE5B8AEE58AA9E69687E69CACE6A087E9A298(lv_e5B8AEE58AA9E6A087E9A298), lv_e5B8AEE58AA9E58685E5AEB9, lv_e5B8AEE58AA9E6A087E9A298, lv_pic);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_E69588E69E9CE58AA9E6898BE8A7A6E58F91E599A8E58AA8E4BD9C_Init () {
    gt_E69588E69E9CE58AA9E6898BE8A7A6E58F91E599A8E58AA8E4BD9C = TriggerCreate("gt_E69588E69E9CE58AA9E6898BE8A7A6E58F91E599A8E58AA8E4BD9C_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????? - ?????????
//--------------------------------------------------------------------------------------------------
bool gt_E69588E69E9CE58AA9E6898BE5889DE5A78BE58C96_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE5898DE7BC80[(0)] = "\xE6\x96\xBD\xE6\xB3\x95";
    gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE5898DE7BC80[(1)] = "\xE6\xBA\x90";
    gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE5898DE7BC80[(2)] = "\xE5\xA4\x96\xE5\xB1\x82";
    gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE5898DE7BC80[(3)] = "\xE7\x9B\xAE\xE6\xA0\x87";
    gv_e69588E69E9CE58AA9E6898BE698BEE7A4BAE69687E69CACE5898DE7BC80[(4)] = "\xE8\xB5\xB7\xE6\xBA\x90";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_E69588E69E9CE58AA9E6898BE5889DE5A78BE58C96_Init () {
    gt_E69588E69E9CE58AA9E6898BE5889DE5A78BE58C96 = TriggerCreate("gt_E69588E69E9CE58AA9E6898BE5889DE5A78BE58C96_Func");
    TriggerAddEventMapInit(gt_E69588E69E9CE58AA9E6898BE5889DE5A78BE58C96);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_MapInizialization_Init();
    gt_PlayerInizialization_Init();
    gt_VenueInizialization_Init();
    gt_BuidingRegionInizialization_Init();
    gt_PreviewerPointInizialization_Init();
    gt_RoundInitialization_Init();
    gt_E69588E69E9CE58AA9E6898BE8A7A6E58F91E599A8E58AA8E4BD9C_Init();
    gt_E69588E69E9CE58AA9E6898BE5889DE5A78BE58C96_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
